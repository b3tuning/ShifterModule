// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_5fmessage_2eproto;
namespace b3console {
class CanBusConfigMessage;
class CanBusConfigMessageDefaultTypeInternal;
extern CanBusConfigMessageDefaultTypeInternal _CanBusConfigMessage_default_instance_;
class ConfigBaseMessage;
class ConfigBaseMessageDefaultTypeInternal;
extern ConfigBaseMessageDefaultTypeInternal _ConfigBaseMessage_default_instance_;
class DoorMessage;
class DoorMessageDefaultTypeInternal;
extern DoorMessageDefaultTypeInternal _DoorMessage_default_instance_;
class DoorMessage_MirrorActionConfigMessage;
class DoorMessage_MirrorActionConfigMessageDefaultTypeInternal;
extern DoorMessage_MirrorActionConfigMessageDefaultTypeInternal _DoorMessage_MirrorActionConfigMessage_default_instance_;
class DoorMessage_MirrorSelectConfigMessage;
class DoorMessage_MirrorSelectConfigMessageDefaultTypeInternal;
extern DoorMessage_MirrorSelectConfigMessageDefaultTypeInternal _DoorMessage_MirrorSelectConfigMessage_default_instance_;
class DoorMessage_WindowActionConfigMessage;
class DoorMessage_WindowActionConfigMessageDefaultTypeInternal;
extern DoorMessage_WindowActionConfigMessageDefaultTypeInternal _DoorMessage_WindowActionConfigMessage_default_instance_;
class ShifterMessage;
class ShifterMessageDefaultTypeInternal;
extern ShifterMessageDefaultTypeInternal _ShifterMessage_default_instance_;
class ShifterMessage_IndicatorConfigMessage;
class ShifterMessage_IndicatorConfigMessageDefaultTypeInternal;
extern ShifterMessage_IndicatorConfigMessageDefaultTypeInternal _ShifterMessage_IndicatorConfigMessage_default_instance_;
class ShifterMessage_MelexisConfigMessage;
class ShifterMessage_MelexisConfigMessageDefaultTypeInternal;
extern ShifterMessage_MelexisConfigMessageDefaultTypeInternal _ShifterMessage_MelexisConfigMessage_default_instance_;
class ShifterMessage_ShifterPositionMessage;
class ShifterMessage_ShifterPositionMessageDefaultTypeInternal;
extern ShifterMessage_ShifterPositionMessageDefaultTypeInternal _ShifterMessage_ShifterPositionMessage_default_instance_;
class TransMessage;
class TransMessageDefaultTypeInternal;
extern TransMessageDefaultTypeInternal _TransMessage_default_instance_;
class TransMessage_Ems22AConfigMessage;
class TransMessage_Ems22AConfigMessageDefaultTypeInternal;
extern TransMessage_Ems22AConfigMessageDefaultTypeInternal _TransMessage_Ems22AConfigMessage_default_instance_;
class TransMessage_PidConfigMessage;
class TransMessage_PidConfigMessageDefaultTypeInternal;
extern TransMessage_PidConfigMessageDefaultTypeInternal _TransMessage_PidConfigMessage_default_instance_;
class TransMessage_Vnh5019ConfigMessage;
class TransMessage_Vnh5019ConfigMessageDefaultTypeInternal;
extern TransMessage_Vnh5019ConfigMessageDefaultTypeInternal _TransMessage_Vnh5019ConfigMessage_default_instance_;
}  // namespace b3console
PROTOBUF_NAMESPACE_OPEN
template<> ::b3console::CanBusConfigMessage* Arena::CreateMaybeMessage<::b3console::CanBusConfigMessage>(Arena*);
template<> ::b3console::ConfigBaseMessage* Arena::CreateMaybeMessage<::b3console::ConfigBaseMessage>(Arena*);
template<> ::b3console::DoorMessage* Arena::CreateMaybeMessage<::b3console::DoorMessage>(Arena*);
template<> ::b3console::DoorMessage_MirrorActionConfigMessage* Arena::CreateMaybeMessage<::b3console::DoorMessage_MirrorActionConfigMessage>(Arena*);
template<> ::b3console::DoorMessage_MirrorSelectConfigMessage* Arena::CreateMaybeMessage<::b3console::DoorMessage_MirrorSelectConfigMessage>(Arena*);
template<> ::b3console::DoorMessage_WindowActionConfigMessage* Arena::CreateMaybeMessage<::b3console::DoorMessage_WindowActionConfigMessage>(Arena*);
template<> ::b3console::ShifterMessage* Arena::CreateMaybeMessage<::b3console::ShifterMessage>(Arena*);
template<> ::b3console::ShifterMessage_IndicatorConfigMessage* Arena::CreateMaybeMessage<::b3console::ShifterMessage_IndicatorConfigMessage>(Arena*);
template<> ::b3console::ShifterMessage_MelexisConfigMessage* Arena::CreateMaybeMessage<::b3console::ShifterMessage_MelexisConfigMessage>(Arena*);
template<> ::b3console::ShifterMessage_ShifterPositionMessage* Arena::CreateMaybeMessage<::b3console::ShifterMessage_ShifterPositionMessage>(Arena*);
template<> ::b3console::TransMessage* Arena::CreateMaybeMessage<::b3console::TransMessage>(Arena*);
template<> ::b3console::TransMessage_Ems22AConfigMessage* Arena::CreateMaybeMessage<::b3console::TransMessage_Ems22AConfigMessage>(Arena*);
template<> ::b3console::TransMessage_PidConfigMessage* Arena::CreateMaybeMessage<::b3console::TransMessage_PidConfigMessage>(Arena*);
template<> ::b3console::TransMessage_Vnh5019ConfigMessage* Arena::CreateMaybeMessage<::b3console::TransMessage_Vnh5019ConfigMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace b3console {

enum Type : int {
  DOOR = 0,
  SHIFTER = 1,
  TRANS = 2,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = DOOR;
constexpr Type Type_MAX = TRANS;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    const std::string& name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class ConfigBaseMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:b3console.ConfigBaseMessage) */ {
 public:
  inline ConfigBaseMessage() : ConfigBaseMessage(nullptr) {};
  virtual ~ConfigBaseMessage();

  ConfigBaseMessage(const ConfigBaseMessage& from);
  ConfigBaseMessage(ConfigBaseMessage&& from) noexcept
    : ConfigBaseMessage() {
    *this = ::std::move(from);
  }

  inline ConfigBaseMessage& operator=(const ConfigBaseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigBaseMessage& operator=(ConfigBaseMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigBaseMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigBaseMessage* internal_default_instance() {
    return reinterpret_cast<const ConfigBaseMessage*>(
               &_ConfigBaseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConfigBaseMessage& a, ConfigBaseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigBaseMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigBaseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigBaseMessage* New() const final {
    return CreateMaybeMessage<ConfigBaseMessage>(nullptr);
  }

  ConfigBaseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigBaseMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigBaseMessage& from);
  void MergeFrom(const ConfigBaseMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigBaseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "b3console.ConfigBaseMessage";
  }
  protected:
  explicit ConfigBaseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessage_2eproto);
    return ::descriptor_table_config_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoorFieldNumber = 2,
    kShifterFieldNumber = 3,
    kTransFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // .b3console.DoorMessage door = 2;
  bool has_door() const;
  private:
  bool _internal_has_door() const;
  public:
  void clear_door();
  const ::b3console::DoorMessage& door() const;
  ::b3console::DoorMessage* release_door();
  ::b3console::DoorMessage* mutable_door();
  void set_allocated_door(::b3console::DoorMessage* door);
  private:
  const ::b3console::DoorMessage& _internal_door() const;
  ::b3console::DoorMessage* _internal_mutable_door();
  public:
  void unsafe_arena_set_allocated_door(
      ::b3console::DoorMessage* door);
  ::b3console::DoorMessage* unsafe_arena_release_door();

  // .b3console.ShifterMessage shifter = 3;
  bool has_shifter() const;
  private:
  bool _internal_has_shifter() const;
  public:
  void clear_shifter();
  const ::b3console::ShifterMessage& shifter() const;
  ::b3console::ShifterMessage* release_shifter();
  ::b3console::ShifterMessage* mutable_shifter();
  void set_allocated_shifter(::b3console::ShifterMessage* shifter);
  private:
  const ::b3console::ShifterMessage& _internal_shifter() const;
  ::b3console::ShifterMessage* _internal_mutable_shifter();
  public:
  void unsafe_arena_set_allocated_shifter(
      ::b3console::ShifterMessage* shifter);
  ::b3console::ShifterMessage* unsafe_arena_release_shifter();

  // .b3console.TransMessage trans = 4;
  bool has_trans() const;
  private:
  bool _internal_has_trans() const;
  public:
  void clear_trans();
  const ::b3console::TransMessage& trans() const;
  ::b3console::TransMessage* release_trans();
  ::b3console::TransMessage* mutable_trans();
  void set_allocated_trans(::b3console::TransMessage* trans);
  private:
  const ::b3console::TransMessage& _internal_trans() const;
  ::b3console::TransMessage* _internal_mutable_trans();
  public:
  void unsafe_arena_set_allocated_trans(
      ::b3console::TransMessage* trans);
  ::b3console::TransMessage* unsafe_arena_release_trans();

  // .b3console.Type type = 1;
  void clear_type();
  ::b3console::Type type() const;
  void set_type(::b3console::Type value);
  private:
  ::b3console::Type _internal_type() const;
  void _internal_set_type(::b3console::Type value);
  public:

  // @@protoc_insertion_point(class_scope:b3console.ConfigBaseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::b3console::DoorMessage* door_;
  ::b3console::ShifterMessage* shifter_;
  ::b3console::TransMessage* trans_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class DoorMessage_MirrorActionConfigMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:b3console.DoorMessage.MirrorActionConfigMessage) */ {
 public:
  inline DoorMessage_MirrorActionConfigMessage() : DoorMessage_MirrorActionConfigMessage(nullptr) {};
  virtual ~DoorMessage_MirrorActionConfigMessage();

  DoorMessage_MirrorActionConfigMessage(const DoorMessage_MirrorActionConfigMessage& from);
  DoorMessage_MirrorActionConfigMessage(DoorMessage_MirrorActionConfigMessage&& from) noexcept
    : DoorMessage_MirrorActionConfigMessage() {
    *this = ::std::move(from);
  }

  inline DoorMessage_MirrorActionConfigMessage& operator=(const DoorMessage_MirrorActionConfigMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoorMessage_MirrorActionConfigMessage& operator=(DoorMessage_MirrorActionConfigMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoorMessage_MirrorActionConfigMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoorMessage_MirrorActionConfigMessage* internal_default_instance() {
    return reinterpret_cast<const DoorMessage_MirrorActionConfigMessage*>(
               &_DoorMessage_MirrorActionConfigMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DoorMessage_MirrorActionConfigMessage& a, DoorMessage_MirrorActionConfigMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DoorMessage_MirrorActionConfigMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoorMessage_MirrorActionConfigMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoorMessage_MirrorActionConfigMessage* New() const final {
    return CreateMaybeMessage<DoorMessage_MirrorActionConfigMessage>(nullptr);
  }

  DoorMessage_MirrorActionConfigMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoorMessage_MirrorActionConfigMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoorMessage_MirrorActionConfigMessage& from);
  void MergeFrom(const DoorMessage_MirrorActionConfigMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoorMessage_MirrorActionConfigMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "b3console.DoorMessage.MirrorActionConfigMessage";
  }
  protected:
  explicit DoorMessage_MirrorActionConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessage_2eproto);
    return ::descriptor_table_config_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDownMaxFieldNumber = 1,
    kDownMinFieldNumber = 2,
    kLeftMaxFieldNumber = 3,
    kLeftMinFieldNumber = 4,
    kRightMaxFieldNumber = 5,
    kRightMinFieldNumber = 6,
    kUpMaxFieldNumber = 7,
    kUpMinFieldNumber = 8,
  };
  // int32 down_max = 1;
  void clear_down_max();
  ::PROTOBUF_NAMESPACE_ID::int32 down_max() const;
  void set_down_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_down_max() const;
  void _internal_set_down_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 down_min = 2;
  void clear_down_min();
  ::PROTOBUF_NAMESPACE_ID::int32 down_min() const;
  void set_down_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_down_min() const;
  void _internal_set_down_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 left_max = 3;
  void clear_left_max();
  ::PROTOBUF_NAMESPACE_ID::int32 left_max() const;
  void set_left_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left_max() const;
  void _internal_set_left_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 left_min = 4;
  void clear_left_min();
  ::PROTOBUF_NAMESPACE_ID::int32 left_min() const;
  void set_left_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left_min() const;
  void _internal_set_left_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 right_max = 5;
  void clear_right_max();
  ::PROTOBUF_NAMESPACE_ID::int32 right_max() const;
  void set_right_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right_max() const;
  void _internal_set_right_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 right_min = 6;
  void clear_right_min();
  ::PROTOBUF_NAMESPACE_ID::int32 right_min() const;
  void set_right_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right_min() const;
  void _internal_set_right_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 up_max = 7;
  void clear_up_max();
  ::PROTOBUF_NAMESPACE_ID::int32 up_max() const;
  void set_up_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_up_max() const;
  void _internal_set_up_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 up_min = 8;
  void clear_up_min();
  ::PROTOBUF_NAMESPACE_ID::int32 up_min() const;
  void set_up_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_up_min() const;
  void _internal_set_up_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:b3console.DoorMessage.MirrorActionConfigMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 down_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 down_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 up_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 up_min_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class DoorMessage_MirrorSelectConfigMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:b3console.DoorMessage.MirrorSelectConfigMessage) */ {
 public:
  inline DoorMessage_MirrorSelectConfigMessage() : DoorMessage_MirrorSelectConfigMessage(nullptr) {};
  virtual ~DoorMessage_MirrorSelectConfigMessage();

  DoorMessage_MirrorSelectConfigMessage(const DoorMessage_MirrorSelectConfigMessage& from);
  DoorMessage_MirrorSelectConfigMessage(DoorMessage_MirrorSelectConfigMessage&& from) noexcept
    : DoorMessage_MirrorSelectConfigMessage() {
    *this = ::std::move(from);
  }

  inline DoorMessage_MirrorSelectConfigMessage& operator=(const DoorMessage_MirrorSelectConfigMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoorMessage_MirrorSelectConfigMessage& operator=(DoorMessage_MirrorSelectConfigMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoorMessage_MirrorSelectConfigMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoorMessage_MirrorSelectConfigMessage* internal_default_instance() {
    return reinterpret_cast<const DoorMessage_MirrorSelectConfigMessage*>(
               &_DoorMessage_MirrorSelectConfigMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DoorMessage_MirrorSelectConfigMessage& a, DoorMessage_MirrorSelectConfigMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DoorMessage_MirrorSelectConfigMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoorMessage_MirrorSelectConfigMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoorMessage_MirrorSelectConfigMessage* New() const final {
    return CreateMaybeMessage<DoorMessage_MirrorSelectConfigMessage>(nullptr);
  }

  DoorMessage_MirrorSelectConfigMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoorMessage_MirrorSelectConfigMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoorMessage_MirrorSelectConfigMessage& from);
  void MergeFrom(const DoorMessage_MirrorSelectConfigMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoorMessage_MirrorSelectConfigMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "b3console.DoorMessage.MirrorSelectConfigMessage";
  }
  protected:
  explicit DoorMessage_MirrorSelectConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessage_2eproto);
    return ::descriptor_table_config_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverMaxFieldNumber = 1,
    kDriverMinFieldNumber = 2,
    kFoldMaxFieldNumber = 3,
    kFoldMinFieldNumber = 4,
    kPassengerMaxFieldNumber = 5,
    kPassengerMinFieldNumber = 6,
  };
  // int32 driver_max = 1;
  void clear_driver_max();
  ::PROTOBUF_NAMESPACE_ID::int32 driver_max() const;
  void set_driver_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_driver_max() const;
  void _internal_set_driver_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 driver_min = 2;
  void clear_driver_min();
  ::PROTOBUF_NAMESPACE_ID::int32 driver_min() const;
  void set_driver_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_driver_min() const;
  void _internal_set_driver_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fold_max = 3;
  void clear_fold_max();
  ::PROTOBUF_NAMESPACE_ID::int32 fold_max() const;
  void set_fold_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fold_max() const;
  void _internal_set_fold_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fold_min = 4;
  void clear_fold_min();
  ::PROTOBUF_NAMESPACE_ID::int32 fold_min() const;
  void set_fold_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fold_min() const;
  void _internal_set_fold_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 passenger_max = 5;
  void clear_passenger_max();
  ::PROTOBUF_NAMESPACE_ID::int32 passenger_max() const;
  void set_passenger_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_passenger_max() const;
  void _internal_set_passenger_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 passenger_min = 6;
  void clear_passenger_min();
  ::PROTOBUF_NAMESPACE_ID::int32 passenger_min() const;
  void set_passenger_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_passenger_min() const;
  void _internal_set_passenger_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:b3console.DoorMessage.MirrorSelectConfigMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 driver_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 driver_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 fold_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 fold_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 passenger_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 passenger_min_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class DoorMessage_WindowActionConfigMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:b3console.DoorMessage.WindowActionConfigMessage) */ {
 public:
  inline DoorMessage_WindowActionConfigMessage() : DoorMessage_WindowActionConfigMessage(nullptr) {};
  virtual ~DoorMessage_WindowActionConfigMessage();

  DoorMessage_WindowActionConfigMessage(const DoorMessage_WindowActionConfigMessage& from);
  DoorMessage_WindowActionConfigMessage(DoorMessage_WindowActionConfigMessage&& from) noexcept
    : DoorMessage_WindowActionConfigMessage() {
    *this = ::std::move(from);
  }

  inline DoorMessage_WindowActionConfigMessage& operator=(const DoorMessage_WindowActionConfigMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoorMessage_WindowActionConfigMessage& operator=(DoorMessage_WindowActionConfigMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoorMessage_WindowActionConfigMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoorMessage_WindowActionConfigMessage* internal_default_instance() {
    return reinterpret_cast<const DoorMessage_WindowActionConfigMessage*>(
               &_DoorMessage_WindowActionConfigMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DoorMessage_WindowActionConfigMessage& a, DoorMessage_WindowActionConfigMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DoorMessage_WindowActionConfigMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoorMessage_WindowActionConfigMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoorMessage_WindowActionConfigMessage* New() const final {
    return CreateMaybeMessage<DoorMessage_WindowActionConfigMessage>(nullptr);
  }

  DoorMessage_WindowActionConfigMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoorMessage_WindowActionConfigMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoorMessage_WindowActionConfigMessage& from);
  void MergeFrom(const DoorMessage_WindowActionConfigMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoorMessage_WindowActionConfigMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "b3console.DoorMessage.WindowActionConfigMessage";
  }
  protected:
  explicit DoorMessage_WindowActionConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessage_2eproto);
    return ::descriptor_table_config_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoDownMaxFieldNumber = 1,
    kAutoDownMinFieldNumber = 2,
    kAutoUpMaxFieldNumber = 3,
    kAutoUpMinFieldNumber = 4,
    kDownMaxFieldNumber = 5,
    kDownMinFieldNumber = 6,
    kUpMaxFieldNumber = 7,
    kUpMinFieldNumber = 8,
  };
  // int32 auto_down_max = 1;
  void clear_auto_down_max();
  ::PROTOBUF_NAMESPACE_ID::int32 auto_down_max() const;
  void set_auto_down_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_auto_down_max() const;
  void _internal_set_auto_down_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 auto_down_min = 2;
  void clear_auto_down_min();
  ::PROTOBUF_NAMESPACE_ID::int32 auto_down_min() const;
  void set_auto_down_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_auto_down_min() const;
  void _internal_set_auto_down_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 auto_up_max = 3;
  void clear_auto_up_max();
  ::PROTOBUF_NAMESPACE_ID::int32 auto_up_max() const;
  void set_auto_up_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_auto_up_max() const;
  void _internal_set_auto_up_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 auto_up_min = 4;
  void clear_auto_up_min();
  ::PROTOBUF_NAMESPACE_ID::int32 auto_up_min() const;
  void set_auto_up_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_auto_up_min() const;
  void _internal_set_auto_up_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 down_max = 5;
  void clear_down_max();
  ::PROTOBUF_NAMESPACE_ID::int32 down_max() const;
  void set_down_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_down_max() const;
  void _internal_set_down_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 down_min = 6;
  void clear_down_min();
  ::PROTOBUF_NAMESPACE_ID::int32 down_min() const;
  void set_down_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_down_min() const;
  void _internal_set_down_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 up_max = 7;
  void clear_up_max();
  ::PROTOBUF_NAMESPACE_ID::int32 up_max() const;
  void set_up_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_up_max() const;
  void _internal_set_up_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 up_min = 8;
  void clear_up_min();
  ::PROTOBUF_NAMESPACE_ID::int32 up_min() const;
  void set_up_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_up_min() const;
  void _internal_set_up_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:b3console.DoorMessage.WindowActionConfigMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 auto_down_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 auto_down_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 auto_up_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 auto_up_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 down_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 down_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 up_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 up_min_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class DoorMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:b3console.DoorMessage) */ {
 public:
  inline DoorMessage() : DoorMessage(nullptr) {};
  virtual ~DoorMessage();

  DoorMessage(const DoorMessage& from);
  DoorMessage(DoorMessage&& from) noexcept
    : DoorMessage() {
    *this = ::std::move(from);
  }

  inline DoorMessage& operator=(const DoorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoorMessage& operator=(DoorMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoorMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoorMessage* internal_default_instance() {
    return reinterpret_cast<const DoorMessage*>(
               &_DoorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DoorMessage& a, DoorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DoorMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoorMessage* New() const final {
    return CreateMaybeMessage<DoorMessage>(nullptr);
  }

  DoorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoorMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoorMessage& from);
  void MergeFrom(const DoorMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoorMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "b3console.DoorMessage";
  }
  protected:
  explicit DoorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessage_2eproto);
    return ::descriptor_table_config_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DoorMessage_MirrorActionConfigMessage MirrorActionConfigMessage;
  typedef DoorMessage_MirrorSelectConfigMessage MirrorSelectConfigMessage;
  typedef DoorMessage_WindowActionConfigMessage WindowActionConfigMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kMirrorActionFieldNumber = 1,
    kMirrorSelectFieldNumber = 2,
    kWindowActionFieldNumber = 3,
    kDriverWindowMaxCurrentFieldNumber = 4,
    kPassengerWindowMaxCurrentFieldNumber = 5,
  };
  // .b3console.DoorMessage.MirrorActionConfigMessage mirror_action = 1;
  bool has_mirror_action() const;
  private:
  bool _internal_has_mirror_action() const;
  public:
  void clear_mirror_action();
  const ::b3console::DoorMessage_MirrorActionConfigMessage& mirror_action() const;
  ::b3console::DoorMessage_MirrorActionConfigMessage* release_mirror_action();
  ::b3console::DoorMessage_MirrorActionConfigMessage* mutable_mirror_action();
  void set_allocated_mirror_action(::b3console::DoorMessage_MirrorActionConfigMessage* mirror_action);
  private:
  const ::b3console::DoorMessage_MirrorActionConfigMessage& _internal_mirror_action() const;
  ::b3console::DoorMessage_MirrorActionConfigMessage* _internal_mutable_mirror_action();
  public:
  void unsafe_arena_set_allocated_mirror_action(
      ::b3console::DoorMessage_MirrorActionConfigMessage* mirror_action);
  ::b3console::DoorMessage_MirrorActionConfigMessage* unsafe_arena_release_mirror_action();

  // .b3console.DoorMessage.MirrorSelectConfigMessage mirror_select = 2;
  bool has_mirror_select() const;
  private:
  bool _internal_has_mirror_select() const;
  public:
  void clear_mirror_select();
  const ::b3console::DoorMessage_MirrorSelectConfigMessage& mirror_select() const;
  ::b3console::DoorMessage_MirrorSelectConfigMessage* release_mirror_select();
  ::b3console::DoorMessage_MirrorSelectConfigMessage* mutable_mirror_select();
  void set_allocated_mirror_select(::b3console::DoorMessage_MirrorSelectConfigMessage* mirror_select);
  private:
  const ::b3console::DoorMessage_MirrorSelectConfigMessage& _internal_mirror_select() const;
  ::b3console::DoorMessage_MirrorSelectConfigMessage* _internal_mutable_mirror_select();
  public:
  void unsafe_arena_set_allocated_mirror_select(
      ::b3console::DoorMessage_MirrorSelectConfigMessage* mirror_select);
  ::b3console::DoorMessage_MirrorSelectConfigMessage* unsafe_arena_release_mirror_select();

  // .b3console.DoorMessage.WindowActionConfigMessage window_action = 3;
  bool has_window_action() const;
  private:
  bool _internal_has_window_action() const;
  public:
  void clear_window_action();
  const ::b3console::DoorMessage_WindowActionConfigMessage& window_action() const;
  ::b3console::DoorMessage_WindowActionConfigMessage* release_window_action();
  ::b3console::DoorMessage_WindowActionConfigMessage* mutable_window_action();
  void set_allocated_window_action(::b3console::DoorMessage_WindowActionConfigMessage* window_action);
  private:
  const ::b3console::DoorMessage_WindowActionConfigMessage& _internal_window_action() const;
  ::b3console::DoorMessage_WindowActionConfigMessage* _internal_mutable_window_action();
  public:
  void unsafe_arena_set_allocated_window_action(
      ::b3console::DoorMessage_WindowActionConfigMessage* window_action);
  ::b3console::DoorMessage_WindowActionConfigMessage* unsafe_arena_release_window_action();

  // int32 driver_window_max_current = 4;
  void clear_driver_window_max_current();
  ::PROTOBUF_NAMESPACE_ID::int32 driver_window_max_current() const;
  void set_driver_window_max_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_driver_window_max_current() const;
  void _internal_set_driver_window_max_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 passenger_window_max_current = 5;
  void clear_passenger_window_max_current();
  ::PROTOBUF_NAMESPACE_ID::int32 passenger_window_max_current() const;
  void set_passenger_window_max_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_passenger_window_max_current() const;
  void _internal_set_passenger_window_max_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:b3console.DoorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::b3console::DoorMessage_MirrorActionConfigMessage* mirror_action_;
  ::b3console::DoorMessage_MirrorSelectConfigMessage* mirror_select_;
  ::b3console::DoorMessage_WindowActionConfigMessage* window_action_;
  ::PROTOBUF_NAMESPACE_ID::int32 driver_window_max_current_;
  ::PROTOBUF_NAMESPACE_ID::int32 passenger_window_max_current_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class CanBusConfigMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:b3console.CanBusConfigMessage) */ {
 public:
  inline CanBusConfigMessage() : CanBusConfigMessage(nullptr) {};
  virtual ~CanBusConfigMessage();

  CanBusConfigMessage(const CanBusConfigMessage& from);
  CanBusConfigMessage(CanBusConfigMessage&& from) noexcept
    : CanBusConfigMessage() {
    *this = ::std::move(from);
  }

  inline CanBusConfigMessage& operator=(const CanBusConfigMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanBusConfigMessage& operator=(CanBusConfigMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CanBusConfigMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CanBusConfigMessage* internal_default_instance() {
    return reinterpret_cast<const CanBusConfigMessage*>(
               &_CanBusConfigMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CanBusConfigMessage& a, CanBusConfigMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CanBusConfigMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanBusConfigMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CanBusConfigMessage* New() const final {
    return CreateMaybeMessage<CanBusConfigMessage>(nullptr);
  }

  CanBusConfigMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CanBusConfigMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CanBusConfigMessage& from);
  void MergeFrom(const CanBusConfigMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanBusConfigMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "b3console.CanBusConfigMessage";
  }
  protected:
  explicit CanBusConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessage_2eproto);
    return ::descriptor_table_config_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrTxFieldNumber = 1,
    kBootRxFieldNumber = 2,
    kBootTxFieldNumber = 3,
    kIntvlTxFieldNumber = 4,
    kMask0FieldNumber = 5,
    kFilter00FieldNumber = 6,
    kFilter01FieldNumber = 7,
    kMask1FieldNumber = 8,
    kFilter10FieldNumber = 9,
    kFilter11FieldNumber = 10,
    kFilter12FieldNumber = 11,
    kFilter13FieldNumber = 12,
  };
  // int32 addr_tx = 1;
  void clear_addr_tx();
  ::PROTOBUF_NAMESPACE_ID::int32 addr_tx() const;
  void set_addr_tx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_addr_tx() const;
  void _internal_set_addr_tx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 boot_rx = 2;
  void clear_boot_rx();
  ::PROTOBUF_NAMESPACE_ID::int32 boot_rx() const;
  void set_boot_rx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boot_rx() const;
  void _internal_set_boot_rx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 boot_tx = 3;
  void clear_boot_tx();
  ::PROTOBUF_NAMESPACE_ID::int32 boot_tx() const;
  void set_boot_tx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boot_tx() const;
  void _internal_set_boot_tx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 intvl_tx = 4;
  void clear_intvl_tx();
  ::PROTOBUF_NAMESPACE_ID::int32 intvl_tx() const;
  void set_intvl_tx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intvl_tx() const;
  void _internal_set_intvl_tx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mask0 = 5;
  void clear_mask0();
  ::PROTOBUF_NAMESPACE_ID::int32 mask0() const;
  void set_mask0(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mask0() const;
  void _internal_set_mask0(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 filter0_0 = 6;
  void clear_filter0_0();
  ::PROTOBUF_NAMESPACE_ID::int32 filter0_0() const;
  void set_filter0_0(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_filter0_0() const;
  void _internal_set_filter0_0(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 filter0_1 = 7;
  void clear_filter0_1();
  ::PROTOBUF_NAMESPACE_ID::int32 filter0_1() const;
  void set_filter0_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_filter0_1() const;
  void _internal_set_filter0_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mask1 = 8;
  void clear_mask1();
  ::PROTOBUF_NAMESPACE_ID::int32 mask1() const;
  void set_mask1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mask1() const;
  void _internal_set_mask1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 filter1_0 = 9;
  void clear_filter1_0();
  ::PROTOBUF_NAMESPACE_ID::int32 filter1_0() const;
  void set_filter1_0(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_filter1_0() const;
  void _internal_set_filter1_0(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 filter1_1 = 10;
  void clear_filter1_1();
  ::PROTOBUF_NAMESPACE_ID::int32 filter1_1() const;
  void set_filter1_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_filter1_1() const;
  void _internal_set_filter1_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 filter1_2 = 11;
  void clear_filter1_2();
  ::PROTOBUF_NAMESPACE_ID::int32 filter1_2() const;
  void set_filter1_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_filter1_2() const;
  void _internal_set_filter1_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 filter1_3 = 12;
  void clear_filter1_3();
  ::PROTOBUF_NAMESPACE_ID::int32 filter1_3() const;
  void set_filter1_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_filter1_3() const;
  void _internal_set_filter1_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:b3console.CanBusConfigMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 addr_tx_;
  ::PROTOBUF_NAMESPACE_ID::int32 boot_rx_;
  ::PROTOBUF_NAMESPACE_ID::int32 boot_tx_;
  ::PROTOBUF_NAMESPACE_ID::int32 intvl_tx_;
  ::PROTOBUF_NAMESPACE_ID::int32 mask0_;
  ::PROTOBUF_NAMESPACE_ID::int32 filter0_0_;
  ::PROTOBUF_NAMESPACE_ID::int32 filter0_1_;
  ::PROTOBUF_NAMESPACE_ID::int32 mask1_;
  ::PROTOBUF_NAMESPACE_ID::int32 filter1_0_;
  ::PROTOBUF_NAMESPACE_ID::int32 filter1_1_;
  ::PROTOBUF_NAMESPACE_ID::int32 filter1_2_;
  ::PROTOBUF_NAMESPACE_ID::int32 filter1_3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ShifterMessage_IndicatorConfigMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:b3console.ShifterMessage.IndicatorConfigMessage) */ {
 public:
  inline ShifterMessage_IndicatorConfigMessage() : ShifterMessage_IndicatorConfigMessage(nullptr) {};
  virtual ~ShifterMessage_IndicatorConfigMessage();

  ShifterMessage_IndicatorConfigMessage(const ShifterMessage_IndicatorConfigMessage& from);
  ShifterMessage_IndicatorConfigMessage(ShifterMessage_IndicatorConfigMessage&& from) noexcept
    : ShifterMessage_IndicatorConfigMessage() {
    *this = ::std::move(from);
  }

  inline ShifterMessage_IndicatorConfigMessage& operator=(const ShifterMessage_IndicatorConfigMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShifterMessage_IndicatorConfigMessage& operator=(ShifterMessage_IndicatorConfigMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShifterMessage_IndicatorConfigMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShifterMessage_IndicatorConfigMessage* internal_default_instance() {
    return reinterpret_cast<const ShifterMessage_IndicatorConfigMessage*>(
               &_ShifterMessage_IndicatorConfigMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ShifterMessage_IndicatorConfigMessage& a, ShifterMessage_IndicatorConfigMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ShifterMessage_IndicatorConfigMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShifterMessage_IndicatorConfigMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShifterMessage_IndicatorConfigMessage* New() const final {
    return CreateMaybeMessage<ShifterMessage_IndicatorConfigMessage>(nullptr);
  }

  ShifterMessage_IndicatorConfigMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShifterMessage_IndicatorConfigMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShifterMessage_IndicatorConfigMessage& from);
  void MergeFrom(const ShifterMessage_IndicatorConfigMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShifterMessage_IndicatorConfigMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "b3console.ShifterMessage.IndicatorConfigMessage";
  }
  protected:
  explicit ShifterMessage_IndicatorConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessage_2eproto);
    return ::descriptor_table_config_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrightnessFieldNumber = 1,
    kColorFieldNumber = 2,
    kWaitFieldNumber = 3,
  };
  // int32 brightness = 1;
  void clear_brightness();
  ::PROTOBUF_NAMESPACE_ID::int32 brightness() const;
  void set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_brightness() const;
  void _internal_set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 color = 2;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::int32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wait = 3;
  void clear_wait();
  ::PROTOBUF_NAMESPACE_ID::int32 wait() const;
  void set_wait(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wait() const;
  void _internal_set_wait(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:b3console.ShifterMessage.IndicatorConfigMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 brightness_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_;
  ::PROTOBUF_NAMESPACE_ID::int32 wait_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ShifterMessage_MelexisConfigMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:b3console.ShifterMessage.MelexisConfigMessage) */ {
 public:
  inline ShifterMessage_MelexisConfigMessage() : ShifterMessage_MelexisConfigMessage(nullptr) {};
  virtual ~ShifterMessage_MelexisConfigMessage();

  ShifterMessage_MelexisConfigMessage(const ShifterMessage_MelexisConfigMessage& from);
  ShifterMessage_MelexisConfigMessage(ShifterMessage_MelexisConfigMessage&& from) noexcept
    : ShifterMessage_MelexisConfigMessage() {
    *this = ::std::move(from);
  }

  inline ShifterMessage_MelexisConfigMessage& operator=(const ShifterMessage_MelexisConfigMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShifterMessage_MelexisConfigMessage& operator=(ShifterMessage_MelexisConfigMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShifterMessage_MelexisConfigMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShifterMessage_MelexisConfigMessage* internal_default_instance() {
    return reinterpret_cast<const ShifterMessage_MelexisConfigMessage*>(
               &_ShifterMessage_MelexisConfigMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ShifterMessage_MelexisConfigMessage& a, ShifterMessage_MelexisConfigMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ShifterMessage_MelexisConfigMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShifterMessage_MelexisConfigMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShifterMessage_MelexisConfigMessage* New() const final {
    return CreateMaybeMessage<ShifterMessage_MelexisConfigMessage>(nullptr);
  }

  ShifterMessage_MelexisConfigMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShifterMessage_MelexisConfigMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShifterMessage_MelexisConfigMessage& from);
  void MergeFrom(const ShifterMessage_MelexisConfigMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShifterMessage_MelexisConfigMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "b3console.ShifterMessage.MelexisConfigMessage";
  }
  protected:
  explicit ShifterMessage_MelexisConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessage_2eproto);
    return ::descriptor_table_config_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 1,
  };
  // int32 range = 1;
  void clear_range();
  ::PROTOBUF_NAMESPACE_ID::int32 range() const;
  void set_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_range() const;
  void _internal_set_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:b3console.ShifterMessage.MelexisConfigMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ShifterMessage_ShifterPositionMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:b3console.ShifterMessage.ShifterPositionMessage) */ {
 public:
  inline ShifterMessage_ShifterPositionMessage() : ShifterMessage_ShifterPositionMessage(nullptr) {};
  virtual ~ShifterMessage_ShifterPositionMessage();

  ShifterMessage_ShifterPositionMessage(const ShifterMessage_ShifterPositionMessage& from);
  ShifterMessage_ShifterPositionMessage(ShifterMessage_ShifterPositionMessage&& from) noexcept
    : ShifterMessage_ShifterPositionMessage() {
    *this = ::std::move(from);
  }

  inline ShifterMessage_ShifterPositionMessage& operator=(const ShifterMessage_ShifterPositionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShifterMessage_ShifterPositionMessage& operator=(ShifterMessage_ShifterPositionMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShifterMessage_ShifterPositionMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShifterMessage_ShifterPositionMessage* internal_default_instance() {
    return reinterpret_cast<const ShifterMessage_ShifterPositionMessage*>(
               &_ShifterMessage_ShifterPositionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ShifterMessage_ShifterPositionMessage& a, ShifterMessage_ShifterPositionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ShifterMessage_ShifterPositionMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShifterMessage_ShifterPositionMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShifterMessage_ShifterPositionMessage* New() const final {
    return CreateMaybeMessage<ShifterMessage_ShifterPositionMessage>(nullptr);
  }

  ShifterMessage_ShifterPositionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShifterMessage_ShifterPositionMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShifterMessage_ShifterPositionMessage& from);
  void MergeFrom(const ShifterMessage_ShifterPositionMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShifterMessage_ShifterPositionMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "b3console.ShifterMessage.ShifterPositionMessage";
  }
  protected:
  explicit ShifterMessage_ShifterPositionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessage_2eproto);
    return ::descriptor_table_config_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kX1FieldNumber = 1,
    kY1FieldNumber = 2,
    kX2FieldNumber = 3,
    kY2FieldNumber = 4,
    kEnumValFieldNumber = 5,
  };
  // int32 x1 = 1;
  void clear_x1();
  ::PROTOBUF_NAMESPACE_ID::int32 x1() const;
  void set_x1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x1() const;
  void _internal_set_x1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y1 = 2;
  void clear_y1();
  ::PROTOBUF_NAMESPACE_ID::int32 y1() const;
  void set_y1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y1() const;
  void _internal_set_y1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 x2 = 3;
  void clear_x2();
  ::PROTOBUF_NAMESPACE_ID::int32 x2() const;
  void set_x2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x2() const;
  void _internal_set_x2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y2 = 4;
  void clear_y2();
  ::PROTOBUF_NAMESPACE_ID::int32 y2() const;
  void set_y2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y2() const;
  void _internal_set_y2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enum_val = 5;
  void clear_enum_val();
  ::PROTOBUF_NAMESPACE_ID::int32 enum_val() const;
  void set_enum_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enum_val() const;
  void _internal_set_enum_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:b3console.ShifterMessage.ShifterPositionMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x1_;
  ::PROTOBUF_NAMESPACE_ID::int32 y1_;
  ::PROTOBUF_NAMESPACE_ID::int32 x2_;
  ::PROTOBUF_NAMESPACE_ID::int32 y2_;
  ::PROTOBUF_NAMESPACE_ID::int32 enum_val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ShifterMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:b3console.ShifterMessage) */ {
 public:
  inline ShifterMessage() : ShifterMessage(nullptr) {};
  virtual ~ShifterMessage();

  ShifterMessage(const ShifterMessage& from);
  ShifterMessage(ShifterMessage&& from) noexcept
    : ShifterMessage() {
    *this = ::std::move(from);
  }

  inline ShifterMessage& operator=(const ShifterMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShifterMessage& operator=(ShifterMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShifterMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShifterMessage* internal_default_instance() {
    return reinterpret_cast<const ShifterMessage*>(
               &_ShifterMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ShifterMessage& a, ShifterMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ShifterMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShifterMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShifterMessage* New() const final {
    return CreateMaybeMessage<ShifterMessage>(nullptr);
  }

  ShifterMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShifterMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShifterMessage& from);
  void MergeFrom(const ShifterMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShifterMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "b3console.ShifterMessage";
  }
  protected:
  explicit ShifterMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessage_2eproto);
    return ::descriptor_table_config_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ShifterMessage_IndicatorConfigMessage IndicatorConfigMessage;
  typedef ShifterMessage_MelexisConfigMessage MelexisConfigMessage;
  typedef ShifterMessage_ShifterPositionMessage ShifterPositionMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kCanBusConfigFieldNumber = 1,
    kIndicatorConfigFieldNumber = 2,
    kMelexisConfigFieldNumber = 3,
    kParkConfigFieldNumber = 4,
    kReverseConfigFieldNumber = 5,
    kNeutralConfigFieldNumber = 6,
    kDriveConfigFieldNumber = 7,
    kManualConfigFieldNumber = 8,
    kUpConfigFieldNumber = 9,
    kDownConfigFieldNumber = 10,
  };
  // .b3console.CanBusConfigMessage can_bus_config = 1;
  bool has_can_bus_config() const;
  private:
  bool _internal_has_can_bus_config() const;
  public:
  void clear_can_bus_config();
  const ::b3console::CanBusConfigMessage& can_bus_config() const;
  ::b3console::CanBusConfigMessage* release_can_bus_config();
  ::b3console::CanBusConfigMessage* mutable_can_bus_config();
  void set_allocated_can_bus_config(::b3console::CanBusConfigMessage* can_bus_config);
  private:
  const ::b3console::CanBusConfigMessage& _internal_can_bus_config() const;
  ::b3console::CanBusConfigMessage* _internal_mutable_can_bus_config();
  public:
  void unsafe_arena_set_allocated_can_bus_config(
      ::b3console::CanBusConfigMessage* can_bus_config);
  ::b3console::CanBusConfigMessage* unsafe_arena_release_can_bus_config();

  // .b3console.ShifterMessage.IndicatorConfigMessage indicator_config = 2;
  bool has_indicator_config() const;
  private:
  bool _internal_has_indicator_config() const;
  public:
  void clear_indicator_config();
  const ::b3console::ShifterMessage_IndicatorConfigMessage& indicator_config() const;
  ::b3console::ShifterMessage_IndicatorConfigMessage* release_indicator_config();
  ::b3console::ShifterMessage_IndicatorConfigMessage* mutable_indicator_config();
  void set_allocated_indicator_config(::b3console::ShifterMessage_IndicatorConfigMessage* indicator_config);
  private:
  const ::b3console::ShifterMessage_IndicatorConfigMessage& _internal_indicator_config() const;
  ::b3console::ShifterMessage_IndicatorConfigMessage* _internal_mutable_indicator_config();
  public:
  void unsafe_arena_set_allocated_indicator_config(
      ::b3console::ShifterMessage_IndicatorConfigMessage* indicator_config);
  ::b3console::ShifterMessage_IndicatorConfigMessage* unsafe_arena_release_indicator_config();

  // .b3console.ShifterMessage.MelexisConfigMessage melexis_config = 3;
  bool has_melexis_config() const;
  private:
  bool _internal_has_melexis_config() const;
  public:
  void clear_melexis_config();
  const ::b3console::ShifterMessage_MelexisConfigMessage& melexis_config() const;
  ::b3console::ShifterMessage_MelexisConfigMessage* release_melexis_config();
  ::b3console::ShifterMessage_MelexisConfigMessage* mutable_melexis_config();
  void set_allocated_melexis_config(::b3console::ShifterMessage_MelexisConfigMessage* melexis_config);
  private:
  const ::b3console::ShifterMessage_MelexisConfigMessage& _internal_melexis_config() const;
  ::b3console::ShifterMessage_MelexisConfigMessage* _internal_mutable_melexis_config();
  public:
  void unsafe_arena_set_allocated_melexis_config(
      ::b3console::ShifterMessage_MelexisConfigMessage* melexis_config);
  ::b3console::ShifterMessage_MelexisConfigMessage* unsafe_arena_release_melexis_config();

  // .b3console.ShifterMessage.ShifterPositionMessage park_config = 4;
  bool has_park_config() const;
  private:
  bool _internal_has_park_config() const;
  public:
  void clear_park_config();
  const ::b3console::ShifterMessage_ShifterPositionMessage& park_config() const;
  ::b3console::ShifterMessage_ShifterPositionMessage* release_park_config();
  ::b3console::ShifterMessage_ShifterPositionMessage* mutable_park_config();
  void set_allocated_park_config(::b3console::ShifterMessage_ShifterPositionMessage* park_config);
  private:
  const ::b3console::ShifterMessage_ShifterPositionMessage& _internal_park_config() const;
  ::b3console::ShifterMessage_ShifterPositionMessage* _internal_mutable_park_config();
  public:
  void unsafe_arena_set_allocated_park_config(
      ::b3console::ShifterMessage_ShifterPositionMessage* park_config);
  ::b3console::ShifterMessage_ShifterPositionMessage* unsafe_arena_release_park_config();

  // .b3console.ShifterMessage.ShifterPositionMessage reverse_config = 5;
  bool has_reverse_config() const;
  private:
  bool _internal_has_reverse_config() const;
  public:
  void clear_reverse_config();
  const ::b3console::ShifterMessage_ShifterPositionMessage& reverse_config() const;
  ::b3console::ShifterMessage_ShifterPositionMessage* release_reverse_config();
  ::b3console::ShifterMessage_ShifterPositionMessage* mutable_reverse_config();
  void set_allocated_reverse_config(::b3console::ShifterMessage_ShifterPositionMessage* reverse_config);
  private:
  const ::b3console::ShifterMessage_ShifterPositionMessage& _internal_reverse_config() const;
  ::b3console::ShifterMessage_ShifterPositionMessage* _internal_mutable_reverse_config();
  public:
  void unsafe_arena_set_allocated_reverse_config(
      ::b3console::ShifterMessage_ShifterPositionMessage* reverse_config);
  ::b3console::ShifterMessage_ShifterPositionMessage* unsafe_arena_release_reverse_config();

  // .b3console.ShifterMessage.ShifterPositionMessage neutral_config = 6;
  bool has_neutral_config() const;
  private:
  bool _internal_has_neutral_config() const;
  public:
  void clear_neutral_config();
  const ::b3console::ShifterMessage_ShifterPositionMessage& neutral_config() const;
  ::b3console::ShifterMessage_ShifterPositionMessage* release_neutral_config();
  ::b3console::ShifterMessage_ShifterPositionMessage* mutable_neutral_config();
  void set_allocated_neutral_config(::b3console::ShifterMessage_ShifterPositionMessage* neutral_config);
  private:
  const ::b3console::ShifterMessage_ShifterPositionMessage& _internal_neutral_config() const;
  ::b3console::ShifterMessage_ShifterPositionMessage* _internal_mutable_neutral_config();
  public:
  void unsafe_arena_set_allocated_neutral_config(
      ::b3console::ShifterMessage_ShifterPositionMessage* neutral_config);
  ::b3console::ShifterMessage_ShifterPositionMessage* unsafe_arena_release_neutral_config();

  // .b3console.ShifterMessage.ShifterPositionMessage drive_config = 7;
  bool has_drive_config() const;
  private:
  bool _internal_has_drive_config() const;
  public:
  void clear_drive_config();
  const ::b3console::ShifterMessage_ShifterPositionMessage& drive_config() const;
  ::b3console::ShifterMessage_ShifterPositionMessage* release_drive_config();
  ::b3console::ShifterMessage_ShifterPositionMessage* mutable_drive_config();
  void set_allocated_drive_config(::b3console::ShifterMessage_ShifterPositionMessage* drive_config);
  private:
  const ::b3console::ShifterMessage_ShifterPositionMessage& _internal_drive_config() const;
  ::b3console::ShifterMessage_ShifterPositionMessage* _internal_mutable_drive_config();
  public:
  void unsafe_arena_set_allocated_drive_config(
      ::b3console::ShifterMessage_ShifterPositionMessage* drive_config);
  ::b3console::ShifterMessage_ShifterPositionMessage* unsafe_arena_release_drive_config();

  // .b3console.ShifterMessage.ShifterPositionMessage manual_config = 8;
  bool has_manual_config() const;
  private:
  bool _internal_has_manual_config() const;
  public:
  void clear_manual_config();
  const ::b3console::ShifterMessage_ShifterPositionMessage& manual_config() const;
  ::b3console::ShifterMessage_ShifterPositionMessage* release_manual_config();
  ::b3console::ShifterMessage_ShifterPositionMessage* mutable_manual_config();
  void set_allocated_manual_config(::b3console::ShifterMessage_ShifterPositionMessage* manual_config);
  private:
  const ::b3console::ShifterMessage_ShifterPositionMessage& _internal_manual_config() const;
  ::b3console::ShifterMessage_ShifterPositionMessage* _internal_mutable_manual_config();
  public:
  void unsafe_arena_set_allocated_manual_config(
      ::b3console::ShifterMessage_ShifterPositionMessage* manual_config);
  ::b3console::ShifterMessage_ShifterPositionMessage* unsafe_arena_release_manual_config();

  // .b3console.ShifterMessage.ShifterPositionMessage up_config = 9;
  bool has_up_config() const;
  private:
  bool _internal_has_up_config() const;
  public:
  void clear_up_config();
  const ::b3console::ShifterMessage_ShifterPositionMessage& up_config() const;
  ::b3console::ShifterMessage_ShifterPositionMessage* release_up_config();
  ::b3console::ShifterMessage_ShifterPositionMessage* mutable_up_config();
  void set_allocated_up_config(::b3console::ShifterMessage_ShifterPositionMessage* up_config);
  private:
  const ::b3console::ShifterMessage_ShifterPositionMessage& _internal_up_config() const;
  ::b3console::ShifterMessage_ShifterPositionMessage* _internal_mutable_up_config();
  public:
  void unsafe_arena_set_allocated_up_config(
      ::b3console::ShifterMessage_ShifterPositionMessage* up_config);
  ::b3console::ShifterMessage_ShifterPositionMessage* unsafe_arena_release_up_config();

  // .b3console.ShifterMessage.ShifterPositionMessage down_config = 10;
  bool has_down_config() const;
  private:
  bool _internal_has_down_config() const;
  public:
  void clear_down_config();
  const ::b3console::ShifterMessage_ShifterPositionMessage& down_config() const;
  ::b3console::ShifterMessage_ShifterPositionMessage* release_down_config();
  ::b3console::ShifterMessage_ShifterPositionMessage* mutable_down_config();
  void set_allocated_down_config(::b3console::ShifterMessage_ShifterPositionMessage* down_config);
  private:
  const ::b3console::ShifterMessage_ShifterPositionMessage& _internal_down_config() const;
  ::b3console::ShifterMessage_ShifterPositionMessage* _internal_mutable_down_config();
  public:
  void unsafe_arena_set_allocated_down_config(
      ::b3console::ShifterMessage_ShifterPositionMessage* down_config);
  ::b3console::ShifterMessage_ShifterPositionMessage* unsafe_arena_release_down_config();

  // @@protoc_insertion_point(class_scope:b3console.ShifterMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::b3console::CanBusConfigMessage* can_bus_config_;
  ::b3console::ShifterMessage_IndicatorConfigMessage* indicator_config_;
  ::b3console::ShifterMessage_MelexisConfigMessage* melexis_config_;
  ::b3console::ShifterMessage_ShifterPositionMessage* park_config_;
  ::b3console::ShifterMessage_ShifterPositionMessage* reverse_config_;
  ::b3console::ShifterMessage_ShifterPositionMessage* neutral_config_;
  ::b3console::ShifterMessage_ShifterPositionMessage* drive_config_;
  ::b3console::ShifterMessage_ShifterPositionMessage* manual_config_;
  ::b3console::ShifterMessage_ShifterPositionMessage* up_config_;
  ::b3console::ShifterMessage_ShifterPositionMessage* down_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class TransMessage_Ems22AConfigMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:b3console.TransMessage.Ems22AConfigMessage) */ {
 public:
  inline TransMessage_Ems22AConfigMessage() : TransMessage_Ems22AConfigMessage(nullptr) {};
  virtual ~TransMessage_Ems22AConfigMessage();

  TransMessage_Ems22AConfigMessage(const TransMessage_Ems22AConfigMessage& from);
  TransMessage_Ems22AConfigMessage(TransMessage_Ems22AConfigMessage&& from) noexcept
    : TransMessage_Ems22AConfigMessage() {
    *this = ::std::move(from);
  }

  inline TransMessage_Ems22AConfigMessage& operator=(const TransMessage_Ems22AConfigMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMessage_Ems22AConfigMessage& operator=(TransMessage_Ems22AConfigMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMessage_Ems22AConfigMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMessage_Ems22AConfigMessage* internal_default_instance() {
    return reinterpret_cast<const TransMessage_Ems22AConfigMessage*>(
               &_TransMessage_Ems22AConfigMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TransMessage_Ems22AConfigMessage& a, TransMessage_Ems22AConfigMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TransMessage_Ems22AConfigMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransMessage_Ems22AConfigMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransMessage_Ems22AConfigMessage* New() const final {
    return CreateMaybeMessage<TransMessage_Ems22AConfigMessage>(nullptr);
  }

  TransMessage_Ems22AConfigMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMessage_Ems22AConfigMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMessage_Ems22AConfigMessage& from);
  void MergeFrom(const TransMessage_Ems22AConfigMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMessage_Ems22AConfigMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "b3console.TransMessage.Ems22AConfigMessage";
  }
  protected:
  explicit TransMessage_Ems22AConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessage_2eproto);
    return ::descriptor_table_config_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncMaxFieldNumber = 1,
    kEncMinFieldNumber = 2,
  };
  // int32 enc_max = 1;
  void clear_enc_max();
  ::PROTOBUF_NAMESPACE_ID::int32 enc_max() const;
  void set_enc_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enc_max() const;
  void _internal_set_enc_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enc_min = 2;
  void clear_enc_min();
  ::PROTOBUF_NAMESPACE_ID::int32 enc_min() const;
  void set_enc_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enc_min() const;
  void _internal_set_enc_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:b3console.TransMessage.Ems22AConfigMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 enc_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 enc_min_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class TransMessage_Vnh5019ConfigMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:b3console.TransMessage.Vnh5019ConfigMessage) */ {
 public:
  inline TransMessage_Vnh5019ConfigMessage() : TransMessage_Vnh5019ConfigMessage(nullptr) {};
  virtual ~TransMessage_Vnh5019ConfigMessage();

  TransMessage_Vnh5019ConfigMessage(const TransMessage_Vnh5019ConfigMessage& from);
  TransMessage_Vnh5019ConfigMessage(TransMessage_Vnh5019ConfigMessage&& from) noexcept
    : TransMessage_Vnh5019ConfigMessage() {
    *this = ::std::move(from);
  }

  inline TransMessage_Vnh5019ConfigMessage& operator=(const TransMessage_Vnh5019ConfigMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMessage_Vnh5019ConfigMessage& operator=(TransMessage_Vnh5019ConfigMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMessage_Vnh5019ConfigMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMessage_Vnh5019ConfigMessage* internal_default_instance() {
    return reinterpret_cast<const TransMessage_Vnh5019ConfigMessage*>(
               &_TransMessage_Vnh5019ConfigMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TransMessage_Vnh5019ConfigMessage& a, TransMessage_Vnh5019ConfigMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TransMessage_Vnh5019ConfigMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransMessage_Vnh5019ConfigMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransMessage_Vnh5019ConfigMessage* New() const final {
    return CreateMaybeMessage<TransMessage_Vnh5019ConfigMessage>(nullptr);
  }

  TransMessage_Vnh5019ConfigMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMessage_Vnh5019ConfigMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMessage_Vnh5019ConfigMessage& from);
  void MergeFrom(const TransMessage_Vnh5019ConfigMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMessage_Vnh5019ConfigMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "b3console.TransMessage.Vnh5019ConfigMessage";
  }
  protected:
  explicit TransMessage_Vnh5019ConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessage_2eproto);
    return ::descriptor_table_config_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxCurrentFieldNumber = 1,
  };
  // int32 max_current = 1;
  void clear_max_current();
  ::PROTOBUF_NAMESPACE_ID::int32 max_current() const;
  void set_max_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_current() const;
  void _internal_set_max_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:b3console.TransMessage.Vnh5019ConfigMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_current_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class TransMessage_PidConfigMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:b3console.TransMessage.PidConfigMessage) */ {
 public:
  inline TransMessage_PidConfigMessage() : TransMessage_PidConfigMessage(nullptr) {};
  virtual ~TransMessage_PidConfigMessage();

  TransMessage_PidConfigMessage(const TransMessage_PidConfigMessage& from);
  TransMessage_PidConfigMessage(TransMessage_PidConfigMessage&& from) noexcept
    : TransMessage_PidConfigMessage() {
    *this = ::std::move(from);
  }

  inline TransMessage_PidConfigMessage& operator=(const TransMessage_PidConfigMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMessage_PidConfigMessage& operator=(TransMessage_PidConfigMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMessage_PidConfigMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMessage_PidConfigMessage* internal_default_instance() {
    return reinterpret_cast<const TransMessage_PidConfigMessage*>(
               &_TransMessage_PidConfigMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TransMessage_PidConfigMessage& a, TransMessage_PidConfigMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TransMessage_PidConfigMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransMessage_PidConfigMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransMessage_PidConfigMessage* New() const final {
    return CreateMaybeMessage<TransMessage_PidConfigMessage>(nullptr);
  }

  TransMessage_PidConfigMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMessage_PidConfigMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMessage_PidConfigMessage& from);
  void MergeFrom(const TransMessage_PidConfigMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMessage_PidConfigMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "b3console.TransMessage.PidConfigMessage";
  }
  protected:
  explicit TransMessage_PidConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessage_2eproto);
    return ::descriptor_table_config_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAggKdFieldNumber = 1,
    kAggKiFieldNumber = 2,
    kAggKpFieldNumber = 3,
    kConsKdFieldNumber = 4,
    kConsKiFieldNumber = 5,
    kConsKpFieldNumber = 6,
  };
  // double agg_kd = 1;
  void clear_agg_kd();
  double agg_kd() const;
  void set_agg_kd(double value);
  private:
  double _internal_agg_kd() const;
  void _internal_set_agg_kd(double value);
  public:

  // double agg_ki = 2;
  void clear_agg_ki();
  double agg_ki() const;
  void set_agg_ki(double value);
  private:
  double _internal_agg_ki() const;
  void _internal_set_agg_ki(double value);
  public:

  // double agg_kp = 3;
  void clear_agg_kp();
  double agg_kp() const;
  void set_agg_kp(double value);
  private:
  double _internal_agg_kp() const;
  void _internal_set_agg_kp(double value);
  public:

  // double cons_kd = 4;
  void clear_cons_kd();
  double cons_kd() const;
  void set_cons_kd(double value);
  private:
  double _internal_cons_kd() const;
  void _internal_set_cons_kd(double value);
  public:

  // double cons_ki = 5;
  void clear_cons_ki();
  double cons_ki() const;
  void set_cons_ki(double value);
  private:
  double _internal_cons_ki() const;
  void _internal_set_cons_ki(double value);
  public:

  // double cons_kp = 6;
  void clear_cons_kp();
  double cons_kp() const;
  void set_cons_kp(double value);
  private:
  double _internal_cons_kp() const;
  void _internal_set_cons_kp(double value);
  public:

  // @@protoc_insertion_point(class_scope:b3console.TransMessage.PidConfigMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double agg_kd_;
  double agg_ki_;
  double agg_kp_;
  double cons_kd_;
  double cons_ki_;
  double cons_kp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class TransMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:b3console.TransMessage) */ {
 public:
  inline TransMessage() : TransMessage(nullptr) {};
  virtual ~TransMessage();

  TransMessage(const TransMessage& from);
  TransMessage(TransMessage&& from) noexcept
    : TransMessage() {
    *this = ::std::move(from);
  }

  inline TransMessage& operator=(const TransMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMessage& operator=(TransMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMessage* internal_default_instance() {
    return reinterpret_cast<const TransMessage*>(
               &_TransMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TransMessage& a, TransMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TransMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransMessage* New() const final {
    return CreateMaybeMessage<TransMessage>(nullptr);
  }

  TransMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMessage& from);
  void MergeFrom(const TransMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "b3console.TransMessage";
  }
  protected:
  explicit TransMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessage_2eproto);
    return ::descriptor_table_config_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TransMessage_Ems22AConfigMessage Ems22AConfigMessage;
  typedef TransMessage_Vnh5019ConfigMessage Vnh5019ConfigMessage;
  typedef TransMessage_PidConfigMessage PidConfigMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kCanBusConfigFieldNumber = 1,
    kEms22AConfigFieldNumber = 2,
    kVnh5019ConfigFieldNumber = 3,
    kPidConfigFieldNumber = 4,
  };
  // .b3console.CanBusConfigMessage can_bus_config = 1;
  bool has_can_bus_config() const;
  private:
  bool _internal_has_can_bus_config() const;
  public:
  void clear_can_bus_config();
  const ::b3console::CanBusConfigMessage& can_bus_config() const;
  ::b3console::CanBusConfigMessage* release_can_bus_config();
  ::b3console::CanBusConfigMessage* mutable_can_bus_config();
  void set_allocated_can_bus_config(::b3console::CanBusConfigMessage* can_bus_config);
  private:
  const ::b3console::CanBusConfigMessage& _internal_can_bus_config() const;
  ::b3console::CanBusConfigMessage* _internal_mutable_can_bus_config();
  public:
  void unsafe_arena_set_allocated_can_bus_config(
      ::b3console::CanBusConfigMessage* can_bus_config);
  ::b3console::CanBusConfigMessage* unsafe_arena_release_can_bus_config();

  // .b3console.TransMessage.Ems22AConfigMessage ems22a_config = 2;
  bool has_ems22a_config() const;
  private:
  bool _internal_has_ems22a_config() const;
  public:
  void clear_ems22a_config();
  const ::b3console::TransMessage_Ems22AConfigMessage& ems22a_config() const;
  ::b3console::TransMessage_Ems22AConfigMessage* release_ems22a_config();
  ::b3console::TransMessage_Ems22AConfigMessage* mutable_ems22a_config();
  void set_allocated_ems22a_config(::b3console::TransMessage_Ems22AConfigMessage* ems22a_config);
  private:
  const ::b3console::TransMessage_Ems22AConfigMessage& _internal_ems22a_config() const;
  ::b3console::TransMessage_Ems22AConfigMessage* _internal_mutable_ems22a_config();
  public:
  void unsafe_arena_set_allocated_ems22a_config(
      ::b3console::TransMessage_Ems22AConfigMessage* ems22a_config);
  ::b3console::TransMessage_Ems22AConfigMessage* unsafe_arena_release_ems22a_config();

  // .b3console.TransMessage.Vnh5019ConfigMessage vnh5019_config = 3;
  bool has_vnh5019_config() const;
  private:
  bool _internal_has_vnh5019_config() const;
  public:
  void clear_vnh5019_config();
  const ::b3console::TransMessage_Vnh5019ConfigMessage& vnh5019_config() const;
  ::b3console::TransMessage_Vnh5019ConfigMessage* release_vnh5019_config();
  ::b3console::TransMessage_Vnh5019ConfigMessage* mutable_vnh5019_config();
  void set_allocated_vnh5019_config(::b3console::TransMessage_Vnh5019ConfigMessage* vnh5019_config);
  private:
  const ::b3console::TransMessage_Vnh5019ConfigMessage& _internal_vnh5019_config() const;
  ::b3console::TransMessage_Vnh5019ConfigMessage* _internal_mutable_vnh5019_config();
  public:
  void unsafe_arena_set_allocated_vnh5019_config(
      ::b3console::TransMessage_Vnh5019ConfigMessage* vnh5019_config);
  ::b3console::TransMessage_Vnh5019ConfigMessage* unsafe_arena_release_vnh5019_config();

  // .b3console.TransMessage.PidConfigMessage pid_config = 4;
  bool has_pid_config() const;
  private:
  bool _internal_has_pid_config() const;
  public:
  void clear_pid_config();
  const ::b3console::TransMessage_PidConfigMessage& pid_config() const;
  ::b3console::TransMessage_PidConfigMessage* release_pid_config();
  ::b3console::TransMessage_PidConfigMessage* mutable_pid_config();
  void set_allocated_pid_config(::b3console::TransMessage_PidConfigMessage* pid_config);
  private:
  const ::b3console::TransMessage_PidConfigMessage& _internal_pid_config() const;
  ::b3console::TransMessage_PidConfigMessage* _internal_mutable_pid_config();
  public:
  void unsafe_arena_set_allocated_pid_config(
      ::b3console::TransMessage_PidConfigMessage* pid_config);
  ::b3console::TransMessage_PidConfigMessage* unsafe_arena_release_pid_config();

  // @@protoc_insertion_point(class_scope:b3console.TransMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::b3console::CanBusConfigMessage* can_bus_config_;
  ::b3console::TransMessage_Ems22AConfigMessage* ems22a_config_;
  ::b3console::TransMessage_Vnh5019ConfigMessage* vnh5019_config_;
  ::b3console::TransMessage_PidConfigMessage* pid_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigBaseMessage

// .b3console.Type type = 1;
inline void ConfigBaseMessage::clear_type() {
  type_ = 0;
}
inline ::b3console::Type ConfigBaseMessage::_internal_type() const {
  return static_cast< ::b3console::Type >(type_);
}
inline ::b3console::Type ConfigBaseMessage::type() const {
  // @@protoc_insertion_point(field_get:b3console.ConfigBaseMessage.type)
  return _internal_type();
}
inline void ConfigBaseMessage::_internal_set_type(::b3console::Type value) {
  
  type_ = value;
}
inline void ConfigBaseMessage::set_type(::b3console::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:b3console.ConfigBaseMessage.type)
}

// .b3console.DoorMessage door = 2;
inline bool ConfigBaseMessage::_internal_has_door() const {
  return this != internal_default_instance() && door_ != nullptr;
}
inline bool ConfigBaseMessage::has_door() const {
  return _internal_has_door();
}
inline void ConfigBaseMessage::clear_door() {
  if (GetArena() == nullptr && door_ != nullptr) {
    delete door_;
  }
  door_ = nullptr;
}
inline const ::b3console::DoorMessage& ConfigBaseMessage::_internal_door() const {
  const ::b3console::DoorMessage* p = door_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::DoorMessage*>(
      &::b3console::_DoorMessage_default_instance_);
}
inline const ::b3console::DoorMessage& ConfigBaseMessage::door() const {
  // @@protoc_insertion_point(field_get:b3console.ConfigBaseMessage.door)
  return _internal_door();
}
inline void ConfigBaseMessage::unsafe_arena_set_allocated_door(
    ::b3console::DoorMessage* door) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(door_);
  }
  door_ = door;
  if (door) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.ConfigBaseMessage.door)
}
inline ::b3console::DoorMessage* ConfigBaseMessage::release_door() {
  auto temp = unsafe_arena_release_door();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::DoorMessage* ConfigBaseMessage::unsafe_arena_release_door() {
  // @@protoc_insertion_point(field_release:b3console.ConfigBaseMessage.door)
  
  ::b3console::DoorMessage* temp = door_;
  door_ = nullptr;
  return temp;
}
inline ::b3console::DoorMessage* ConfigBaseMessage::_internal_mutable_door() {
  
  if (door_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::DoorMessage>(GetArena());
    door_ = p;
  }
  return door_;
}
inline ::b3console::DoorMessage* ConfigBaseMessage::mutable_door() {
  // @@protoc_insertion_point(field_mutable:b3console.ConfigBaseMessage.door)
  return _internal_mutable_door();
}
inline void ConfigBaseMessage::set_allocated_door(::b3console::DoorMessage* door) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete door_;
  }
  if (door) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(door);
    if (message_arena != submessage_arena) {
      door = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, door, submessage_arena);
    }
    
  } else {
    
  }
  door_ = door;
  // @@protoc_insertion_point(field_set_allocated:b3console.ConfigBaseMessage.door)
}

// .b3console.ShifterMessage shifter = 3;
inline bool ConfigBaseMessage::_internal_has_shifter() const {
  return this != internal_default_instance() && shifter_ != nullptr;
}
inline bool ConfigBaseMessage::has_shifter() const {
  return _internal_has_shifter();
}
inline void ConfigBaseMessage::clear_shifter() {
  if (GetArena() == nullptr && shifter_ != nullptr) {
    delete shifter_;
  }
  shifter_ = nullptr;
}
inline const ::b3console::ShifterMessage& ConfigBaseMessage::_internal_shifter() const {
  const ::b3console::ShifterMessage* p = shifter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::ShifterMessage*>(
      &::b3console::_ShifterMessage_default_instance_);
}
inline const ::b3console::ShifterMessage& ConfigBaseMessage::shifter() const {
  // @@protoc_insertion_point(field_get:b3console.ConfigBaseMessage.shifter)
  return _internal_shifter();
}
inline void ConfigBaseMessage::unsafe_arena_set_allocated_shifter(
    ::b3console::ShifterMessage* shifter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shifter_);
  }
  shifter_ = shifter;
  if (shifter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.ConfigBaseMessage.shifter)
}
inline ::b3console::ShifterMessage* ConfigBaseMessage::release_shifter() {
  auto temp = unsafe_arena_release_shifter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::ShifterMessage* ConfigBaseMessage::unsafe_arena_release_shifter() {
  // @@protoc_insertion_point(field_release:b3console.ConfigBaseMessage.shifter)
  
  ::b3console::ShifterMessage* temp = shifter_;
  shifter_ = nullptr;
  return temp;
}
inline ::b3console::ShifterMessage* ConfigBaseMessage::_internal_mutable_shifter() {
  
  if (shifter_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::ShifterMessage>(GetArena());
    shifter_ = p;
  }
  return shifter_;
}
inline ::b3console::ShifterMessage* ConfigBaseMessage::mutable_shifter() {
  // @@protoc_insertion_point(field_mutable:b3console.ConfigBaseMessage.shifter)
  return _internal_mutable_shifter();
}
inline void ConfigBaseMessage::set_allocated_shifter(::b3console::ShifterMessage* shifter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shifter_;
  }
  if (shifter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shifter);
    if (message_arena != submessage_arena) {
      shifter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shifter, submessage_arena);
    }
    
  } else {
    
  }
  shifter_ = shifter;
  // @@protoc_insertion_point(field_set_allocated:b3console.ConfigBaseMessage.shifter)
}

// .b3console.TransMessage trans = 4;
inline bool ConfigBaseMessage::_internal_has_trans() const {
  return this != internal_default_instance() && trans_ != nullptr;
}
inline bool ConfigBaseMessage::has_trans() const {
  return _internal_has_trans();
}
inline void ConfigBaseMessage::clear_trans() {
  if (GetArena() == nullptr && trans_ != nullptr) {
    delete trans_;
  }
  trans_ = nullptr;
}
inline const ::b3console::TransMessage& ConfigBaseMessage::_internal_trans() const {
  const ::b3console::TransMessage* p = trans_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::TransMessage*>(
      &::b3console::_TransMessage_default_instance_);
}
inline const ::b3console::TransMessage& ConfigBaseMessage::trans() const {
  // @@protoc_insertion_point(field_get:b3console.ConfigBaseMessage.trans)
  return _internal_trans();
}
inline void ConfigBaseMessage::unsafe_arena_set_allocated_trans(
    ::b3console::TransMessage* trans) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trans_);
  }
  trans_ = trans;
  if (trans) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.ConfigBaseMessage.trans)
}
inline ::b3console::TransMessage* ConfigBaseMessage::release_trans() {
  auto temp = unsafe_arena_release_trans();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::TransMessage* ConfigBaseMessage::unsafe_arena_release_trans() {
  // @@protoc_insertion_point(field_release:b3console.ConfigBaseMessage.trans)
  
  ::b3console::TransMessage* temp = trans_;
  trans_ = nullptr;
  return temp;
}
inline ::b3console::TransMessage* ConfigBaseMessage::_internal_mutable_trans() {
  
  if (trans_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::TransMessage>(GetArena());
    trans_ = p;
  }
  return trans_;
}
inline ::b3console::TransMessage* ConfigBaseMessage::mutable_trans() {
  // @@protoc_insertion_point(field_mutable:b3console.ConfigBaseMessage.trans)
  return _internal_mutable_trans();
}
inline void ConfigBaseMessage::set_allocated_trans(::b3console::TransMessage* trans) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trans_;
  }
  if (trans) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trans);
    if (message_arena != submessage_arena) {
      trans = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trans, submessage_arena);
    }
    
  } else {
    
  }
  trans_ = trans;
  // @@protoc_insertion_point(field_set_allocated:b3console.ConfigBaseMessage.trans)
}

// -------------------------------------------------------------------

// DoorMessage_MirrorActionConfigMessage

// int32 down_max = 1;
inline void DoorMessage_MirrorActionConfigMessage::clear_down_max() {
  down_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::_internal_down_max() const {
  return down_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::down_max() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.MirrorActionConfigMessage.down_max)
  return _internal_down_max();
}
inline void DoorMessage_MirrorActionConfigMessage::_internal_set_down_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  down_max_ = value;
}
inline void DoorMessage_MirrorActionConfigMessage::set_down_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_down_max(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.MirrorActionConfigMessage.down_max)
}

// int32 down_min = 2;
inline void DoorMessage_MirrorActionConfigMessage::clear_down_min() {
  down_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::_internal_down_min() const {
  return down_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::down_min() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.MirrorActionConfigMessage.down_min)
  return _internal_down_min();
}
inline void DoorMessage_MirrorActionConfigMessage::_internal_set_down_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  down_min_ = value;
}
inline void DoorMessage_MirrorActionConfigMessage::set_down_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_down_min(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.MirrorActionConfigMessage.down_min)
}

// int32 left_max = 3;
inline void DoorMessage_MirrorActionConfigMessage::clear_left_max() {
  left_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::_internal_left_max() const {
  return left_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::left_max() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.MirrorActionConfigMessage.left_max)
  return _internal_left_max();
}
inline void DoorMessage_MirrorActionConfigMessage::_internal_set_left_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  left_max_ = value;
}
inline void DoorMessage_MirrorActionConfigMessage::set_left_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left_max(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.MirrorActionConfigMessage.left_max)
}

// int32 left_min = 4;
inline void DoorMessage_MirrorActionConfigMessage::clear_left_min() {
  left_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::_internal_left_min() const {
  return left_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::left_min() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.MirrorActionConfigMessage.left_min)
  return _internal_left_min();
}
inline void DoorMessage_MirrorActionConfigMessage::_internal_set_left_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  left_min_ = value;
}
inline void DoorMessage_MirrorActionConfigMessage::set_left_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left_min(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.MirrorActionConfigMessage.left_min)
}

// int32 right_max = 5;
inline void DoorMessage_MirrorActionConfigMessage::clear_right_max() {
  right_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::_internal_right_max() const {
  return right_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::right_max() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.MirrorActionConfigMessage.right_max)
  return _internal_right_max();
}
inline void DoorMessage_MirrorActionConfigMessage::_internal_set_right_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  right_max_ = value;
}
inline void DoorMessage_MirrorActionConfigMessage::set_right_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right_max(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.MirrorActionConfigMessage.right_max)
}

// int32 right_min = 6;
inline void DoorMessage_MirrorActionConfigMessage::clear_right_min() {
  right_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::_internal_right_min() const {
  return right_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::right_min() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.MirrorActionConfigMessage.right_min)
  return _internal_right_min();
}
inline void DoorMessage_MirrorActionConfigMessage::_internal_set_right_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  right_min_ = value;
}
inline void DoorMessage_MirrorActionConfigMessage::set_right_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right_min(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.MirrorActionConfigMessage.right_min)
}

// int32 up_max = 7;
inline void DoorMessage_MirrorActionConfigMessage::clear_up_max() {
  up_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::_internal_up_max() const {
  return up_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::up_max() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.MirrorActionConfigMessage.up_max)
  return _internal_up_max();
}
inline void DoorMessage_MirrorActionConfigMessage::_internal_set_up_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  up_max_ = value;
}
inline void DoorMessage_MirrorActionConfigMessage::set_up_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_up_max(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.MirrorActionConfigMessage.up_max)
}

// int32 up_min = 8;
inline void DoorMessage_MirrorActionConfigMessage::clear_up_min() {
  up_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::_internal_up_min() const {
  return up_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorActionConfigMessage::up_min() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.MirrorActionConfigMessage.up_min)
  return _internal_up_min();
}
inline void DoorMessage_MirrorActionConfigMessage::_internal_set_up_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  up_min_ = value;
}
inline void DoorMessage_MirrorActionConfigMessage::set_up_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_up_min(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.MirrorActionConfigMessage.up_min)
}

// -------------------------------------------------------------------

// DoorMessage_MirrorSelectConfigMessage

// int32 driver_max = 1;
inline void DoorMessage_MirrorSelectConfigMessage::clear_driver_max() {
  driver_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorSelectConfigMessage::_internal_driver_max() const {
  return driver_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorSelectConfigMessage::driver_max() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.MirrorSelectConfigMessage.driver_max)
  return _internal_driver_max();
}
inline void DoorMessage_MirrorSelectConfigMessage::_internal_set_driver_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  driver_max_ = value;
}
inline void DoorMessage_MirrorSelectConfigMessage::set_driver_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_driver_max(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.MirrorSelectConfigMessage.driver_max)
}

// int32 driver_min = 2;
inline void DoorMessage_MirrorSelectConfigMessage::clear_driver_min() {
  driver_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorSelectConfigMessage::_internal_driver_min() const {
  return driver_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorSelectConfigMessage::driver_min() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.MirrorSelectConfigMessage.driver_min)
  return _internal_driver_min();
}
inline void DoorMessage_MirrorSelectConfigMessage::_internal_set_driver_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  driver_min_ = value;
}
inline void DoorMessage_MirrorSelectConfigMessage::set_driver_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_driver_min(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.MirrorSelectConfigMessage.driver_min)
}

// int32 fold_max = 3;
inline void DoorMessage_MirrorSelectConfigMessage::clear_fold_max() {
  fold_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorSelectConfigMessage::_internal_fold_max() const {
  return fold_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorSelectConfigMessage::fold_max() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.MirrorSelectConfigMessage.fold_max)
  return _internal_fold_max();
}
inline void DoorMessage_MirrorSelectConfigMessage::_internal_set_fold_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fold_max_ = value;
}
inline void DoorMessage_MirrorSelectConfigMessage::set_fold_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fold_max(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.MirrorSelectConfigMessage.fold_max)
}

// int32 fold_min = 4;
inline void DoorMessage_MirrorSelectConfigMessage::clear_fold_min() {
  fold_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorSelectConfigMessage::_internal_fold_min() const {
  return fold_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorSelectConfigMessage::fold_min() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.MirrorSelectConfigMessage.fold_min)
  return _internal_fold_min();
}
inline void DoorMessage_MirrorSelectConfigMessage::_internal_set_fold_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fold_min_ = value;
}
inline void DoorMessage_MirrorSelectConfigMessage::set_fold_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fold_min(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.MirrorSelectConfigMessage.fold_min)
}

// int32 passenger_max = 5;
inline void DoorMessage_MirrorSelectConfigMessage::clear_passenger_max() {
  passenger_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorSelectConfigMessage::_internal_passenger_max() const {
  return passenger_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorSelectConfigMessage::passenger_max() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.MirrorSelectConfigMessage.passenger_max)
  return _internal_passenger_max();
}
inline void DoorMessage_MirrorSelectConfigMessage::_internal_set_passenger_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  passenger_max_ = value;
}
inline void DoorMessage_MirrorSelectConfigMessage::set_passenger_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_passenger_max(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.MirrorSelectConfigMessage.passenger_max)
}

// int32 passenger_min = 6;
inline void DoorMessage_MirrorSelectConfigMessage::clear_passenger_min() {
  passenger_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorSelectConfigMessage::_internal_passenger_min() const {
  return passenger_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_MirrorSelectConfigMessage::passenger_min() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.MirrorSelectConfigMessage.passenger_min)
  return _internal_passenger_min();
}
inline void DoorMessage_MirrorSelectConfigMessage::_internal_set_passenger_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  passenger_min_ = value;
}
inline void DoorMessage_MirrorSelectConfigMessage::set_passenger_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_passenger_min(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.MirrorSelectConfigMessage.passenger_min)
}

// -------------------------------------------------------------------

// DoorMessage_WindowActionConfigMessage

// int32 auto_down_max = 1;
inline void DoorMessage_WindowActionConfigMessage::clear_auto_down_max() {
  auto_down_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::_internal_auto_down_max() const {
  return auto_down_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::auto_down_max() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.WindowActionConfigMessage.auto_down_max)
  return _internal_auto_down_max();
}
inline void DoorMessage_WindowActionConfigMessage::_internal_set_auto_down_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  auto_down_max_ = value;
}
inline void DoorMessage_WindowActionConfigMessage::set_auto_down_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_auto_down_max(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.WindowActionConfigMessage.auto_down_max)
}

// int32 auto_down_min = 2;
inline void DoorMessage_WindowActionConfigMessage::clear_auto_down_min() {
  auto_down_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::_internal_auto_down_min() const {
  return auto_down_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::auto_down_min() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.WindowActionConfigMessage.auto_down_min)
  return _internal_auto_down_min();
}
inline void DoorMessage_WindowActionConfigMessage::_internal_set_auto_down_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  auto_down_min_ = value;
}
inline void DoorMessage_WindowActionConfigMessage::set_auto_down_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_auto_down_min(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.WindowActionConfigMessage.auto_down_min)
}

// int32 auto_up_max = 3;
inline void DoorMessage_WindowActionConfigMessage::clear_auto_up_max() {
  auto_up_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::_internal_auto_up_max() const {
  return auto_up_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::auto_up_max() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.WindowActionConfigMessage.auto_up_max)
  return _internal_auto_up_max();
}
inline void DoorMessage_WindowActionConfigMessage::_internal_set_auto_up_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  auto_up_max_ = value;
}
inline void DoorMessage_WindowActionConfigMessage::set_auto_up_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_auto_up_max(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.WindowActionConfigMessage.auto_up_max)
}

// int32 auto_up_min = 4;
inline void DoorMessage_WindowActionConfigMessage::clear_auto_up_min() {
  auto_up_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::_internal_auto_up_min() const {
  return auto_up_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::auto_up_min() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.WindowActionConfigMessage.auto_up_min)
  return _internal_auto_up_min();
}
inline void DoorMessage_WindowActionConfigMessage::_internal_set_auto_up_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  auto_up_min_ = value;
}
inline void DoorMessage_WindowActionConfigMessage::set_auto_up_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_auto_up_min(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.WindowActionConfigMessage.auto_up_min)
}

// int32 down_max = 5;
inline void DoorMessage_WindowActionConfigMessage::clear_down_max() {
  down_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::_internal_down_max() const {
  return down_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::down_max() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.WindowActionConfigMessage.down_max)
  return _internal_down_max();
}
inline void DoorMessage_WindowActionConfigMessage::_internal_set_down_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  down_max_ = value;
}
inline void DoorMessage_WindowActionConfigMessage::set_down_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_down_max(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.WindowActionConfigMessage.down_max)
}

// int32 down_min = 6;
inline void DoorMessage_WindowActionConfigMessage::clear_down_min() {
  down_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::_internal_down_min() const {
  return down_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::down_min() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.WindowActionConfigMessage.down_min)
  return _internal_down_min();
}
inline void DoorMessage_WindowActionConfigMessage::_internal_set_down_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  down_min_ = value;
}
inline void DoorMessage_WindowActionConfigMessage::set_down_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_down_min(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.WindowActionConfigMessage.down_min)
}

// int32 up_max = 7;
inline void DoorMessage_WindowActionConfigMessage::clear_up_max() {
  up_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::_internal_up_max() const {
  return up_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::up_max() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.WindowActionConfigMessage.up_max)
  return _internal_up_max();
}
inline void DoorMessage_WindowActionConfigMessage::_internal_set_up_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  up_max_ = value;
}
inline void DoorMessage_WindowActionConfigMessage::set_up_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_up_max(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.WindowActionConfigMessage.up_max)
}

// int32 up_min = 8;
inline void DoorMessage_WindowActionConfigMessage::clear_up_min() {
  up_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::_internal_up_min() const {
  return up_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage_WindowActionConfigMessage::up_min() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.WindowActionConfigMessage.up_min)
  return _internal_up_min();
}
inline void DoorMessage_WindowActionConfigMessage::_internal_set_up_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  up_min_ = value;
}
inline void DoorMessage_WindowActionConfigMessage::set_up_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_up_min(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.WindowActionConfigMessage.up_min)
}

// -------------------------------------------------------------------

// DoorMessage

// .b3console.DoorMessage.MirrorActionConfigMessage mirror_action = 1;
inline bool DoorMessage::_internal_has_mirror_action() const {
  return this != internal_default_instance() && mirror_action_ != nullptr;
}
inline bool DoorMessage::has_mirror_action() const {
  return _internal_has_mirror_action();
}
inline void DoorMessage::clear_mirror_action() {
  if (GetArena() == nullptr && mirror_action_ != nullptr) {
    delete mirror_action_;
  }
  mirror_action_ = nullptr;
}
inline const ::b3console::DoorMessage_MirrorActionConfigMessage& DoorMessage::_internal_mirror_action() const {
  const ::b3console::DoorMessage_MirrorActionConfigMessage* p = mirror_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::DoorMessage_MirrorActionConfigMessage*>(
      &::b3console::_DoorMessage_MirrorActionConfigMessage_default_instance_);
}
inline const ::b3console::DoorMessage_MirrorActionConfigMessage& DoorMessage::mirror_action() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.mirror_action)
  return _internal_mirror_action();
}
inline void DoorMessage::unsafe_arena_set_allocated_mirror_action(
    ::b3console::DoorMessage_MirrorActionConfigMessage* mirror_action) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mirror_action_);
  }
  mirror_action_ = mirror_action;
  if (mirror_action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.DoorMessage.mirror_action)
}
inline ::b3console::DoorMessage_MirrorActionConfigMessage* DoorMessage::release_mirror_action() {
  auto temp = unsafe_arena_release_mirror_action();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::DoorMessage_MirrorActionConfigMessage* DoorMessage::unsafe_arena_release_mirror_action() {
  // @@protoc_insertion_point(field_release:b3console.DoorMessage.mirror_action)
  
  ::b3console::DoorMessage_MirrorActionConfigMessage* temp = mirror_action_;
  mirror_action_ = nullptr;
  return temp;
}
inline ::b3console::DoorMessage_MirrorActionConfigMessage* DoorMessage::_internal_mutable_mirror_action() {
  
  if (mirror_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::DoorMessage_MirrorActionConfigMessage>(GetArena());
    mirror_action_ = p;
  }
  return mirror_action_;
}
inline ::b3console::DoorMessage_MirrorActionConfigMessage* DoorMessage::mutable_mirror_action() {
  // @@protoc_insertion_point(field_mutable:b3console.DoorMessage.mirror_action)
  return _internal_mutable_mirror_action();
}
inline void DoorMessage::set_allocated_mirror_action(::b3console::DoorMessage_MirrorActionConfigMessage* mirror_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mirror_action_;
  }
  if (mirror_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mirror_action);
    if (message_arena != submessage_arena) {
      mirror_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mirror_action, submessage_arena);
    }
    
  } else {
    
  }
  mirror_action_ = mirror_action;
  // @@protoc_insertion_point(field_set_allocated:b3console.DoorMessage.mirror_action)
}

// .b3console.DoorMessage.MirrorSelectConfigMessage mirror_select = 2;
inline bool DoorMessage::_internal_has_mirror_select() const {
  return this != internal_default_instance() && mirror_select_ != nullptr;
}
inline bool DoorMessage::has_mirror_select() const {
  return _internal_has_mirror_select();
}
inline void DoorMessage::clear_mirror_select() {
  if (GetArena() == nullptr && mirror_select_ != nullptr) {
    delete mirror_select_;
  }
  mirror_select_ = nullptr;
}
inline const ::b3console::DoorMessage_MirrorSelectConfigMessage& DoorMessage::_internal_mirror_select() const {
  const ::b3console::DoorMessage_MirrorSelectConfigMessage* p = mirror_select_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::DoorMessage_MirrorSelectConfigMessage*>(
      &::b3console::_DoorMessage_MirrorSelectConfigMessage_default_instance_);
}
inline const ::b3console::DoorMessage_MirrorSelectConfigMessage& DoorMessage::mirror_select() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.mirror_select)
  return _internal_mirror_select();
}
inline void DoorMessage::unsafe_arena_set_allocated_mirror_select(
    ::b3console::DoorMessage_MirrorSelectConfigMessage* mirror_select) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mirror_select_);
  }
  mirror_select_ = mirror_select;
  if (mirror_select) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.DoorMessage.mirror_select)
}
inline ::b3console::DoorMessage_MirrorSelectConfigMessage* DoorMessage::release_mirror_select() {
  auto temp = unsafe_arena_release_mirror_select();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::DoorMessage_MirrorSelectConfigMessage* DoorMessage::unsafe_arena_release_mirror_select() {
  // @@protoc_insertion_point(field_release:b3console.DoorMessage.mirror_select)
  
  ::b3console::DoorMessage_MirrorSelectConfigMessage* temp = mirror_select_;
  mirror_select_ = nullptr;
  return temp;
}
inline ::b3console::DoorMessage_MirrorSelectConfigMessage* DoorMessage::_internal_mutable_mirror_select() {
  
  if (mirror_select_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::DoorMessage_MirrorSelectConfigMessage>(GetArena());
    mirror_select_ = p;
  }
  return mirror_select_;
}
inline ::b3console::DoorMessage_MirrorSelectConfigMessage* DoorMessage::mutable_mirror_select() {
  // @@protoc_insertion_point(field_mutable:b3console.DoorMessage.mirror_select)
  return _internal_mutable_mirror_select();
}
inline void DoorMessage::set_allocated_mirror_select(::b3console::DoorMessage_MirrorSelectConfigMessage* mirror_select) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mirror_select_;
  }
  if (mirror_select) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mirror_select);
    if (message_arena != submessage_arena) {
      mirror_select = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mirror_select, submessage_arena);
    }
    
  } else {
    
  }
  mirror_select_ = mirror_select;
  // @@protoc_insertion_point(field_set_allocated:b3console.DoorMessage.mirror_select)
}

// .b3console.DoorMessage.WindowActionConfigMessage window_action = 3;
inline bool DoorMessage::_internal_has_window_action() const {
  return this != internal_default_instance() && window_action_ != nullptr;
}
inline bool DoorMessage::has_window_action() const {
  return _internal_has_window_action();
}
inline void DoorMessage::clear_window_action() {
  if (GetArena() == nullptr && window_action_ != nullptr) {
    delete window_action_;
  }
  window_action_ = nullptr;
}
inline const ::b3console::DoorMessage_WindowActionConfigMessage& DoorMessage::_internal_window_action() const {
  const ::b3console::DoorMessage_WindowActionConfigMessage* p = window_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::DoorMessage_WindowActionConfigMessage*>(
      &::b3console::_DoorMessage_WindowActionConfigMessage_default_instance_);
}
inline const ::b3console::DoorMessage_WindowActionConfigMessage& DoorMessage::window_action() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.window_action)
  return _internal_window_action();
}
inline void DoorMessage::unsafe_arena_set_allocated_window_action(
    ::b3console::DoorMessage_WindowActionConfigMessage* window_action) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_action_);
  }
  window_action_ = window_action;
  if (window_action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.DoorMessage.window_action)
}
inline ::b3console::DoorMessage_WindowActionConfigMessage* DoorMessage::release_window_action() {
  auto temp = unsafe_arena_release_window_action();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::DoorMessage_WindowActionConfigMessage* DoorMessage::unsafe_arena_release_window_action() {
  // @@protoc_insertion_point(field_release:b3console.DoorMessage.window_action)
  
  ::b3console::DoorMessage_WindowActionConfigMessage* temp = window_action_;
  window_action_ = nullptr;
  return temp;
}
inline ::b3console::DoorMessage_WindowActionConfigMessage* DoorMessage::_internal_mutable_window_action() {
  
  if (window_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::DoorMessage_WindowActionConfigMessage>(GetArena());
    window_action_ = p;
  }
  return window_action_;
}
inline ::b3console::DoorMessage_WindowActionConfigMessage* DoorMessage::mutable_window_action() {
  // @@protoc_insertion_point(field_mutable:b3console.DoorMessage.window_action)
  return _internal_mutable_window_action();
}
inline void DoorMessage::set_allocated_window_action(::b3console::DoorMessage_WindowActionConfigMessage* window_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete window_action_;
  }
  if (window_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(window_action);
    if (message_arena != submessage_arena) {
      window_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_action, submessage_arena);
    }
    
  } else {
    
  }
  window_action_ = window_action;
  // @@protoc_insertion_point(field_set_allocated:b3console.DoorMessage.window_action)
}

// int32 driver_window_max_current = 4;
inline void DoorMessage::clear_driver_window_max_current() {
  driver_window_max_current_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage::_internal_driver_window_max_current() const {
  return driver_window_max_current_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage::driver_window_max_current() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.driver_window_max_current)
  return _internal_driver_window_max_current();
}
inline void DoorMessage::_internal_set_driver_window_max_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  driver_window_max_current_ = value;
}
inline void DoorMessage::set_driver_window_max_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_driver_window_max_current(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.driver_window_max_current)
}

// int32 passenger_window_max_current = 5;
inline void DoorMessage::clear_passenger_window_max_current() {
  passenger_window_max_current_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage::_internal_passenger_window_max_current() const {
  return passenger_window_max_current_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoorMessage::passenger_window_max_current() const {
  // @@protoc_insertion_point(field_get:b3console.DoorMessage.passenger_window_max_current)
  return _internal_passenger_window_max_current();
}
inline void DoorMessage::_internal_set_passenger_window_max_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  passenger_window_max_current_ = value;
}
inline void DoorMessage::set_passenger_window_max_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_passenger_window_max_current(value);
  // @@protoc_insertion_point(field_set:b3console.DoorMessage.passenger_window_max_current)
}

// -------------------------------------------------------------------

// CanBusConfigMessage

// int32 addr_tx = 1;
inline void CanBusConfigMessage::clear_addr_tx() {
  addr_tx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::_internal_addr_tx() const {
  return addr_tx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::addr_tx() const {
  // @@protoc_insertion_point(field_get:b3console.CanBusConfigMessage.addr_tx)
  return _internal_addr_tx();
}
inline void CanBusConfigMessage::_internal_set_addr_tx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addr_tx_ = value;
}
inline void CanBusConfigMessage::set_addr_tx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_addr_tx(value);
  // @@protoc_insertion_point(field_set:b3console.CanBusConfigMessage.addr_tx)
}

// int32 boot_rx = 2;
inline void CanBusConfigMessage::clear_boot_rx() {
  boot_rx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::_internal_boot_rx() const {
  return boot_rx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::boot_rx() const {
  // @@protoc_insertion_point(field_get:b3console.CanBusConfigMessage.boot_rx)
  return _internal_boot_rx();
}
inline void CanBusConfigMessage::_internal_set_boot_rx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boot_rx_ = value;
}
inline void CanBusConfigMessage::set_boot_rx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boot_rx(value);
  // @@protoc_insertion_point(field_set:b3console.CanBusConfigMessage.boot_rx)
}

// int32 boot_tx = 3;
inline void CanBusConfigMessage::clear_boot_tx() {
  boot_tx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::_internal_boot_tx() const {
  return boot_tx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::boot_tx() const {
  // @@protoc_insertion_point(field_get:b3console.CanBusConfigMessage.boot_tx)
  return _internal_boot_tx();
}
inline void CanBusConfigMessage::_internal_set_boot_tx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boot_tx_ = value;
}
inline void CanBusConfigMessage::set_boot_tx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boot_tx(value);
  // @@protoc_insertion_point(field_set:b3console.CanBusConfigMessage.boot_tx)
}

// int32 intvl_tx = 4;
inline void CanBusConfigMessage::clear_intvl_tx() {
  intvl_tx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::_internal_intvl_tx() const {
  return intvl_tx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::intvl_tx() const {
  // @@protoc_insertion_point(field_get:b3console.CanBusConfigMessage.intvl_tx)
  return _internal_intvl_tx();
}
inline void CanBusConfigMessage::_internal_set_intvl_tx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  intvl_tx_ = value;
}
inline void CanBusConfigMessage::set_intvl_tx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_intvl_tx(value);
  // @@protoc_insertion_point(field_set:b3console.CanBusConfigMessage.intvl_tx)
}

// int32 mask0 = 5;
inline void CanBusConfigMessage::clear_mask0() {
  mask0_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::_internal_mask0() const {
  return mask0_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::mask0() const {
  // @@protoc_insertion_point(field_get:b3console.CanBusConfigMessage.mask0)
  return _internal_mask0();
}
inline void CanBusConfigMessage::_internal_set_mask0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mask0_ = value;
}
inline void CanBusConfigMessage::set_mask0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mask0(value);
  // @@protoc_insertion_point(field_set:b3console.CanBusConfigMessage.mask0)
}

// int32 filter0_0 = 6;
inline void CanBusConfigMessage::clear_filter0_0() {
  filter0_0_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::_internal_filter0_0() const {
  return filter0_0_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::filter0_0() const {
  // @@protoc_insertion_point(field_get:b3console.CanBusConfigMessage.filter0_0)
  return _internal_filter0_0();
}
inline void CanBusConfigMessage::_internal_set_filter0_0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  filter0_0_ = value;
}
inline void CanBusConfigMessage::set_filter0_0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_filter0_0(value);
  // @@protoc_insertion_point(field_set:b3console.CanBusConfigMessage.filter0_0)
}

// int32 filter0_1 = 7;
inline void CanBusConfigMessage::clear_filter0_1() {
  filter0_1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::_internal_filter0_1() const {
  return filter0_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::filter0_1() const {
  // @@protoc_insertion_point(field_get:b3console.CanBusConfigMessage.filter0_1)
  return _internal_filter0_1();
}
inline void CanBusConfigMessage::_internal_set_filter0_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  filter0_1_ = value;
}
inline void CanBusConfigMessage::set_filter0_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_filter0_1(value);
  // @@protoc_insertion_point(field_set:b3console.CanBusConfigMessage.filter0_1)
}

// int32 mask1 = 8;
inline void CanBusConfigMessage::clear_mask1() {
  mask1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::_internal_mask1() const {
  return mask1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::mask1() const {
  // @@protoc_insertion_point(field_get:b3console.CanBusConfigMessage.mask1)
  return _internal_mask1();
}
inline void CanBusConfigMessage::_internal_set_mask1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mask1_ = value;
}
inline void CanBusConfigMessage::set_mask1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mask1(value);
  // @@protoc_insertion_point(field_set:b3console.CanBusConfigMessage.mask1)
}

// int32 filter1_0 = 9;
inline void CanBusConfigMessage::clear_filter1_0() {
  filter1_0_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::_internal_filter1_0() const {
  return filter1_0_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::filter1_0() const {
  // @@protoc_insertion_point(field_get:b3console.CanBusConfigMessage.filter1_0)
  return _internal_filter1_0();
}
inline void CanBusConfigMessage::_internal_set_filter1_0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  filter1_0_ = value;
}
inline void CanBusConfigMessage::set_filter1_0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_filter1_0(value);
  // @@protoc_insertion_point(field_set:b3console.CanBusConfigMessage.filter1_0)
}

// int32 filter1_1 = 10;
inline void CanBusConfigMessage::clear_filter1_1() {
  filter1_1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::_internal_filter1_1() const {
  return filter1_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::filter1_1() const {
  // @@protoc_insertion_point(field_get:b3console.CanBusConfigMessage.filter1_1)
  return _internal_filter1_1();
}
inline void CanBusConfigMessage::_internal_set_filter1_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  filter1_1_ = value;
}
inline void CanBusConfigMessage::set_filter1_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_filter1_1(value);
  // @@protoc_insertion_point(field_set:b3console.CanBusConfigMessage.filter1_1)
}

// int32 filter1_2 = 11;
inline void CanBusConfigMessage::clear_filter1_2() {
  filter1_2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::_internal_filter1_2() const {
  return filter1_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::filter1_2() const {
  // @@protoc_insertion_point(field_get:b3console.CanBusConfigMessage.filter1_2)
  return _internal_filter1_2();
}
inline void CanBusConfigMessage::_internal_set_filter1_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  filter1_2_ = value;
}
inline void CanBusConfigMessage::set_filter1_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_filter1_2(value);
  // @@protoc_insertion_point(field_set:b3console.CanBusConfigMessage.filter1_2)
}

// int32 filter1_3 = 12;
inline void CanBusConfigMessage::clear_filter1_3() {
  filter1_3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::_internal_filter1_3() const {
  return filter1_3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanBusConfigMessage::filter1_3() const {
  // @@protoc_insertion_point(field_get:b3console.CanBusConfigMessage.filter1_3)
  return _internal_filter1_3();
}
inline void CanBusConfigMessage::_internal_set_filter1_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  filter1_3_ = value;
}
inline void CanBusConfigMessage::set_filter1_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_filter1_3(value);
  // @@protoc_insertion_point(field_set:b3console.CanBusConfigMessage.filter1_3)
}

// -------------------------------------------------------------------

// ShifterMessage_IndicatorConfigMessage

// int32 brightness = 1;
inline void ShifterMessage_IndicatorConfigMessage::clear_brightness() {
  brightness_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_IndicatorConfigMessage::_internal_brightness() const {
  return brightness_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_IndicatorConfigMessage::brightness() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.IndicatorConfigMessage.brightness)
  return _internal_brightness();
}
inline void ShifterMessage_IndicatorConfigMessage::_internal_set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  brightness_ = value;
}
inline void ShifterMessage_IndicatorConfigMessage::set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:b3console.ShifterMessage.IndicatorConfigMessage.brightness)
}

// int32 color = 2;
inline void ShifterMessage_IndicatorConfigMessage::clear_color() {
  color_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_IndicatorConfigMessage::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_IndicatorConfigMessage::color() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.IndicatorConfigMessage.color)
  return _internal_color();
}
inline void ShifterMessage_IndicatorConfigMessage::_internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  color_ = value;
}
inline void ShifterMessage_IndicatorConfigMessage::set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:b3console.ShifterMessage.IndicatorConfigMessage.color)
}

// int32 wait = 3;
inline void ShifterMessage_IndicatorConfigMessage::clear_wait() {
  wait_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_IndicatorConfigMessage::_internal_wait() const {
  return wait_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_IndicatorConfigMessage::wait() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.IndicatorConfigMessage.wait)
  return _internal_wait();
}
inline void ShifterMessage_IndicatorConfigMessage::_internal_set_wait(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wait_ = value;
}
inline void ShifterMessage_IndicatorConfigMessage::set_wait(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wait(value);
  // @@protoc_insertion_point(field_set:b3console.ShifterMessage.IndicatorConfigMessage.wait)
}

// -------------------------------------------------------------------

// ShifterMessage_MelexisConfigMessage

// int32 range = 1;
inline void ShifterMessage_MelexisConfigMessage::clear_range() {
  range_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_MelexisConfigMessage::_internal_range() const {
  return range_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_MelexisConfigMessage::range() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.MelexisConfigMessage.range)
  return _internal_range();
}
inline void ShifterMessage_MelexisConfigMessage::_internal_set_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  range_ = value;
}
inline void ShifterMessage_MelexisConfigMessage::set_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:b3console.ShifterMessage.MelexisConfigMessage.range)
}

// -------------------------------------------------------------------

// ShifterMessage_ShifterPositionMessage

// int32 x1 = 1;
inline void ShifterMessage_ShifterPositionMessage::clear_x1() {
  x1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_ShifterPositionMessage::_internal_x1() const {
  return x1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_ShifterPositionMessage::x1() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.ShifterPositionMessage.x1)
  return _internal_x1();
}
inline void ShifterMessage_ShifterPositionMessage::_internal_set_x1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x1_ = value;
}
inline void ShifterMessage_ShifterPositionMessage::set_x1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:b3console.ShifterMessage.ShifterPositionMessage.x1)
}

// int32 y1 = 2;
inline void ShifterMessage_ShifterPositionMessage::clear_y1() {
  y1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_ShifterPositionMessage::_internal_y1() const {
  return y1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_ShifterPositionMessage::y1() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.ShifterPositionMessage.y1)
  return _internal_y1();
}
inline void ShifterMessage_ShifterPositionMessage::_internal_set_y1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y1_ = value;
}
inline void ShifterMessage_ShifterPositionMessage::set_y1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:b3console.ShifterMessage.ShifterPositionMessage.y1)
}

// int32 x2 = 3;
inline void ShifterMessage_ShifterPositionMessage::clear_x2() {
  x2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_ShifterPositionMessage::_internal_x2() const {
  return x2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_ShifterPositionMessage::x2() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.ShifterPositionMessage.x2)
  return _internal_x2();
}
inline void ShifterMessage_ShifterPositionMessage::_internal_set_x2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x2_ = value;
}
inline void ShifterMessage_ShifterPositionMessage::set_x2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:b3console.ShifterMessage.ShifterPositionMessage.x2)
}

// int32 y2 = 4;
inline void ShifterMessage_ShifterPositionMessage::clear_y2() {
  y2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_ShifterPositionMessage::_internal_y2() const {
  return y2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_ShifterPositionMessage::y2() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.ShifterPositionMessage.y2)
  return _internal_y2();
}
inline void ShifterMessage_ShifterPositionMessage::_internal_set_y2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y2_ = value;
}
inline void ShifterMessage_ShifterPositionMessage::set_y2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:b3console.ShifterMessage.ShifterPositionMessage.y2)
}

// int32 enum_val = 5;
inline void ShifterMessage_ShifterPositionMessage::clear_enum_val() {
  enum_val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_ShifterPositionMessage::_internal_enum_val() const {
  return enum_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShifterMessage_ShifterPositionMessage::enum_val() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.ShifterPositionMessage.enum_val)
  return _internal_enum_val();
}
inline void ShifterMessage_ShifterPositionMessage::_internal_set_enum_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enum_val_ = value;
}
inline void ShifterMessage_ShifterPositionMessage::set_enum_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enum_val(value);
  // @@protoc_insertion_point(field_set:b3console.ShifterMessage.ShifterPositionMessage.enum_val)
}

// -------------------------------------------------------------------

// ShifterMessage

// .b3console.CanBusConfigMessage can_bus_config = 1;
inline bool ShifterMessage::_internal_has_can_bus_config() const {
  return this != internal_default_instance() && can_bus_config_ != nullptr;
}
inline bool ShifterMessage::has_can_bus_config() const {
  return _internal_has_can_bus_config();
}
inline void ShifterMessage::clear_can_bus_config() {
  if (GetArena() == nullptr && can_bus_config_ != nullptr) {
    delete can_bus_config_;
  }
  can_bus_config_ = nullptr;
}
inline const ::b3console::CanBusConfigMessage& ShifterMessage::_internal_can_bus_config() const {
  const ::b3console::CanBusConfigMessage* p = can_bus_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::CanBusConfigMessage*>(
      &::b3console::_CanBusConfigMessage_default_instance_);
}
inline const ::b3console::CanBusConfigMessage& ShifterMessage::can_bus_config() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.can_bus_config)
  return _internal_can_bus_config();
}
inline void ShifterMessage::unsafe_arena_set_allocated_can_bus_config(
    ::b3console::CanBusConfigMessage* can_bus_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(can_bus_config_);
  }
  can_bus_config_ = can_bus_config;
  if (can_bus_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.ShifterMessage.can_bus_config)
}
inline ::b3console::CanBusConfigMessage* ShifterMessage::release_can_bus_config() {
  auto temp = unsafe_arena_release_can_bus_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::CanBusConfigMessage* ShifterMessage::unsafe_arena_release_can_bus_config() {
  // @@protoc_insertion_point(field_release:b3console.ShifterMessage.can_bus_config)
  
  ::b3console::CanBusConfigMessage* temp = can_bus_config_;
  can_bus_config_ = nullptr;
  return temp;
}
inline ::b3console::CanBusConfigMessage* ShifterMessage::_internal_mutable_can_bus_config() {
  
  if (can_bus_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::CanBusConfigMessage>(GetArena());
    can_bus_config_ = p;
  }
  return can_bus_config_;
}
inline ::b3console::CanBusConfigMessage* ShifterMessage::mutable_can_bus_config() {
  // @@protoc_insertion_point(field_mutable:b3console.ShifterMessage.can_bus_config)
  return _internal_mutable_can_bus_config();
}
inline void ShifterMessage::set_allocated_can_bus_config(::b3console::CanBusConfigMessage* can_bus_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete can_bus_config_;
  }
  if (can_bus_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(can_bus_config);
    if (message_arena != submessage_arena) {
      can_bus_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, can_bus_config, submessage_arena);
    }
    
  } else {
    
  }
  can_bus_config_ = can_bus_config;
  // @@protoc_insertion_point(field_set_allocated:b3console.ShifterMessage.can_bus_config)
}

// .b3console.ShifterMessage.IndicatorConfigMessage indicator_config = 2;
inline bool ShifterMessage::_internal_has_indicator_config() const {
  return this != internal_default_instance() && indicator_config_ != nullptr;
}
inline bool ShifterMessage::has_indicator_config() const {
  return _internal_has_indicator_config();
}
inline void ShifterMessage::clear_indicator_config() {
  if (GetArena() == nullptr && indicator_config_ != nullptr) {
    delete indicator_config_;
  }
  indicator_config_ = nullptr;
}
inline const ::b3console::ShifterMessage_IndicatorConfigMessage& ShifterMessage::_internal_indicator_config() const {
  const ::b3console::ShifterMessage_IndicatorConfigMessage* p = indicator_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::ShifterMessage_IndicatorConfigMessage*>(
      &::b3console::_ShifterMessage_IndicatorConfigMessage_default_instance_);
}
inline const ::b3console::ShifterMessage_IndicatorConfigMessage& ShifterMessage::indicator_config() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.indicator_config)
  return _internal_indicator_config();
}
inline void ShifterMessage::unsafe_arena_set_allocated_indicator_config(
    ::b3console::ShifterMessage_IndicatorConfigMessage* indicator_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indicator_config_);
  }
  indicator_config_ = indicator_config;
  if (indicator_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.ShifterMessage.indicator_config)
}
inline ::b3console::ShifterMessage_IndicatorConfigMessage* ShifterMessage::release_indicator_config() {
  auto temp = unsafe_arena_release_indicator_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::ShifterMessage_IndicatorConfigMessage* ShifterMessage::unsafe_arena_release_indicator_config() {
  // @@protoc_insertion_point(field_release:b3console.ShifterMessage.indicator_config)
  
  ::b3console::ShifterMessage_IndicatorConfigMessage* temp = indicator_config_;
  indicator_config_ = nullptr;
  return temp;
}
inline ::b3console::ShifterMessage_IndicatorConfigMessage* ShifterMessage::_internal_mutable_indicator_config() {
  
  if (indicator_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::ShifterMessage_IndicatorConfigMessage>(GetArena());
    indicator_config_ = p;
  }
  return indicator_config_;
}
inline ::b3console::ShifterMessage_IndicatorConfigMessage* ShifterMessage::mutable_indicator_config() {
  // @@protoc_insertion_point(field_mutable:b3console.ShifterMessage.indicator_config)
  return _internal_mutable_indicator_config();
}
inline void ShifterMessage::set_allocated_indicator_config(::b3console::ShifterMessage_IndicatorConfigMessage* indicator_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete indicator_config_;
  }
  if (indicator_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(indicator_config);
    if (message_arena != submessage_arena) {
      indicator_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indicator_config, submessage_arena);
    }
    
  } else {
    
  }
  indicator_config_ = indicator_config;
  // @@protoc_insertion_point(field_set_allocated:b3console.ShifterMessage.indicator_config)
}

// .b3console.ShifterMessage.MelexisConfigMessage melexis_config = 3;
inline bool ShifterMessage::_internal_has_melexis_config() const {
  return this != internal_default_instance() && melexis_config_ != nullptr;
}
inline bool ShifterMessage::has_melexis_config() const {
  return _internal_has_melexis_config();
}
inline void ShifterMessage::clear_melexis_config() {
  if (GetArena() == nullptr && melexis_config_ != nullptr) {
    delete melexis_config_;
  }
  melexis_config_ = nullptr;
}
inline const ::b3console::ShifterMessage_MelexisConfigMessage& ShifterMessage::_internal_melexis_config() const {
  const ::b3console::ShifterMessage_MelexisConfigMessage* p = melexis_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::ShifterMessage_MelexisConfigMessage*>(
      &::b3console::_ShifterMessage_MelexisConfigMessage_default_instance_);
}
inline const ::b3console::ShifterMessage_MelexisConfigMessage& ShifterMessage::melexis_config() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.melexis_config)
  return _internal_melexis_config();
}
inline void ShifterMessage::unsafe_arena_set_allocated_melexis_config(
    ::b3console::ShifterMessage_MelexisConfigMessage* melexis_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(melexis_config_);
  }
  melexis_config_ = melexis_config;
  if (melexis_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.ShifterMessage.melexis_config)
}
inline ::b3console::ShifterMessage_MelexisConfigMessage* ShifterMessage::release_melexis_config() {
  auto temp = unsafe_arena_release_melexis_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::ShifterMessage_MelexisConfigMessage* ShifterMessage::unsafe_arena_release_melexis_config() {
  // @@protoc_insertion_point(field_release:b3console.ShifterMessage.melexis_config)
  
  ::b3console::ShifterMessage_MelexisConfigMessage* temp = melexis_config_;
  melexis_config_ = nullptr;
  return temp;
}
inline ::b3console::ShifterMessage_MelexisConfigMessage* ShifterMessage::_internal_mutable_melexis_config() {
  
  if (melexis_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::ShifterMessage_MelexisConfigMessage>(GetArena());
    melexis_config_ = p;
  }
  return melexis_config_;
}
inline ::b3console::ShifterMessage_MelexisConfigMessage* ShifterMessage::mutable_melexis_config() {
  // @@protoc_insertion_point(field_mutable:b3console.ShifterMessage.melexis_config)
  return _internal_mutable_melexis_config();
}
inline void ShifterMessage::set_allocated_melexis_config(::b3console::ShifterMessage_MelexisConfigMessage* melexis_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete melexis_config_;
  }
  if (melexis_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(melexis_config);
    if (message_arena != submessage_arena) {
      melexis_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, melexis_config, submessage_arena);
    }
    
  } else {
    
  }
  melexis_config_ = melexis_config;
  // @@protoc_insertion_point(field_set_allocated:b3console.ShifterMessage.melexis_config)
}

// .b3console.ShifterMessage.ShifterPositionMessage park_config = 4;
inline bool ShifterMessage::_internal_has_park_config() const {
  return this != internal_default_instance() && park_config_ != nullptr;
}
inline bool ShifterMessage::has_park_config() const {
  return _internal_has_park_config();
}
inline void ShifterMessage::clear_park_config() {
  if (GetArena() == nullptr && park_config_ != nullptr) {
    delete park_config_;
  }
  park_config_ = nullptr;
}
inline const ::b3console::ShifterMessage_ShifterPositionMessage& ShifterMessage::_internal_park_config() const {
  const ::b3console::ShifterMessage_ShifterPositionMessage* p = park_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::ShifterMessage_ShifterPositionMessage*>(
      &::b3console::_ShifterMessage_ShifterPositionMessage_default_instance_);
}
inline const ::b3console::ShifterMessage_ShifterPositionMessage& ShifterMessage::park_config() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.park_config)
  return _internal_park_config();
}
inline void ShifterMessage::unsafe_arena_set_allocated_park_config(
    ::b3console::ShifterMessage_ShifterPositionMessage* park_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(park_config_);
  }
  park_config_ = park_config;
  if (park_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.ShifterMessage.park_config)
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::release_park_config() {
  auto temp = unsafe_arena_release_park_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::unsafe_arena_release_park_config() {
  // @@protoc_insertion_point(field_release:b3console.ShifterMessage.park_config)
  
  ::b3console::ShifterMessage_ShifterPositionMessage* temp = park_config_;
  park_config_ = nullptr;
  return temp;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::_internal_mutable_park_config() {
  
  if (park_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::ShifterMessage_ShifterPositionMessage>(GetArena());
    park_config_ = p;
  }
  return park_config_;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::mutable_park_config() {
  // @@protoc_insertion_point(field_mutable:b3console.ShifterMessage.park_config)
  return _internal_mutable_park_config();
}
inline void ShifterMessage::set_allocated_park_config(::b3console::ShifterMessage_ShifterPositionMessage* park_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete park_config_;
  }
  if (park_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(park_config);
    if (message_arena != submessage_arena) {
      park_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, park_config, submessage_arena);
    }
    
  } else {
    
  }
  park_config_ = park_config;
  // @@protoc_insertion_point(field_set_allocated:b3console.ShifterMessage.park_config)
}

// .b3console.ShifterMessage.ShifterPositionMessage reverse_config = 5;
inline bool ShifterMessage::_internal_has_reverse_config() const {
  return this != internal_default_instance() && reverse_config_ != nullptr;
}
inline bool ShifterMessage::has_reverse_config() const {
  return _internal_has_reverse_config();
}
inline void ShifterMessage::clear_reverse_config() {
  if (GetArena() == nullptr && reverse_config_ != nullptr) {
    delete reverse_config_;
  }
  reverse_config_ = nullptr;
}
inline const ::b3console::ShifterMessage_ShifterPositionMessage& ShifterMessage::_internal_reverse_config() const {
  const ::b3console::ShifterMessage_ShifterPositionMessage* p = reverse_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::ShifterMessage_ShifterPositionMessage*>(
      &::b3console::_ShifterMessage_ShifterPositionMessage_default_instance_);
}
inline const ::b3console::ShifterMessage_ShifterPositionMessage& ShifterMessage::reverse_config() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.reverse_config)
  return _internal_reverse_config();
}
inline void ShifterMessage::unsafe_arena_set_allocated_reverse_config(
    ::b3console::ShifterMessage_ShifterPositionMessage* reverse_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_config_);
  }
  reverse_config_ = reverse_config;
  if (reverse_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.ShifterMessage.reverse_config)
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::release_reverse_config() {
  auto temp = unsafe_arena_release_reverse_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::unsafe_arena_release_reverse_config() {
  // @@protoc_insertion_point(field_release:b3console.ShifterMessage.reverse_config)
  
  ::b3console::ShifterMessage_ShifterPositionMessage* temp = reverse_config_;
  reverse_config_ = nullptr;
  return temp;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::_internal_mutable_reverse_config() {
  
  if (reverse_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::ShifterMessage_ShifterPositionMessage>(GetArena());
    reverse_config_ = p;
  }
  return reverse_config_;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::mutable_reverse_config() {
  // @@protoc_insertion_point(field_mutable:b3console.ShifterMessage.reverse_config)
  return _internal_mutable_reverse_config();
}
inline void ShifterMessage::set_allocated_reverse_config(::b3console::ShifterMessage_ShifterPositionMessage* reverse_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reverse_config_;
  }
  if (reverse_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reverse_config);
    if (message_arena != submessage_arena) {
      reverse_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reverse_config, submessage_arena);
    }
    
  } else {
    
  }
  reverse_config_ = reverse_config;
  // @@protoc_insertion_point(field_set_allocated:b3console.ShifterMessage.reverse_config)
}

// .b3console.ShifterMessage.ShifterPositionMessage neutral_config = 6;
inline bool ShifterMessage::_internal_has_neutral_config() const {
  return this != internal_default_instance() && neutral_config_ != nullptr;
}
inline bool ShifterMessage::has_neutral_config() const {
  return _internal_has_neutral_config();
}
inline void ShifterMessage::clear_neutral_config() {
  if (GetArena() == nullptr && neutral_config_ != nullptr) {
    delete neutral_config_;
  }
  neutral_config_ = nullptr;
}
inline const ::b3console::ShifterMessage_ShifterPositionMessage& ShifterMessage::_internal_neutral_config() const {
  const ::b3console::ShifterMessage_ShifterPositionMessage* p = neutral_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::ShifterMessage_ShifterPositionMessage*>(
      &::b3console::_ShifterMessage_ShifterPositionMessage_default_instance_);
}
inline const ::b3console::ShifterMessage_ShifterPositionMessage& ShifterMessage::neutral_config() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.neutral_config)
  return _internal_neutral_config();
}
inline void ShifterMessage::unsafe_arena_set_allocated_neutral_config(
    ::b3console::ShifterMessage_ShifterPositionMessage* neutral_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neutral_config_);
  }
  neutral_config_ = neutral_config;
  if (neutral_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.ShifterMessage.neutral_config)
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::release_neutral_config() {
  auto temp = unsafe_arena_release_neutral_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::unsafe_arena_release_neutral_config() {
  // @@protoc_insertion_point(field_release:b3console.ShifterMessage.neutral_config)
  
  ::b3console::ShifterMessage_ShifterPositionMessage* temp = neutral_config_;
  neutral_config_ = nullptr;
  return temp;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::_internal_mutable_neutral_config() {
  
  if (neutral_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::ShifterMessage_ShifterPositionMessage>(GetArena());
    neutral_config_ = p;
  }
  return neutral_config_;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::mutable_neutral_config() {
  // @@protoc_insertion_point(field_mutable:b3console.ShifterMessage.neutral_config)
  return _internal_mutable_neutral_config();
}
inline void ShifterMessage::set_allocated_neutral_config(::b3console::ShifterMessage_ShifterPositionMessage* neutral_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete neutral_config_;
  }
  if (neutral_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(neutral_config);
    if (message_arena != submessage_arena) {
      neutral_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neutral_config, submessage_arena);
    }
    
  } else {
    
  }
  neutral_config_ = neutral_config;
  // @@protoc_insertion_point(field_set_allocated:b3console.ShifterMessage.neutral_config)
}

// .b3console.ShifterMessage.ShifterPositionMessage drive_config = 7;
inline bool ShifterMessage::_internal_has_drive_config() const {
  return this != internal_default_instance() && drive_config_ != nullptr;
}
inline bool ShifterMessage::has_drive_config() const {
  return _internal_has_drive_config();
}
inline void ShifterMessage::clear_drive_config() {
  if (GetArena() == nullptr && drive_config_ != nullptr) {
    delete drive_config_;
  }
  drive_config_ = nullptr;
}
inline const ::b3console::ShifterMessage_ShifterPositionMessage& ShifterMessage::_internal_drive_config() const {
  const ::b3console::ShifterMessage_ShifterPositionMessage* p = drive_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::ShifterMessage_ShifterPositionMessage*>(
      &::b3console::_ShifterMessage_ShifterPositionMessage_default_instance_);
}
inline const ::b3console::ShifterMessage_ShifterPositionMessage& ShifterMessage::drive_config() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.drive_config)
  return _internal_drive_config();
}
inline void ShifterMessage::unsafe_arena_set_allocated_drive_config(
    ::b3console::ShifterMessage_ShifterPositionMessage* drive_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drive_config_);
  }
  drive_config_ = drive_config;
  if (drive_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.ShifterMessage.drive_config)
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::release_drive_config() {
  auto temp = unsafe_arena_release_drive_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::unsafe_arena_release_drive_config() {
  // @@protoc_insertion_point(field_release:b3console.ShifterMessage.drive_config)
  
  ::b3console::ShifterMessage_ShifterPositionMessage* temp = drive_config_;
  drive_config_ = nullptr;
  return temp;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::_internal_mutable_drive_config() {
  
  if (drive_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::ShifterMessage_ShifterPositionMessage>(GetArena());
    drive_config_ = p;
  }
  return drive_config_;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::mutable_drive_config() {
  // @@protoc_insertion_point(field_mutable:b3console.ShifterMessage.drive_config)
  return _internal_mutable_drive_config();
}
inline void ShifterMessage::set_allocated_drive_config(::b3console::ShifterMessage_ShifterPositionMessage* drive_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete drive_config_;
  }
  if (drive_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(drive_config);
    if (message_arena != submessage_arena) {
      drive_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drive_config, submessage_arena);
    }
    
  } else {
    
  }
  drive_config_ = drive_config;
  // @@protoc_insertion_point(field_set_allocated:b3console.ShifterMessage.drive_config)
}

// .b3console.ShifterMessage.ShifterPositionMessage manual_config = 8;
inline bool ShifterMessage::_internal_has_manual_config() const {
  return this != internal_default_instance() && manual_config_ != nullptr;
}
inline bool ShifterMessage::has_manual_config() const {
  return _internal_has_manual_config();
}
inline void ShifterMessage::clear_manual_config() {
  if (GetArena() == nullptr && manual_config_ != nullptr) {
    delete manual_config_;
  }
  manual_config_ = nullptr;
}
inline const ::b3console::ShifterMessage_ShifterPositionMessage& ShifterMessage::_internal_manual_config() const {
  const ::b3console::ShifterMessage_ShifterPositionMessage* p = manual_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::ShifterMessage_ShifterPositionMessage*>(
      &::b3console::_ShifterMessage_ShifterPositionMessage_default_instance_);
}
inline const ::b3console::ShifterMessage_ShifterPositionMessage& ShifterMessage::manual_config() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.manual_config)
  return _internal_manual_config();
}
inline void ShifterMessage::unsafe_arena_set_allocated_manual_config(
    ::b3console::ShifterMessage_ShifterPositionMessage* manual_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(manual_config_);
  }
  manual_config_ = manual_config;
  if (manual_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.ShifterMessage.manual_config)
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::release_manual_config() {
  auto temp = unsafe_arena_release_manual_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::unsafe_arena_release_manual_config() {
  // @@protoc_insertion_point(field_release:b3console.ShifterMessage.manual_config)
  
  ::b3console::ShifterMessage_ShifterPositionMessage* temp = manual_config_;
  manual_config_ = nullptr;
  return temp;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::_internal_mutable_manual_config() {
  
  if (manual_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::ShifterMessage_ShifterPositionMessage>(GetArena());
    manual_config_ = p;
  }
  return manual_config_;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::mutable_manual_config() {
  // @@protoc_insertion_point(field_mutable:b3console.ShifterMessage.manual_config)
  return _internal_mutable_manual_config();
}
inline void ShifterMessage::set_allocated_manual_config(::b3console::ShifterMessage_ShifterPositionMessage* manual_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete manual_config_;
  }
  if (manual_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(manual_config);
    if (message_arena != submessage_arena) {
      manual_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manual_config, submessage_arena);
    }
    
  } else {
    
  }
  manual_config_ = manual_config;
  // @@protoc_insertion_point(field_set_allocated:b3console.ShifterMessage.manual_config)
}

// .b3console.ShifterMessage.ShifterPositionMessage up_config = 9;
inline bool ShifterMessage::_internal_has_up_config() const {
  return this != internal_default_instance() && up_config_ != nullptr;
}
inline bool ShifterMessage::has_up_config() const {
  return _internal_has_up_config();
}
inline void ShifterMessage::clear_up_config() {
  if (GetArena() == nullptr && up_config_ != nullptr) {
    delete up_config_;
  }
  up_config_ = nullptr;
}
inline const ::b3console::ShifterMessage_ShifterPositionMessage& ShifterMessage::_internal_up_config() const {
  const ::b3console::ShifterMessage_ShifterPositionMessage* p = up_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::ShifterMessage_ShifterPositionMessage*>(
      &::b3console::_ShifterMessage_ShifterPositionMessage_default_instance_);
}
inline const ::b3console::ShifterMessage_ShifterPositionMessage& ShifterMessage::up_config() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.up_config)
  return _internal_up_config();
}
inline void ShifterMessage::unsafe_arena_set_allocated_up_config(
    ::b3console::ShifterMessage_ShifterPositionMessage* up_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(up_config_);
  }
  up_config_ = up_config;
  if (up_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.ShifterMessage.up_config)
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::release_up_config() {
  auto temp = unsafe_arena_release_up_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::unsafe_arena_release_up_config() {
  // @@protoc_insertion_point(field_release:b3console.ShifterMessage.up_config)
  
  ::b3console::ShifterMessage_ShifterPositionMessage* temp = up_config_;
  up_config_ = nullptr;
  return temp;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::_internal_mutable_up_config() {
  
  if (up_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::ShifterMessage_ShifterPositionMessage>(GetArena());
    up_config_ = p;
  }
  return up_config_;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::mutable_up_config() {
  // @@protoc_insertion_point(field_mutable:b3console.ShifterMessage.up_config)
  return _internal_mutable_up_config();
}
inline void ShifterMessage::set_allocated_up_config(::b3console::ShifterMessage_ShifterPositionMessage* up_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete up_config_;
  }
  if (up_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(up_config);
    if (message_arena != submessage_arena) {
      up_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, up_config, submessage_arena);
    }
    
  } else {
    
  }
  up_config_ = up_config;
  // @@protoc_insertion_point(field_set_allocated:b3console.ShifterMessage.up_config)
}

// .b3console.ShifterMessage.ShifterPositionMessage down_config = 10;
inline bool ShifterMessage::_internal_has_down_config() const {
  return this != internal_default_instance() && down_config_ != nullptr;
}
inline bool ShifterMessage::has_down_config() const {
  return _internal_has_down_config();
}
inline void ShifterMessage::clear_down_config() {
  if (GetArena() == nullptr && down_config_ != nullptr) {
    delete down_config_;
  }
  down_config_ = nullptr;
}
inline const ::b3console::ShifterMessage_ShifterPositionMessage& ShifterMessage::_internal_down_config() const {
  const ::b3console::ShifterMessage_ShifterPositionMessage* p = down_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::ShifterMessage_ShifterPositionMessage*>(
      &::b3console::_ShifterMessage_ShifterPositionMessage_default_instance_);
}
inline const ::b3console::ShifterMessage_ShifterPositionMessage& ShifterMessage::down_config() const {
  // @@protoc_insertion_point(field_get:b3console.ShifterMessage.down_config)
  return _internal_down_config();
}
inline void ShifterMessage::unsafe_arena_set_allocated_down_config(
    ::b3console::ShifterMessage_ShifterPositionMessage* down_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(down_config_);
  }
  down_config_ = down_config;
  if (down_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.ShifterMessage.down_config)
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::release_down_config() {
  auto temp = unsafe_arena_release_down_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::unsafe_arena_release_down_config() {
  // @@protoc_insertion_point(field_release:b3console.ShifterMessage.down_config)
  
  ::b3console::ShifterMessage_ShifterPositionMessage* temp = down_config_;
  down_config_ = nullptr;
  return temp;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::_internal_mutable_down_config() {
  
  if (down_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::ShifterMessage_ShifterPositionMessage>(GetArena());
    down_config_ = p;
  }
  return down_config_;
}
inline ::b3console::ShifterMessage_ShifterPositionMessage* ShifterMessage::mutable_down_config() {
  // @@protoc_insertion_point(field_mutable:b3console.ShifterMessage.down_config)
  return _internal_mutable_down_config();
}
inline void ShifterMessage::set_allocated_down_config(::b3console::ShifterMessage_ShifterPositionMessage* down_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete down_config_;
  }
  if (down_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(down_config);
    if (message_arena != submessage_arena) {
      down_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, down_config, submessage_arena);
    }
    
  } else {
    
  }
  down_config_ = down_config;
  // @@protoc_insertion_point(field_set_allocated:b3console.ShifterMessage.down_config)
}

// -------------------------------------------------------------------

// TransMessage_Ems22AConfigMessage

// int32 enc_max = 1;
inline void TransMessage_Ems22AConfigMessage::clear_enc_max() {
  enc_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMessage_Ems22AConfigMessage::_internal_enc_max() const {
  return enc_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMessage_Ems22AConfigMessage::enc_max() const {
  // @@protoc_insertion_point(field_get:b3console.TransMessage.Ems22AConfigMessage.enc_max)
  return _internal_enc_max();
}
inline void TransMessage_Ems22AConfigMessage::_internal_set_enc_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enc_max_ = value;
}
inline void TransMessage_Ems22AConfigMessage::set_enc_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enc_max(value);
  // @@protoc_insertion_point(field_set:b3console.TransMessage.Ems22AConfigMessage.enc_max)
}

// int32 enc_min = 2;
inline void TransMessage_Ems22AConfigMessage::clear_enc_min() {
  enc_min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMessage_Ems22AConfigMessage::_internal_enc_min() const {
  return enc_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMessage_Ems22AConfigMessage::enc_min() const {
  // @@protoc_insertion_point(field_get:b3console.TransMessage.Ems22AConfigMessage.enc_min)
  return _internal_enc_min();
}
inline void TransMessage_Ems22AConfigMessage::_internal_set_enc_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enc_min_ = value;
}
inline void TransMessage_Ems22AConfigMessage::set_enc_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enc_min(value);
  // @@protoc_insertion_point(field_set:b3console.TransMessage.Ems22AConfigMessage.enc_min)
}

// -------------------------------------------------------------------

// TransMessage_Vnh5019ConfigMessage

// int32 max_current = 1;
inline void TransMessage_Vnh5019ConfigMessage::clear_max_current() {
  max_current_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMessage_Vnh5019ConfigMessage::_internal_max_current() const {
  return max_current_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMessage_Vnh5019ConfigMessage::max_current() const {
  // @@protoc_insertion_point(field_get:b3console.TransMessage.Vnh5019ConfigMessage.max_current)
  return _internal_max_current();
}
inline void TransMessage_Vnh5019ConfigMessage::_internal_set_max_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_current_ = value;
}
inline void TransMessage_Vnh5019ConfigMessage::set_max_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_current(value);
  // @@protoc_insertion_point(field_set:b3console.TransMessage.Vnh5019ConfigMessage.max_current)
}

// -------------------------------------------------------------------

// TransMessage_PidConfigMessage

// double agg_kd = 1;
inline void TransMessage_PidConfigMessage::clear_agg_kd() {
  agg_kd_ = 0;
}
inline double TransMessage_PidConfigMessage::_internal_agg_kd() const {
  return agg_kd_;
}
inline double TransMessage_PidConfigMessage::agg_kd() const {
  // @@protoc_insertion_point(field_get:b3console.TransMessage.PidConfigMessage.agg_kd)
  return _internal_agg_kd();
}
inline void TransMessage_PidConfigMessage::_internal_set_agg_kd(double value) {
  
  agg_kd_ = value;
}
inline void TransMessage_PidConfigMessage::set_agg_kd(double value) {
  _internal_set_agg_kd(value);
  // @@protoc_insertion_point(field_set:b3console.TransMessage.PidConfigMessage.agg_kd)
}

// double agg_ki = 2;
inline void TransMessage_PidConfigMessage::clear_agg_ki() {
  agg_ki_ = 0;
}
inline double TransMessage_PidConfigMessage::_internal_agg_ki() const {
  return agg_ki_;
}
inline double TransMessage_PidConfigMessage::agg_ki() const {
  // @@protoc_insertion_point(field_get:b3console.TransMessage.PidConfigMessage.agg_ki)
  return _internal_agg_ki();
}
inline void TransMessage_PidConfigMessage::_internal_set_agg_ki(double value) {
  
  agg_ki_ = value;
}
inline void TransMessage_PidConfigMessage::set_agg_ki(double value) {
  _internal_set_agg_ki(value);
  // @@protoc_insertion_point(field_set:b3console.TransMessage.PidConfigMessage.agg_ki)
}

// double agg_kp = 3;
inline void TransMessage_PidConfigMessage::clear_agg_kp() {
  agg_kp_ = 0;
}
inline double TransMessage_PidConfigMessage::_internal_agg_kp() const {
  return agg_kp_;
}
inline double TransMessage_PidConfigMessage::agg_kp() const {
  // @@protoc_insertion_point(field_get:b3console.TransMessage.PidConfigMessage.agg_kp)
  return _internal_agg_kp();
}
inline void TransMessage_PidConfigMessage::_internal_set_agg_kp(double value) {
  
  agg_kp_ = value;
}
inline void TransMessage_PidConfigMessage::set_agg_kp(double value) {
  _internal_set_agg_kp(value);
  // @@protoc_insertion_point(field_set:b3console.TransMessage.PidConfigMessage.agg_kp)
}

// double cons_kd = 4;
inline void TransMessage_PidConfigMessage::clear_cons_kd() {
  cons_kd_ = 0;
}
inline double TransMessage_PidConfigMessage::_internal_cons_kd() const {
  return cons_kd_;
}
inline double TransMessage_PidConfigMessage::cons_kd() const {
  // @@protoc_insertion_point(field_get:b3console.TransMessage.PidConfigMessage.cons_kd)
  return _internal_cons_kd();
}
inline void TransMessage_PidConfigMessage::_internal_set_cons_kd(double value) {
  
  cons_kd_ = value;
}
inline void TransMessage_PidConfigMessage::set_cons_kd(double value) {
  _internal_set_cons_kd(value);
  // @@protoc_insertion_point(field_set:b3console.TransMessage.PidConfigMessage.cons_kd)
}

// double cons_ki = 5;
inline void TransMessage_PidConfigMessage::clear_cons_ki() {
  cons_ki_ = 0;
}
inline double TransMessage_PidConfigMessage::_internal_cons_ki() const {
  return cons_ki_;
}
inline double TransMessage_PidConfigMessage::cons_ki() const {
  // @@protoc_insertion_point(field_get:b3console.TransMessage.PidConfigMessage.cons_ki)
  return _internal_cons_ki();
}
inline void TransMessage_PidConfigMessage::_internal_set_cons_ki(double value) {
  
  cons_ki_ = value;
}
inline void TransMessage_PidConfigMessage::set_cons_ki(double value) {
  _internal_set_cons_ki(value);
  // @@protoc_insertion_point(field_set:b3console.TransMessage.PidConfigMessage.cons_ki)
}

// double cons_kp = 6;
inline void TransMessage_PidConfigMessage::clear_cons_kp() {
  cons_kp_ = 0;
}
inline double TransMessage_PidConfigMessage::_internal_cons_kp() const {
  return cons_kp_;
}
inline double TransMessage_PidConfigMessage::cons_kp() const {
  // @@protoc_insertion_point(field_get:b3console.TransMessage.PidConfigMessage.cons_kp)
  return _internal_cons_kp();
}
inline void TransMessage_PidConfigMessage::_internal_set_cons_kp(double value) {
  
  cons_kp_ = value;
}
inline void TransMessage_PidConfigMessage::set_cons_kp(double value) {
  _internal_set_cons_kp(value);
  // @@protoc_insertion_point(field_set:b3console.TransMessage.PidConfigMessage.cons_kp)
}

// -------------------------------------------------------------------

// TransMessage

// .b3console.CanBusConfigMessage can_bus_config = 1;
inline bool TransMessage::_internal_has_can_bus_config() const {
  return this != internal_default_instance() && can_bus_config_ != nullptr;
}
inline bool TransMessage::has_can_bus_config() const {
  return _internal_has_can_bus_config();
}
inline void TransMessage::clear_can_bus_config() {
  if (GetArena() == nullptr && can_bus_config_ != nullptr) {
    delete can_bus_config_;
  }
  can_bus_config_ = nullptr;
}
inline const ::b3console::CanBusConfigMessage& TransMessage::_internal_can_bus_config() const {
  const ::b3console::CanBusConfigMessage* p = can_bus_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::CanBusConfigMessage*>(
      &::b3console::_CanBusConfigMessage_default_instance_);
}
inline const ::b3console::CanBusConfigMessage& TransMessage::can_bus_config() const {
  // @@protoc_insertion_point(field_get:b3console.TransMessage.can_bus_config)
  return _internal_can_bus_config();
}
inline void TransMessage::unsafe_arena_set_allocated_can_bus_config(
    ::b3console::CanBusConfigMessage* can_bus_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(can_bus_config_);
  }
  can_bus_config_ = can_bus_config;
  if (can_bus_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.TransMessage.can_bus_config)
}
inline ::b3console::CanBusConfigMessage* TransMessage::release_can_bus_config() {
  auto temp = unsafe_arena_release_can_bus_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::CanBusConfigMessage* TransMessage::unsafe_arena_release_can_bus_config() {
  // @@protoc_insertion_point(field_release:b3console.TransMessage.can_bus_config)
  
  ::b3console::CanBusConfigMessage* temp = can_bus_config_;
  can_bus_config_ = nullptr;
  return temp;
}
inline ::b3console::CanBusConfigMessage* TransMessage::_internal_mutable_can_bus_config() {
  
  if (can_bus_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::CanBusConfigMessage>(GetArena());
    can_bus_config_ = p;
  }
  return can_bus_config_;
}
inline ::b3console::CanBusConfigMessage* TransMessage::mutable_can_bus_config() {
  // @@protoc_insertion_point(field_mutable:b3console.TransMessage.can_bus_config)
  return _internal_mutable_can_bus_config();
}
inline void TransMessage::set_allocated_can_bus_config(::b3console::CanBusConfigMessage* can_bus_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete can_bus_config_;
  }
  if (can_bus_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(can_bus_config);
    if (message_arena != submessage_arena) {
      can_bus_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, can_bus_config, submessage_arena);
    }
    
  } else {
    
  }
  can_bus_config_ = can_bus_config;
  // @@protoc_insertion_point(field_set_allocated:b3console.TransMessage.can_bus_config)
}

// .b3console.TransMessage.Ems22AConfigMessage ems22a_config = 2;
inline bool TransMessage::_internal_has_ems22a_config() const {
  return this != internal_default_instance() && ems22a_config_ != nullptr;
}
inline bool TransMessage::has_ems22a_config() const {
  return _internal_has_ems22a_config();
}
inline void TransMessage::clear_ems22a_config() {
  if (GetArena() == nullptr && ems22a_config_ != nullptr) {
    delete ems22a_config_;
  }
  ems22a_config_ = nullptr;
}
inline const ::b3console::TransMessage_Ems22AConfigMessage& TransMessage::_internal_ems22a_config() const {
  const ::b3console::TransMessage_Ems22AConfigMessage* p = ems22a_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::TransMessage_Ems22AConfigMessage*>(
      &::b3console::_TransMessage_Ems22AConfigMessage_default_instance_);
}
inline const ::b3console::TransMessage_Ems22AConfigMessage& TransMessage::ems22a_config() const {
  // @@protoc_insertion_point(field_get:b3console.TransMessage.ems22a_config)
  return _internal_ems22a_config();
}
inline void TransMessage::unsafe_arena_set_allocated_ems22a_config(
    ::b3console::TransMessage_Ems22AConfigMessage* ems22a_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ems22a_config_);
  }
  ems22a_config_ = ems22a_config;
  if (ems22a_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.TransMessage.ems22a_config)
}
inline ::b3console::TransMessage_Ems22AConfigMessage* TransMessage::release_ems22a_config() {
  auto temp = unsafe_arena_release_ems22a_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::TransMessage_Ems22AConfigMessage* TransMessage::unsafe_arena_release_ems22a_config() {
  // @@protoc_insertion_point(field_release:b3console.TransMessage.ems22a_config)
  
  ::b3console::TransMessage_Ems22AConfigMessage* temp = ems22a_config_;
  ems22a_config_ = nullptr;
  return temp;
}
inline ::b3console::TransMessage_Ems22AConfigMessage* TransMessage::_internal_mutable_ems22a_config() {
  
  if (ems22a_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::TransMessage_Ems22AConfigMessage>(GetArena());
    ems22a_config_ = p;
  }
  return ems22a_config_;
}
inline ::b3console::TransMessage_Ems22AConfigMessage* TransMessage::mutable_ems22a_config() {
  // @@protoc_insertion_point(field_mutable:b3console.TransMessage.ems22a_config)
  return _internal_mutable_ems22a_config();
}
inline void TransMessage::set_allocated_ems22a_config(::b3console::TransMessage_Ems22AConfigMessage* ems22a_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ems22a_config_;
  }
  if (ems22a_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ems22a_config);
    if (message_arena != submessage_arena) {
      ems22a_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ems22a_config, submessage_arena);
    }
    
  } else {
    
  }
  ems22a_config_ = ems22a_config;
  // @@protoc_insertion_point(field_set_allocated:b3console.TransMessage.ems22a_config)
}

// .b3console.TransMessage.Vnh5019ConfigMessage vnh5019_config = 3;
inline bool TransMessage::_internal_has_vnh5019_config() const {
  return this != internal_default_instance() && vnh5019_config_ != nullptr;
}
inline bool TransMessage::has_vnh5019_config() const {
  return _internal_has_vnh5019_config();
}
inline void TransMessage::clear_vnh5019_config() {
  if (GetArena() == nullptr && vnh5019_config_ != nullptr) {
    delete vnh5019_config_;
  }
  vnh5019_config_ = nullptr;
}
inline const ::b3console::TransMessage_Vnh5019ConfigMessage& TransMessage::_internal_vnh5019_config() const {
  const ::b3console::TransMessage_Vnh5019ConfigMessage* p = vnh5019_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::TransMessage_Vnh5019ConfigMessage*>(
      &::b3console::_TransMessage_Vnh5019ConfigMessage_default_instance_);
}
inline const ::b3console::TransMessage_Vnh5019ConfigMessage& TransMessage::vnh5019_config() const {
  // @@protoc_insertion_point(field_get:b3console.TransMessage.vnh5019_config)
  return _internal_vnh5019_config();
}
inline void TransMessage::unsafe_arena_set_allocated_vnh5019_config(
    ::b3console::TransMessage_Vnh5019ConfigMessage* vnh5019_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vnh5019_config_);
  }
  vnh5019_config_ = vnh5019_config;
  if (vnh5019_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.TransMessage.vnh5019_config)
}
inline ::b3console::TransMessage_Vnh5019ConfigMessage* TransMessage::release_vnh5019_config() {
  auto temp = unsafe_arena_release_vnh5019_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::TransMessage_Vnh5019ConfigMessage* TransMessage::unsafe_arena_release_vnh5019_config() {
  // @@protoc_insertion_point(field_release:b3console.TransMessage.vnh5019_config)
  
  ::b3console::TransMessage_Vnh5019ConfigMessage* temp = vnh5019_config_;
  vnh5019_config_ = nullptr;
  return temp;
}
inline ::b3console::TransMessage_Vnh5019ConfigMessage* TransMessage::_internal_mutable_vnh5019_config() {
  
  if (vnh5019_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::TransMessage_Vnh5019ConfigMessage>(GetArena());
    vnh5019_config_ = p;
  }
  return vnh5019_config_;
}
inline ::b3console::TransMessage_Vnh5019ConfigMessage* TransMessage::mutable_vnh5019_config() {
  // @@protoc_insertion_point(field_mutable:b3console.TransMessage.vnh5019_config)
  return _internal_mutable_vnh5019_config();
}
inline void TransMessage::set_allocated_vnh5019_config(::b3console::TransMessage_Vnh5019ConfigMessage* vnh5019_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vnh5019_config_;
  }
  if (vnh5019_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vnh5019_config);
    if (message_arena != submessage_arena) {
      vnh5019_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vnh5019_config, submessage_arena);
    }
    
  } else {
    
  }
  vnh5019_config_ = vnh5019_config;
  // @@protoc_insertion_point(field_set_allocated:b3console.TransMessage.vnh5019_config)
}

// .b3console.TransMessage.PidConfigMessage pid_config = 4;
inline bool TransMessage::_internal_has_pid_config() const {
  return this != internal_default_instance() && pid_config_ != nullptr;
}
inline bool TransMessage::has_pid_config() const {
  return _internal_has_pid_config();
}
inline void TransMessage::clear_pid_config() {
  if (GetArena() == nullptr && pid_config_ != nullptr) {
    delete pid_config_;
  }
  pid_config_ = nullptr;
}
inline const ::b3console::TransMessage_PidConfigMessage& TransMessage::_internal_pid_config() const {
  const ::b3console::TransMessage_PidConfigMessage* p = pid_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::b3console::TransMessage_PidConfigMessage*>(
      &::b3console::_TransMessage_PidConfigMessage_default_instance_);
}
inline const ::b3console::TransMessage_PidConfigMessage& TransMessage::pid_config() const {
  // @@protoc_insertion_point(field_get:b3console.TransMessage.pid_config)
  return _internal_pid_config();
}
inline void TransMessage::unsafe_arena_set_allocated_pid_config(
    ::b3console::TransMessage_PidConfigMessage* pid_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pid_config_);
  }
  pid_config_ = pid_config;
  if (pid_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:b3console.TransMessage.pid_config)
}
inline ::b3console::TransMessage_PidConfigMessage* TransMessage::release_pid_config() {
  auto temp = unsafe_arena_release_pid_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::b3console::TransMessage_PidConfigMessage* TransMessage::unsafe_arena_release_pid_config() {
  // @@protoc_insertion_point(field_release:b3console.TransMessage.pid_config)
  
  ::b3console::TransMessage_PidConfigMessage* temp = pid_config_;
  pid_config_ = nullptr;
  return temp;
}
inline ::b3console::TransMessage_PidConfigMessage* TransMessage::_internal_mutable_pid_config() {
  
  if (pid_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::b3console::TransMessage_PidConfigMessage>(GetArena());
    pid_config_ = p;
  }
  return pid_config_;
}
inline ::b3console::TransMessage_PidConfigMessage* TransMessage::mutable_pid_config() {
  // @@protoc_insertion_point(field_mutable:b3console.TransMessage.pid_config)
  return _internal_mutable_pid_config();
}
inline void TransMessage::set_allocated_pid_config(::b3console::TransMessage_PidConfigMessage* pid_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pid_config_;
  }
  if (pid_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pid_config);
    if (message_arena != submessage_arena) {
      pid_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pid_config, submessage_arena);
    }
    
  } else {
    
  }
  pid_config_ = pid_config;
  // @@protoc_insertion_point(field_set_allocated:b3console.TransMessage.pid_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace b3console

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::b3console::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::b3console::Type>() {
  return ::b3console::Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_5fmessage_2eproto
