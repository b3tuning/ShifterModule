// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_message.proto

#include "config_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CanBusConfigMessage_config_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DoorMessage_config_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoorMessage_MirrorActionConfigMessage_config_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoorMessage_MirrorSelectConfigMessage_config_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoorMessage_WindowActionConfigMessage_config_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ShifterMessage_config_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShifterMessage_IndicatorConfigMessage_config_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShifterMessage_MelexisConfigMessage_config_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShifterMessage_ShifterPositionMessage_config_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TransMessage_config_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMessage_Ems22AConfigMessage_config_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMessage_PidConfigMessage_config_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMessage_Vnh5019ConfigMessage_config_5fmessage_2eproto;
namespace b3console {
class ConfigBaseMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigBaseMessage> _instance;
} _ConfigBaseMessage_default_instance_;
class DoorMessage_MirrorActionConfigMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoorMessage_MirrorActionConfigMessage> _instance;
} _DoorMessage_MirrorActionConfigMessage_default_instance_;
class DoorMessage_MirrorSelectConfigMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoorMessage_MirrorSelectConfigMessage> _instance;
} _DoorMessage_MirrorSelectConfigMessage_default_instance_;
class DoorMessage_WindowActionConfigMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoorMessage_WindowActionConfigMessage> _instance;
} _DoorMessage_WindowActionConfigMessage_default_instance_;
class DoorMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoorMessage> _instance;
} _DoorMessage_default_instance_;
class CanBusConfigMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CanBusConfigMessage> _instance;
} _CanBusConfigMessage_default_instance_;
class ShifterMessage_IndicatorConfigMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShifterMessage_IndicatorConfigMessage> _instance;
} _ShifterMessage_IndicatorConfigMessage_default_instance_;
class ShifterMessage_MelexisConfigMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShifterMessage_MelexisConfigMessage> _instance;
} _ShifterMessage_MelexisConfigMessage_default_instance_;
class ShifterMessage_ShifterPositionMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShifterMessage_ShifterPositionMessage> _instance;
} _ShifterMessage_ShifterPositionMessage_default_instance_;
class ShifterMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShifterMessage> _instance;
} _ShifterMessage_default_instance_;
class TransMessage_Ems22AConfigMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMessage_Ems22AConfigMessage> _instance;
} _TransMessage_Ems22AConfigMessage_default_instance_;
class TransMessage_Vnh5019ConfigMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMessage_Vnh5019ConfigMessage> _instance;
} _TransMessage_Vnh5019ConfigMessage_default_instance_;
class TransMessage_PidConfigMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMessage_PidConfigMessage> _instance;
} _TransMessage_PidConfigMessage_default_instance_;
class TransMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMessage> _instance;
} _TransMessage_default_instance_;
}  // namespace b3console
static void InitDefaultsscc_info_CanBusConfigMessage_config_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::b3console::_CanBusConfigMessage_default_instance_;
    new (ptr) ::b3console::CanBusConfigMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::b3console::CanBusConfigMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CanBusConfigMessage_config_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CanBusConfigMessage_config_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_ConfigBaseMessage_config_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::b3console::_ConfigBaseMessage_default_instance_;
    new (ptr) ::b3console::ConfigBaseMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::b3console::ConfigBaseMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConfigBaseMessage_config_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ConfigBaseMessage_config_5fmessage_2eproto}, {
      &scc_info_DoorMessage_config_5fmessage_2eproto.base,
      &scc_info_ShifterMessage_config_5fmessage_2eproto.base,
      &scc_info_TransMessage_config_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_DoorMessage_config_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::b3console::_DoorMessage_default_instance_;
    new (ptr) ::b3console::DoorMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::b3console::DoorMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DoorMessage_config_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DoorMessage_config_5fmessage_2eproto}, {
      &scc_info_DoorMessage_MirrorActionConfigMessage_config_5fmessage_2eproto.base,
      &scc_info_DoorMessage_MirrorSelectConfigMessage_config_5fmessage_2eproto.base,
      &scc_info_DoorMessage_WindowActionConfigMessage_config_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_DoorMessage_MirrorActionConfigMessage_config_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::b3console::_DoorMessage_MirrorActionConfigMessage_default_instance_;
    new (ptr) ::b3console::DoorMessage_MirrorActionConfigMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::b3console::DoorMessage_MirrorActionConfigMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoorMessage_MirrorActionConfigMessage_config_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DoorMessage_MirrorActionConfigMessage_config_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_DoorMessage_MirrorSelectConfigMessage_config_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::b3console::_DoorMessage_MirrorSelectConfigMessage_default_instance_;
    new (ptr) ::b3console::DoorMessage_MirrorSelectConfigMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::b3console::DoorMessage_MirrorSelectConfigMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoorMessage_MirrorSelectConfigMessage_config_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DoorMessage_MirrorSelectConfigMessage_config_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_DoorMessage_WindowActionConfigMessage_config_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::b3console::_DoorMessage_WindowActionConfigMessage_default_instance_;
    new (ptr) ::b3console::DoorMessage_WindowActionConfigMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::b3console::DoorMessage_WindowActionConfigMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoorMessage_WindowActionConfigMessage_config_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DoorMessage_WindowActionConfigMessage_config_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_ShifterMessage_config_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::b3console::_ShifterMessage_default_instance_;
    new (ptr) ::b3console::ShifterMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::b3console::ShifterMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ShifterMessage_config_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ShifterMessage_config_5fmessage_2eproto}, {
      &scc_info_CanBusConfigMessage_config_5fmessage_2eproto.base,
      &scc_info_ShifterMessage_IndicatorConfigMessage_config_5fmessage_2eproto.base,
      &scc_info_ShifterMessage_MelexisConfigMessage_config_5fmessage_2eproto.base,
      &scc_info_ShifterMessage_ShifterPositionMessage_config_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_ShifterMessage_IndicatorConfigMessage_config_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::b3console::_ShifterMessage_IndicatorConfigMessage_default_instance_;
    new (ptr) ::b3console::ShifterMessage_IndicatorConfigMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::b3console::ShifterMessage_IndicatorConfigMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShifterMessage_IndicatorConfigMessage_config_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShifterMessage_IndicatorConfigMessage_config_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_ShifterMessage_MelexisConfigMessage_config_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::b3console::_ShifterMessage_MelexisConfigMessage_default_instance_;
    new (ptr) ::b3console::ShifterMessage_MelexisConfigMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::b3console::ShifterMessage_MelexisConfigMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShifterMessage_MelexisConfigMessage_config_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShifterMessage_MelexisConfigMessage_config_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_ShifterMessage_ShifterPositionMessage_config_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::b3console::_ShifterMessage_ShifterPositionMessage_default_instance_;
    new (ptr) ::b3console::ShifterMessage_ShifterPositionMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::b3console::ShifterMessage_ShifterPositionMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShifterMessage_ShifterPositionMessage_config_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShifterMessage_ShifterPositionMessage_config_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_TransMessage_config_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::b3console::_TransMessage_default_instance_;
    new (ptr) ::b3console::TransMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::b3console::TransMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TransMessage_config_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_TransMessage_config_5fmessage_2eproto}, {
      &scc_info_CanBusConfigMessage_config_5fmessage_2eproto.base,
      &scc_info_TransMessage_Ems22AConfigMessage_config_5fmessage_2eproto.base,
      &scc_info_TransMessage_Vnh5019ConfigMessage_config_5fmessage_2eproto.base,
      &scc_info_TransMessage_PidConfigMessage_config_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_TransMessage_Ems22AConfigMessage_config_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::b3console::_TransMessage_Ems22AConfigMessage_default_instance_;
    new (ptr) ::b3console::TransMessage_Ems22AConfigMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::b3console::TransMessage_Ems22AConfigMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMessage_Ems22AConfigMessage_config_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransMessage_Ems22AConfigMessage_config_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_TransMessage_PidConfigMessage_config_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::b3console::_TransMessage_PidConfigMessage_default_instance_;
    new (ptr) ::b3console::TransMessage_PidConfigMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::b3console::TransMessage_PidConfigMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMessage_PidConfigMessage_config_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransMessage_PidConfigMessage_config_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_TransMessage_Vnh5019ConfigMessage_config_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::b3console::_TransMessage_Vnh5019ConfigMessage_default_instance_;
    new (ptr) ::b3console::TransMessage_Vnh5019ConfigMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::b3console::TransMessage_Vnh5019ConfigMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMessage_Vnh5019ConfigMessage_config_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransMessage_Vnh5019ConfigMessage_config_5fmessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_config_5fmessage_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_config_5fmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_config_5fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_config_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::b3console::ConfigBaseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::b3console::ConfigBaseMessage, type_),
  PROTOBUF_FIELD_OFFSET(::b3console::ConfigBaseMessage, door_),
  PROTOBUF_FIELD_OFFSET(::b3console::ConfigBaseMessage, shifter_),
  PROTOBUF_FIELD_OFFSET(::b3console::ConfigBaseMessage, trans_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorActionConfigMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorActionConfigMessage, down_max_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorActionConfigMessage, down_min_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorActionConfigMessage, left_max_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorActionConfigMessage, left_min_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorActionConfigMessage, right_max_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorActionConfigMessage, right_min_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorActionConfigMessage, up_max_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorActionConfigMessage, up_min_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorSelectConfigMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorSelectConfigMessage, driver_max_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorSelectConfigMessage, driver_min_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorSelectConfigMessage, fold_max_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorSelectConfigMessage, fold_min_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorSelectConfigMessage, passenger_max_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_MirrorSelectConfigMessage, passenger_min_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_WindowActionConfigMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_WindowActionConfigMessage, auto_down_max_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_WindowActionConfigMessage, auto_down_min_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_WindowActionConfigMessage, auto_up_max_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_WindowActionConfigMessage, auto_up_min_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_WindowActionConfigMessage, down_max_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_WindowActionConfigMessage, down_min_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_WindowActionConfigMessage, up_max_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage_WindowActionConfigMessage, up_min_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage, mirror_action_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage, mirror_select_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage, window_action_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage, driver_window_max_current_),
  PROTOBUF_FIELD_OFFSET(::b3console::DoorMessage, passenger_window_max_current_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::b3console::CanBusConfigMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::b3console::CanBusConfigMessage, addr_tx_),
  PROTOBUF_FIELD_OFFSET(::b3console::CanBusConfigMessage, boot_rx_),
  PROTOBUF_FIELD_OFFSET(::b3console::CanBusConfigMessage, boot_tx_),
  PROTOBUF_FIELD_OFFSET(::b3console::CanBusConfigMessage, intvl_tx_),
  PROTOBUF_FIELD_OFFSET(::b3console::CanBusConfigMessage, mask0_),
  PROTOBUF_FIELD_OFFSET(::b3console::CanBusConfigMessage, filter0_0_),
  PROTOBUF_FIELD_OFFSET(::b3console::CanBusConfigMessage, filter0_1_),
  PROTOBUF_FIELD_OFFSET(::b3console::CanBusConfigMessage, mask1_),
  PROTOBUF_FIELD_OFFSET(::b3console::CanBusConfigMessage, filter1_0_),
  PROTOBUF_FIELD_OFFSET(::b3console::CanBusConfigMessage, filter1_1_),
  PROTOBUF_FIELD_OFFSET(::b3console::CanBusConfigMessage, filter1_2_),
  PROTOBUF_FIELD_OFFSET(::b3console::CanBusConfigMessage, filter1_3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage_IndicatorConfigMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage_IndicatorConfigMessage, brightness_),
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage_IndicatorConfigMessage, color_),
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage_IndicatorConfigMessage, wait_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage_MelexisConfigMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage_MelexisConfigMessage, range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage_ShifterPositionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage_ShifterPositionMessage, x1_),
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage_ShifterPositionMessage, y1_),
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage_ShifterPositionMessage, x2_),
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage_ShifterPositionMessage, y2_),
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage_ShifterPositionMessage, enum_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage, can_bus_config_),
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage, indicator_config_),
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage, melexis_config_),
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage, park_config_),
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage, reverse_config_),
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage, neutral_config_),
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage, drive_config_),
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage, manual_config_),
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage, up_config_),
  PROTOBUF_FIELD_OFFSET(::b3console::ShifterMessage, down_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage_Ems22AConfigMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage_Ems22AConfigMessage, enc_max_),
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage_Ems22AConfigMessage, enc_min_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage_Vnh5019ConfigMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage_Vnh5019ConfigMessage, max_current_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage_PidConfigMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage_PidConfigMessage, agg_kd_),
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage_PidConfigMessage, agg_ki_),
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage_PidConfigMessage, agg_kp_),
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage_PidConfigMessage, cons_kd_),
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage_PidConfigMessage, cons_ki_),
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage_PidConfigMessage, cons_kp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage, can_bus_config_),
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage, ems22a_config_),
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage, vnh5019_config_),
  PROTOBUF_FIELD_OFFSET(::b3console::TransMessage, pid_config_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::b3console::ConfigBaseMessage)},
  { 9, -1, sizeof(::b3console::DoorMessage_MirrorActionConfigMessage)},
  { 22, -1, sizeof(::b3console::DoorMessage_MirrorSelectConfigMessage)},
  { 33, -1, sizeof(::b3console::DoorMessage_WindowActionConfigMessage)},
  { 46, -1, sizeof(::b3console::DoorMessage)},
  { 56, -1, sizeof(::b3console::CanBusConfigMessage)},
  { 73, -1, sizeof(::b3console::ShifterMessage_IndicatorConfigMessage)},
  { 81, -1, sizeof(::b3console::ShifterMessage_MelexisConfigMessage)},
  { 87, -1, sizeof(::b3console::ShifterMessage_ShifterPositionMessage)},
  { 97, -1, sizeof(::b3console::ShifterMessage)},
  { 112, -1, sizeof(::b3console::TransMessage_Ems22AConfigMessage)},
  { 119, -1, sizeof(::b3console::TransMessage_Vnh5019ConfigMessage)},
  { 125, -1, sizeof(::b3console::TransMessage_PidConfigMessage)},
  { 136, -1, sizeof(::b3console::TransMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::b3console::_ConfigBaseMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::b3console::_DoorMessage_MirrorActionConfigMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::b3console::_DoorMessage_MirrorSelectConfigMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::b3console::_DoorMessage_WindowActionConfigMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::b3console::_DoorMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::b3console::_CanBusConfigMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::b3console::_ShifterMessage_IndicatorConfigMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::b3console::_ShifterMessage_MelexisConfigMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::b3console::_ShifterMessage_ShifterPositionMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::b3console::_ShifterMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::b3console::_TransMessage_Ems22AConfigMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::b3console::_TransMessage_Vnh5019ConfigMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::b3console::_TransMessage_PidConfigMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::b3console::_TransMessage_default_instance_),
};

const char descriptor_table_protodef_config_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024config_message.proto\022\tb3console\"\254\001\n\021Co"
  "nfigBaseMessage\022\035\n\004type\030\001 \001(\0162\017.b3consol"
  "e.Type\022$\n\004door\030\002 \001(\0132\026.b3console.DoorMes"
  "sage\022*\n\007shifter\030\003 \001(\0132\031.b3console.Shifte"
  "rMessage\022&\n\005trans\030\004 \001(\0132\027.b3console.Tran"
  "sMessage\"\257\006\n\013DoorMessage\022G\n\rmirror_actio"
  "n\030\001 \001(\01320.b3console.DoorMessage.MirrorAc"
  "tionConfigMessage\022G\n\rmirror_select\030\002 \001(\013"
  "20.b3console.DoorMessage.MirrorSelectCon"
  "figMessage\022G\n\rwindow_action\030\003 \001(\01320.b3co"
  "nsole.DoorMessage.WindowActionConfigMess"
  "age\022!\n\031driver_window_max_current\030\004 \001(\005\022$"
  "\n\034passenger_window_max_current\030\005 \001(\005\032\251\001\n"
  "\031MirrorActionConfigMessage\022\020\n\010down_max\030\001"
  " \001(\005\022\020\n\010down_min\030\002 \001(\005\022\020\n\010left_max\030\003 \001(\005"
  "\022\020\n\010left_min\030\004 \001(\005\022\021\n\tright_max\030\005 \001(\005\022\021\n"
  "\tright_min\030\006 \001(\005\022\016\n\006up_max\030\007 \001(\005\022\016\n\006up_m"
  "in\030\010 \001(\005\032\225\001\n\031MirrorSelectConfigMessage\022\022"
  "\n\ndriver_max\030\001 \001(\005\022\022\n\ndriver_min\030\002 \001(\005\022\020"
  "\n\010fold_max\030\003 \001(\005\022\020\n\010fold_min\030\004 \001(\005\022\025\n\rpa"
  "ssenger_max\030\005 \001(\005\022\025\n\rpassenger_min\030\006 \001(\005"
  "\032\267\001\n\031WindowActionConfigMessage\022\025\n\rauto_d"
  "own_max\030\001 \001(\005\022\025\n\rauto_down_min\030\002 \001(\005\022\023\n\013"
  "auto_up_max\030\003 \001(\005\022\023\n\013auto_up_min\030\004 \001(\005\022\020"
  "\n\010down_max\030\005 \001(\005\022\020\n\010down_min\030\006 \001(\005\022\016\n\006up"
  "_max\030\007 \001(\005\022\016\n\006up_min\030\010 \001(\005\"\352\001\n\023CanBusCon"
  "figMessage\022\017\n\007addr_tx\030\001 \001(\005\022\017\n\007boot_rx\030\002"
  " \001(\005\022\017\n\007boot_tx\030\003 \001(\005\022\020\n\010intvl_tx\030\004 \001(\005\022"
  "\r\n\005mask0\030\005 \001(\005\022\021\n\tfilter0_0\030\006 \001(\005\022\021\n\tfil"
  "ter0_1\030\007 \001(\005\022\r\n\005mask1\030\010 \001(\005\022\021\n\tfilter1_0"
  "\030\t \001(\005\022\021\n\tfilter1_1\030\n \001(\005\022\021\n\tfilter1_2\030\013"
  " \001(\005\022\021\n\tfilter1_3\030\014 \001(\005\"\242\007\n\016ShifterMessa"
  "ge\0226\n\016can_bus_config\030\001 \001(\0132\036.b3console.C"
  "anBusConfigMessage\022J\n\020indicator_config\030\002"
  " \001(\01320.b3console.ShifterMessage.Indicato"
  "rConfigMessage\022F\n\016melexis_config\030\003 \001(\0132."
  ".b3console.ShifterMessage.MelexisConfigM"
  "essage\022E\n\013park_config\030\004 \001(\01320.b3console."
  "ShifterMessage.ShifterPositionMessage\022H\n"
  "\016reverse_config\030\005 \001(\01320.b3console.Shifte"
  "rMessage.ShifterPositionMessage\022H\n\016neutr"
  "al_config\030\006 \001(\01320.b3console.ShifterMessa"
  "ge.ShifterPositionMessage\022F\n\014drive_confi"
  "g\030\007 \001(\01320.b3console.ShifterMessage.Shift"
  "erPositionMessage\022G\n\rmanual_config\030\010 \001(\013"
  "20.b3console.ShifterMessage.ShifterPosit"
  "ionMessage\022C\n\tup_config\030\t \001(\01320.b3consol"
  "e.ShifterMessage.ShifterPositionMessage\022"
  "E\n\013down_config\030\n \001(\01320.b3console.Shifter"
  "Message.ShifterPositionMessage\032I\n\026Indica"
  "torConfigMessage\022\022\n\nbrightness\030\001 \001(\005\022\r\n\005"
  "color\030\002 \001(\005\022\014\n\004wait\030\003 \001(\005\032%\n\024MelexisConf"
  "igMessage\022\r\n\005range\030\001 \001(\005\032Z\n\026ShifterPosit"
  "ionMessage\022\n\n\002x1\030\001 \001(\005\022\n\n\002y1\030\002 \001(\005\022\n\n\002x2"
  "\030\003 \001(\005\022\n\n\002y2\030\004 \001(\005\022\020\n\010enum_val\030\005 \001(\005\"\353\003\n"
  "\014TransMessage\0226\n\016can_bus_config\030\001 \001(\0132\036."
  "b3console.CanBusConfigMessage\022B\n\rems22a_"
  "config\030\002 \001(\0132+.b3console.TransMessage.Em"
  "s22AConfigMessage\022D\n\016vnh5019_config\030\003 \001("
  "\0132,.b3console.TransMessage.Vnh5019Config"
  "Message\022<\n\npid_config\030\004 \001(\0132(.b3console."
  "TransMessage.PidConfigMessage\0327\n\023Ems22AC"
  "onfigMessage\022\017\n\007enc_max\030\001 \001(\005\022\017\n\007enc_min"
  "\030\002 \001(\005\032+\n\024Vnh5019ConfigMessage\022\023\n\013max_cu"
  "rrent\030\001 \001(\005\032u\n\020PidConfigMessage\022\016\n\006agg_k"
  "d\030\001 \001(\001\022\016\n\006agg_ki\030\002 \001(\001\022\016\n\006agg_kp\030\003 \001(\001\022"
  "\017\n\007cons_kd\030\004 \001(\001\022\017\n\007cons_ki\030\005 \001(\001\022\017\n\007con"
  "s_kp\030\006 \001(\001*(\n\004Type\022\010\n\004DOOR\020\000\022\013\n\007SHIFTER\020"
  "\001\022\t\n\005TRANS\020\002B8\n\'com.b3tuning.b3console.s"
  "ervice.protobufB\rConfigMessageb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_config_5fmessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_config_5fmessage_2eproto_sccs[14] = {
  &scc_info_CanBusConfigMessage_config_5fmessage_2eproto.base,
  &scc_info_ConfigBaseMessage_config_5fmessage_2eproto.base,
  &scc_info_DoorMessage_config_5fmessage_2eproto.base,
  &scc_info_DoorMessage_MirrorActionConfigMessage_config_5fmessage_2eproto.base,
  &scc_info_DoorMessage_MirrorSelectConfigMessage_config_5fmessage_2eproto.base,
  &scc_info_DoorMessage_WindowActionConfigMessage_config_5fmessage_2eproto.base,
  &scc_info_ShifterMessage_config_5fmessage_2eproto.base,
  &scc_info_ShifterMessage_IndicatorConfigMessage_config_5fmessage_2eproto.base,
  &scc_info_ShifterMessage_MelexisConfigMessage_config_5fmessage_2eproto.base,
  &scc_info_ShifterMessage_ShifterPositionMessage_config_5fmessage_2eproto.base,
  &scc_info_TransMessage_config_5fmessage_2eproto.base,
  &scc_info_TransMessage_Ems22AConfigMessage_config_5fmessage_2eproto.base,
  &scc_info_TransMessage_PidConfigMessage_config_5fmessage_2eproto.base,
  &scc_info_TransMessage_Vnh5019ConfigMessage_config_5fmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_config_5fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_5fmessage_2eproto = {
  false, false, descriptor_table_protodef_config_5fmessage_2eproto, "config_message.proto", 2798,
  &descriptor_table_config_5fmessage_2eproto_once, descriptor_table_config_5fmessage_2eproto_sccs, descriptor_table_config_5fmessage_2eproto_deps, 14, 0,
  schemas, file_default_instances, TableStruct_config_5fmessage_2eproto::offsets,
  file_level_metadata_config_5fmessage_2eproto, 14, file_level_enum_descriptors_config_5fmessage_2eproto, file_level_service_descriptors_config_5fmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_config_5fmessage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_config_5fmessage_2eproto)), true);
namespace b3console {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fmessage_2eproto);
  return file_level_enum_descriptors_config_5fmessage_2eproto[0];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ConfigBaseMessage::InitAsDefaultInstance() {
  ::b3console::_ConfigBaseMessage_default_instance_._instance.get_mutable()->door_ = const_cast< ::b3console::DoorMessage*>(
      ::b3console::DoorMessage::internal_default_instance());
  ::b3console::_ConfigBaseMessage_default_instance_._instance.get_mutable()->shifter_ = const_cast< ::b3console::ShifterMessage*>(
      ::b3console::ShifterMessage::internal_default_instance());
  ::b3console::_ConfigBaseMessage_default_instance_._instance.get_mutable()->trans_ = const_cast< ::b3console::TransMessage*>(
      ::b3console::TransMessage::internal_default_instance());
}
class ConfigBaseMessage::_Internal {
 public:
  static const ::b3console::DoorMessage& door(const ConfigBaseMessage* msg);
  static const ::b3console::ShifterMessage& shifter(const ConfigBaseMessage* msg);
  static const ::b3console::TransMessage& trans(const ConfigBaseMessage* msg);
};

const ::b3console::DoorMessage&
ConfigBaseMessage::_Internal::door(const ConfigBaseMessage* msg) {
  return *msg->door_;
}
const ::b3console::ShifterMessage&
ConfigBaseMessage::_Internal::shifter(const ConfigBaseMessage* msg) {
  return *msg->shifter_;
}
const ::b3console::TransMessage&
ConfigBaseMessage::_Internal::trans(const ConfigBaseMessage* msg) {
  return *msg->trans_;
}
ConfigBaseMessage::ConfigBaseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:b3console.ConfigBaseMessage)
}
ConfigBaseMessage::ConfigBaseMessage(const ConfigBaseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_door()) {
    door_ = new ::b3console::DoorMessage(*from.door_);
  } else {
    door_ = nullptr;
  }
  if (from._internal_has_shifter()) {
    shifter_ = new ::b3console::ShifterMessage(*from.shifter_);
  } else {
    shifter_ = nullptr;
  }
  if (from._internal_has_trans()) {
    trans_ = new ::b3console::TransMessage(*from.trans_);
  } else {
    trans_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:b3console.ConfigBaseMessage)
}

void ConfigBaseMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigBaseMessage_config_5fmessage_2eproto.base);
  ::memset(&door_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&door_)) + sizeof(type_));
}

ConfigBaseMessage::~ConfigBaseMessage() {
  // @@protoc_insertion_point(destructor:b3console.ConfigBaseMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigBaseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete door_;
  if (this != internal_default_instance()) delete shifter_;
  if (this != internal_default_instance()) delete trans_;
}

void ConfigBaseMessage::ArenaDtor(void* object) {
  ConfigBaseMessage* _this = reinterpret_cast< ConfigBaseMessage* >(object);
  (void)_this;
}
void ConfigBaseMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigBaseMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigBaseMessage& ConfigBaseMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigBaseMessage_config_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void ConfigBaseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:b3console.ConfigBaseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && door_ != nullptr) {
    delete door_;
  }
  door_ = nullptr;
  if (GetArena() == nullptr && shifter_ != nullptr) {
    delete shifter_;
  }
  shifter_ = nullptr;
  if (GetArena() == nullptr && trans_ != nullptr) {
    delete trans_;
  }
  trans_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigBaseMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .b3console.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::b3console::Type>(val));
        } else goto handle_unusual;
        continue;
      // .b3console.DoorMessage door = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_door(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.ShifterMessage shifter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shifter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.TransMessage trans = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_trans(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigBaseMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:b3console.ConfigBaseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .b3console.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .b3console.DoorMessage door = 2;
  if (this->has_door()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::door(this), target, stream);
  }

  // .b3console.ShifterMessage shifter = 3;
  if (this->has_shifter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shifter(this), target, stream);
  }

  // .b3console.TransMessage trans = 4;
  if (this->has_trans()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::trans(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b3console.ConfigBaseMessage)
  return target;
}

size_t ConfigBaseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b3console.ConfigBaseMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .b3console.DoorMessage door = 2;
  if (this->has_door()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *door_);
  }

  // .b3console.ShifterMessage shifter = 3;
  if (this->has_shifter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shifter_);
  }

  // .b3console.TransMessage trans = 4;
  if (this->has_trans()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trans_);
  }

  // .b3console.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigBaseMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b3console.ConfigBaseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigBaseMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigBaseMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b3console.ConfigBaseMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b3console.ConfigBaseMessage)
    MergeFrom(*source);
  }
}

void ConfigBaseMessage::MergeFrom(const ConfigBaseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b3console.ConfigBaseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_door()) {
    _internal_mutable_door()->::b3console::DoorMessage::MergeFrom(from._internal_door());
  }
  if (from.has_shifter()) {
    _internal_mutable_shifter()->::b3console::ShifterMessage::MergeFrom(from._internal_shifter());
  }
  if (from.has_trans()) {
    _internal_mutable_trans()->::b3console::TransMessage::MergeFrom(from._internal_trans());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ConfigBaseMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b3console.ConfigBaseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigBaseMessage::CopyFrom(const ConfigBaseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b3console.ConfigBaseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigBaseMessage::IsInitialized() const {
  return true;
}

void ConfigBaseMessage::InternalSwap(ConfigBaseMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigBaseMessage, type_)
      + sizeof(ConfigBaseMessage::type_)
      - PROTOBUF_FIELD_OFFSET(ConfigBaseMessage, door_)>(
          reinterpret_cast<char*>(&door_),
          reinterpret_cast<char*>(&other->door_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigBaseMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DoorMessage_MirrorActionConfigMessage::InitAsDefaultInstance() {
}
class DoorMessage_MirrorActionConfigMessage::_Internal {
 public:
};

DoorMessage_MirrorActionConfigMessage::DoorMessage_MirrorActionConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:b3console.DoorMessage.MirrorActionConfigMessage)
}
DoorMessage_MirrorActionConfigMessage::DoorMessage_MirrorActionConfigMessage(const DoorMessage_MirrorActionConfigMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&down_max_, &from.down_max_,
    static_cast<size_t>(reinterpret_cast<char*>(&up_min_) -
    reinterpret_cast<char*>(&down_max_)) + sizeof(up_min_));
  // @@protoc_insertion_point(copy_constructor:b3console.DoorMessage.MirrorActionConfigMessage)
}

void DoorMessage_MirrorActionConfigMessage::SharedCtor() {
  ::memset(&down_max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&up_min_) -
      reinterpret_cast<char*>(&down_max_)) + sizeof(up_min_));
}

DoorMessage_MirrorActionConfigMessage::~DoorMessage_MirrorActionConfigMessage() {
  // @@protoc_insertion_point(destructor:b3console.DoorMessage.MirrorActionConfigMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoorMessage_MirrorActionConfigMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoorMessage_MirrorActionConfigMessage::ArenaDtor(void* object) {
  DoorMessage_MirrorActionConfigMessage* _this = reinterpret_cast< DoorMessage_MirrorActionConfigMessage* >(object);
  (void)_this;
}
void DoorMessage_MirrorActionConfigMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoorMessage_MirrorActionConfigMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoorMessage_MirrorActionConfigMessage& DoorMessage_MirrorActionConfigMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoorMessage_MirrorActionConfigMessage_config_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void DoorMessage_MirrorActionConfigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:b3console.DoorMessage.MirrorActionConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&down_max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&up_min_) -
      reinterpret_cast<char*>(&down_max_)) + sizeof(up_min_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoorMessage_MirrorActionConfigMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 down_max = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          down_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 down_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          down_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 left_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          left_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 left_min = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          left_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 right_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          right_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 right_min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          right_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 up_max = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          up_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 up_min = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          up_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoorMessage_MirrorActionConfigMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:b3console.DoorMessage.MirrorActionConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 down_max = 1;
  if (this->down_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_down_max(), target);
  }

  // int32 down_min = 2;
  if (this->down_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_down_min(), target);
  }

  // int32 left_max = 3;
  if (this->left_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_left_max(), target);
  }

  // int32 left_min = 4;
  if (this->left_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_left_min(), target);
  }

  // int32 right_max = 5;
  if (this->right_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_right_max(), target);
  }

  // int32 right_min = 6;
  if (this->right_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_right_min(), target);
  }

  // int32 up_max = 7;
  if (this->up_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_up_max(), target);
  }

  // int32 up_min = 8;
  if (this->up_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_up_min(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b3console.DoorMessage.MirrorActionConfigMessage)
  return target;
}

size_t DoorMessage_MirrorActionConfigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b3console.DoorMessage.MirrorActionConfigMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 down_max = 1;
  if (this->down_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_down_max());
  }

  // int32 down_min = 2;
  if (this->down_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_down_min());
  }

  // int32 left_max = 3;
  if (this->left_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_max());
  }

  // int32 left_min = 4;
  if (this->left_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_min());
  }

  // int32 right_max = 5;
  if (this->right_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_right_max());
  }

  // int32 right_min = 6;
  if (this->right_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_right_min());
  }

  // int32 up_max = 7;
  if (this->up_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_up_max());
  }

  // int32 up_min = 8;
  if (this->up_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_up_min());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoorMessage_MirrorActionConfigMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b3console.DoorMessage.MirrorActionConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DoorMessage_MirrorActionConfigMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoorMessage_MirrorActionConfigMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b3console.DoorMessage.MirrorActionConfigMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b3console.DoorMessage.MirrorActionConfigMessage)
    MergeFrom(*source);
  }
}

void DoorMessage_MirrorActionConfigMessage::MergeFrom(const DoorMessage_MirrorActionConfigMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b3console.DoorMessage.MirrorActionConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.down_max() != 0) {
    _internal_set_down_max(from._internal_down_max());
  }
  if (from.down_min() != 0) {
    _internal_set_down_min(from._internal_down_min());
  }
  if (from.left_max() != 0) {
    _internal_set_left_max(from._internal_left_max());
  }
  if (from.left_min() != 0) {
    _internal_set_left_min(from._internal_left_min());
  }
  if (from.right_max() != 0) {
    _internal_set_right_max(from._internal_right_max());
  }
  if (from.right_min() != 0) {
    _internal_set_right_min(from._internal_right_min());
  }
  if (from.up_max() != 0) {
    _internal_set_up_max(from._internal_up_max());
  }
  if (from.up_min() != 0) {
    _internal_set_up_min(from._internal_up_min());
  }
}

void DoorMessage_MirrorActionConfigMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b3console.DoorMessage.MirrorActionConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoorMessage_MirrorActionConfigMessage::CopyFrom(const DoorMessage_MirrorActionConfigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b3console.DoorMessage.MirrorActionConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoorMessage_MirrorActionConfigMessage::IsInitialized() const {
  return true;
}

void DoorMessage_MirrorActionConfigMessage::InternalSwap(DoorMessage_MirrorActionConfigMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoorMessage_MirrorActionConfigMessage, up_min_)
      + sizeof(DoorMessage_MirrorActionConfigMessage::up_min_)
      - PROTOBUF_FIELD_OFFSET(DoorMessage_MirrorActionConfigMessage, down_max_)>(
          reinterpret_cast<char*>(&down_max_),
          reinterpret_cast<char*>(&other->down_max_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoorMessage_MirrorActionConfigMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DoorMessage_MirrorSelectConfigMessage::InitAsDefaultInstance() {
}
class DoorMessage_MirrorSelectConfigMessage::_Internal {
 public:
};

DoorMessage_MirrorSelectConfigMessage::DoorMessage_MirrorSelectConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:b3console.DoorMessage.MirrorSelectConfigMessage)
}
DoorMessage_MirrorSelectConfigMessage::DoorMessage_MirrorSelectConfigMessage(const DoorMessage_MirrorSelectConfigMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&driver_max_, &from.driver_max_,
    static_cast<size_t>(reinterpret_cast<char*>(&passenger_min_) -
    reinterpret_cast<char*>(&driver_max_)) + sizeof(passenger_min_));
  // @@protoc_insertion_point(copy_constructor:b3console.DoorMessage.MirrorSelectConfigMessage)
}

void DoorMessage_MirrorSelectConfigMessage::SharedCtor() {
  ::memset(&driver_max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passenger_min_) -
      reinterpret_cast<char*>(&driver_max_)) + sizeof(passenger_min_));
}

DoorMessage_MirrorSelectConfigMessage::~DoorMessage_MirrorSelectConfigMessage() {
  // @@protoc_insertion_point(destructor:b3console.DoorMessage.MirrorSelectConfigMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoorMessage_MirrorSelectConfigMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoorMessage_MirrorSelectConfigMessage::ArenaDtor(void* object) {
  DoorMessage_MirrorSelectConfigMessage* _this = reinterpret_cast< DoorMessage_MirrorSelectConfigMessage* >(object);
  (void)_this;
}
void DoorMessage_MirrorSelectConfigMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoorMessage_MirrorSelectConfigMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoorMessage_MirrorSelectConfigMessage& DoorMessage_MirrorSelectConfigMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoorMessage_MirrorSelectConfigMessage_config_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void DoorMessage_MirrorSelectConfigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:b3console.DoorMessage.MirrorSelectConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&driver_max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passenger_min_) -
      reinterpret_cast<char*>(&driver_max_)) + sizeof(passenger_min_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoorMessage_MirrorSelectConfigMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 driver_max = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          driver_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 driver_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          driver_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fold_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fold_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fold_min = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fold_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 passenger_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          passenger_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 passenger_min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          passenger_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoorMessage_MirrorSelectConfigMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:b3console.DoorMessage.MirrorSelectConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 driver_max = 1;
  if (this->driver_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_driver_max(), target);
  }

  // int32 driver_min = 2;
  if (this->driver_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_driver_min(), target);
  }

  // int32 fold_max = 3;
  if (this->fold_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fold_max(), target);
  }

  // int32 fold_min = 4;
  if (this->fold_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fold_min(), target);
  }

  // int32 passenger_max = 5;
  if (this->passenger_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_passenger_max(), target);
  }

  // int32 passenger_min = 6;
  if (this->passenger_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_passenger_min(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b3console.DoorMessage.MirrorSelectConfigMessage)
  return target;
}

size_t DoorMessage_MirrorSelectConfigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b3console.DoorMessage.MirrorSelectConfigMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 driver_max = 1;
  if (this->driver_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_driver_max());
  }

  // int32 driver_min = 2;
  if (this->driver_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_driver_min());
  }

  // int32 fold_max = 3;
  if (this->fold_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fold_max());
  }

  // int32 fold_min = 4;
  if (this->fold_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fold_min());
  }

  // int32 passenger_max = 5;
  if (this->passenger_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_passenger_max());
  }

  // int32 passenger_min = 6;
  if (this->passenger_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_passenger_min());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoorMessage_MirrorSelectConfigMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b3console.DoorMessage.MirrorSelectConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DoorMessage_MirrorSelectConfigMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoorMessage_MirrorSelectConfigMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b3console.DoorMessage.MirrorSelectConfigMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b3console.DoorMessage.MirrorSelectConfigMessage)
    MergeFrom(*source);
  }
}

void DoorMessage_MirrorSelectConfigMessage::MergeFrom(const DoorMessage_MirrorSelectConfigMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b3console.DoorMessage.MirrorSelectConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.driver_max() != 0) {
    _internal_set_driver_max(from._internal_driver_max());
  }
  if (from.driver_min() != 0) {
    _internal_set_driver_min(from._internal_driver_min());
  }
  if (from.fold_max() != 0) {
    _internal_set_fold_max(from._internal_fold_max());
  }
  if (from.fold_min() != 0) {
    _internal_set_fold_min(from._internal_fold_min());
  }
  if (from.passenger_max() != 0) {
    _internal_set_passenger_max(from._internal_passenger_max());
  }
  if (from.passenger_min() != 0) {
    _internal_set_passenger_min(from._internal_passenger_min());
  }
}

void DoorMessage_MirrorSelectConfigMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b3console.DoorMessage.MirrorSelectConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoorMessage_MirrorSelectConfigMessage::CopyFrom(const DoorMessage_MirrorSelectConfigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b3console.DoorMessage.MirrorSelectConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoorMessage_MirrorSelectConfigMessage::IsInitialized() const {
  return true;
}

void DoorMessage_MirrorSelectConfigMessage::InternalSwap(DoorMessage_MirrorSelectConfigMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoorMessage_MirrorSelectConfigMessage, passenger_min_)
      + sizeof(DoorMessage_MirrorSelectConfigMessage::passenger_min_)
      - PROTOBUF_FIELD_OFFSET(DoorMessage_MirrorSelectConfigMessage, driver_max_)>(
          reinterpret_cast<char*>(&driver_max_),
          reinterpret_cast<char*>(&other->driver_max_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoorMessage_MirrorSelectConfigMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DoorMessage_WindowActionConfigMessage::InitAsDefaultInstance() {
}
class DoorMessage_WindowActionConfigMessage::_Internal {
 public:
};

DoorMessage_WindowActionConfigMessage::DoorMessage_WindowActionConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:b3console.DoorMessage.WindowActionConfigMessage)
}
DoorMessage_WindowActionConfigMessage::DoorMessage_WindowActionConfigMessage(const DoorMessage_WindowActionConfigMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&auto_down_max_, &from.auto_down_max_,
    static_cast<size_t>(reinterpret_cast<char*>(&up_min_) -
    reinterpret_cast<char*>(&auto_down_max_)) + sizeof(up_min_));
  // @@protoc_insertion_point(copy_constructor:b3console.DoorMessage.WindowActionConfigMessage)
}

void DoorMessage_WindowActionConfigMessage::SharedCtor() {
  ::memset(&auto_down_max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&up_min_) -
      reinterpret_cast<char*>(&auto_down_max_)) + sizeof(up_min_));
}

DoorMessage_WindowActionConfigMessage::~DoorMessage_WindowActionConfigMessage() {
  // @@protoc_insertion_point(destructor:b3console.DoorMessage.WindowActionConfigMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoorMessage_WindowActionConfigMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoorMessage_WindowActionConfigMessage::ArenaDtor(void* object) {
  DoorMessage_WindowActionConfigMessage* _this = reinterpret_cast< DoorMessage_WindowActionConfigMessage* >(object);
  (void)_this;
}
void DoorMessage_WindowActionConfigMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoorMessage_WindowActionConfigMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoorMessage_WindowActionConfigMessage& DoorMessage_WindowActionConfigMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoorMessage_WindowActionConfigMessage_config_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void DoorMessage_WindowActionConfigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:b3console.DoorMessage.WindowActionConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&auto_down_max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&up_min_) -
      reinterpret_cast<char*>(&auto_down_max_)) + sizeof(up_min_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoorMessage_WindowActionConfigMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 auto_down_max = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          auto_down_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 auto_down_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          auto_down_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 auto_up_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          auto_up_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 auto_up_min = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          auto_up_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 down_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          down_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 down_min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          down_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 up_max = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          up_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 up_min = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          up_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoorMessage_WindowActionConfigMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:b3console.DoorMessage.WindowActionConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 auto_down_max = 1;
  if (this->auto_down_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_auto_down_max(), target);
  }

  // int32 auto_down_min = 2;
  if (this->auto_down_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_auto_down_min(), target);
  }

  // int32 auto_up_max = 3;
  if (this->auto_up_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_auto_up_max(), target);
  }

  // int32 auto_up_min = 4;
  if (this->auto_up_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_auto_up_min(), target);
  }

  // int32 down_max = 5;
  if (this->down_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_down_max(), target);
  }

  // int32 down_min = 6;
  if (this->down_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_down_min(), target);
  }

  // int32 up_max = 7;
  if (this->up_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_up_max(), target);
  }

  // int32 up_min = 8;
  if (this->up_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_up_min(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b3console.DoorMessage.WindowActionConfigMessage)
  return target;
}

size_t DoorMessage_WindowActionConfigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b3console.DoorMessage.WindowActionConfigMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 auto_down_max = 1;
  if (this->auto_down_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_auto_down_max());
  }

  // int32 auto_down_min = 2;
  if (this->auto_down_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_auto_down_min());
  }

  // int32 auto_up_max = 3;
  if (this->auto_up_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_auto_up_max());
  }

  // int32 auto_up_min = 4;
  if (this->auto_up_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_auto_up_min());
  }

  // int32 down_max = 5;
  if (this->down_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_down_max());
  }

  // int32 down_min = 6;
  if (this->down_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_down_min());
  }

  // int32 up_max = 7;
  if (this->up_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_up_max());
  }

  // int32 up_min = 8;
  if (this->up_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_up_min());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoorMessage_WindowActionConfigMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b3console.DoorMessage.WindowActionConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DoorMessage_WindowActionConfigMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoorMessage_WindowActionConfigMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b3console.DoorMessage.WindowActionConfigMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b3console.DoorMessage.WindowActionConfigMessage)
    MergeFrom(*source);
  }
}

void DoorMessage_WindowActionConfigMessage::MergeFrom(const DoorMessage_WindowActionConfigMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b3console.DoorMessage.WindowActionConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auto_down_max() != 0) {
    _internal_set_auto_down_max(from._internal_auto_down_max());
  }
  if (from.auto_down_min() != 0) {
    _internal_set_auto_down_min(from._internal_auto_down_min());
  }
  if (from.auto_up_max() != 0) {
    _internal_set_auto_up_max(from._internal_auto_up_max());
  }
  if (from.auto_up_min() != 0) {
    _internal_set_auto_up_min(from._internal_auto_up_min());
  }
  if (from.down_max() != 0) {
    _internal_set_down_max(from._internal_down_max());
  }
  if (from.down_min() != 0) {
    _internal_set_down_min(from._internal_down_min());
  }
  if (from.up_max() != 0) {
    _internal_set_up_max(from._internal_up_max());
  }
  if (from.up_min() != 0) {
    _internal_set_up_min(from._internal_up_min());
  }
}

void DoorMessage_WindowActionConfigMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b3console.DoorMessage.WindowActionConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoorMessage_WindowActionConfigMessage::CopyFrom(const DoorMessage_WindowActionConfigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b3console.DoorMessage.WindowActionConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoorMessage_WindowActionConfigMessage::IsInitialized() const {
  return true;
}

void DoorMessage_WindowActionConfigMessage::InternalSwap(DoorMessage_WindowActionConfigMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoorMessage_WindowActionConfigMessage, up_min_)
      + sizeof(DoorMessage_WindowActionConfigMessage::up_min_)
      - PROTOBUF_FIELD_OFFSET(DoorMessage_WindowActionConfigMessage, auto_down_max_)>(
          reinterpret_cast<char*>(&auto_down_max_),
          reinterpret_cast<char*>(&other->auto_down_max_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoorMessage_WindowActionConfigMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DoorMessage::InitAsDefaultInstance() {
  ::b3console::_DoorMessage_default_instance_._instance.get_mutable()->mirror_action_ = const_cast< ::b3console::DoorMessage_MirrorActionConfigMessage*>(
      ::b3console::DoorMessage_MirrorActionConfigMessage::internal_default_instance());
  ::b3console::_DoorMessage_default_instance_._instance.get_mutable()->mirror_select_ = const_cast< ::b3console::DoorMessage_MirrorSelectConfigMessage*>(
      ::b3console::DoorMessage_MirrorSelectConfigMessage::internal_default_instance());
  ::b3console::_DoorMessage_default_instance_._instance.get_mutable()->window_action_ = const_cast< ::b3console::DoorMessage_WindowActionConfigMessage*>(
      ::b3console::DoorMessage_WindowActionConfigMessage::internal_default_instance());
}
class DoorMessage::_Internal {
 public:
  static const ::b3console::DoorMessage_MirrorActionConfigMessage& mirror_action(const DoorMessage* msg);
  static const ::b3console::DoorMessage_MirrorSelectConfigMessage& mirror_select(const DoorMessage* msg);
  static const ::b3console::DoorMessage_WindowActionConfigMessage& window_action(const DoorMessage* msg);
};

const ::b3console::DoorMessage_MirrorActionConfigMessage&
DoorMessage::_Internal::mirror_action(const DoorMessage* msg) {
  return *msg->mirror_action_;
}
const ::b3console::DoorMessage_MirrorSelectConfigMessage&
DoorMessage::_Internal::mirror_select(const DoorMessage* msg) {
  return *msg->mirror_select_;
}
const ::b3console::DoorMessage_WindowActionConfigMessage&
DoorMessage::_Internal::window_action(const DoorMessage* msg) {
  return *msg->window_action_;
}
DoorMessage::DoorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:b3console.DoorMessage)
}
DoorMessage::DoorMessage(const DoorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mirror_action()) {
    mirror_action_ = new ::b3console::DoorMessage_MirrorActionConfigMessage(*from.mirror_action_);
  } else {
    mirror_action_ = nullptr;
  }
  if (from._internal_has_mirror_select()) {
    mirror_select_ = new ::b3console::DoorMessage_MirrorSelectConfigMessage(*from.mirror_select_);
  } else {
    mirror_select_ = nullptr;
  }
  if (from._internal_has_window_action()) {
    window_action_ = new ::b3console::DoorMessage_WindowActionConfigMessage(*from.window_action_);
  } else {
    window_action_ = nullptr;
  }
  ::memcpy(&driver_window_max_current_, &from.driver_window_max_current_,
    static_cast<size_t>(reinterpret_cast<char*>(&passenger_window_max_current_) -
    reinterpret_cast<char*>(&driver_window_max_current_)) + sizeof(passenger_window_max_current_));
  // @@protoc_insertion_point(copy_constructor:b3console.DoorMessage)
}

void DoorMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoorMessage_config_5fmessage_2eproto.base);
  ::memset(&mirror_action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passenger_window_max_current_) -
      reinterpret_cast<char*>(&mirror_action_)) + sizeof(passenger_window_max_current_));
}

DoorMessage::~DoorMessage() {
  // @@protoc_insertion_point(destructor:b3console.DoorMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mirror_action_;
  if (this != internal_default_instance()) delete mirror_select_;
  if (this != internal_default_instance()) delete window_action_;
}

void DoorMessage::ArenaDtor(void* object) {
  DoorMessage* _this = reinterpret_cast< DoorMessage* >(object);
  (void)_this;
}
void DoorMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoorMessage& DoorMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoorMessage_config_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void DoorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:b3console.DoorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && mirror_action_ != nullptr) {
    delete mirror_action_;
  }
  mirror_action_ = nullptr;
  if (GetArena() == nullptr && mirror_select_ != nullptr) {
    delete mirror_select_;
  }
  mirror_select_ = nullptr;
  if (GetArena() == nullptr && window_action_ != nullptr) {
    delete window_action_;
  }
  window_action_ = nullptr;
  ::memset(&driver_window_max_current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passenger_window_max_current_) -
      reinterpret_cast<char*>(&driver_window_max_current_)) + sizeof(passenger_window_max_current_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .b3console.DoorMessage.MirrorActionConfigMessage mirror_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mirror_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.DoorMessage.MirrorSelectConfigMessage mirror_select = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mirror_select(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.DoorMessage.WindowActionConfigMessage window_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 driver_window_max_current = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          driver_window_max_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 passenger_window_max_current = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          passenger_window_max_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoorMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:b3console.DoorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .b3console.DoorMessage.MirrorActionConfigMessage mirror_action = 1;
  if (this->has_mirror_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mirror_action(this), target, stream);
  }

  // .b3console.DoorMessage.MirrorSelectConfigMessage mirror_select = 2;
  if (this->has_mirror_select()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mirror_select(this), target, stream);
  }

  // .b3console.DoorMessage.WindowActionConfigMessage window_action = 3;
  if (this->has_window_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::window_action(this), target, stream);
  }

  // int32 driver_window_max_current = 4;
  if (this->driver_window_max_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_driver_window_max_current(), target);
  }

  // int32 passenger_window_max_current = 5;
  if (this->passenger_window_max_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_passenger_window_max_current(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b3console.DoorMessage)
  return target;
}

size_t DoorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b3console.DoorMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .b3console.DoorMessage.MirrorActionConfigMessage mirror_action = 1;
  if (this->has_mirror_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mirror_action_);
  }

  // .b3console.DoorMessage.MirrorSelectConfigMessage mirror_select = 2;
  if (this->has_mirror_select()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mirror_select_);
  }

  // .b3console.DoorMessage.WindowActionConfigMessage window_action = 3;
  if (this->has_window_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *window_action_);
  }

  // int32 driver_window_max_current = 4;
  if (this->driver_window_max_current() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_driver_window_max_current());
  }

  // int32 passenger_window_max_current = 5;
  if (this->passenger_window_max_current() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_passenger_window_max_current());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoorMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b3console.DoorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DoorMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoorMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b3console.DoorMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b3console.DoorMessage)
    MergeFrom(*source);
  }
}

void DoorMessage::MergeFrom(const DoorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b3console.DoorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mirror_action()) {
    _internal_mutable_mirror_action()->::b3console::DoorMessage_MirrorActionConfigMessage::MergeFrom(from._internal_mirror_action());
  }
  if (from.has_mirror_select()) {
    _internal_mutable_mirror_select()->::b3console::DoorMessage_MirrorSelectConfigMessage::MergeFrom(from._internal_mirror_select());
  }
  if (from.has_window_action()) {
    _internal_mutable_window_action()->::b3console::DoorMessage_WindowActionConfigMessage::MergeFrom(from._internal_window_action());
  }
  if (from.driver_window_max_current() != 0) {
    _internal_set_driver_window_max_current(from._internal_driver_window_max_current());
  }
  if (from.passenger_window_max_current() != 0) {
    _internal_set_passenger_window_max_current(from._internal_passenger_window_max_current());
  }
}

void DoorMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b3console.DoorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoorMessage::CopyFrom(const DoorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b3console.DoorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoorMessage::IsInitialized() const {
  return true;
}

void DoorMessage::InternalSwap(DoorMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoorMessage, passenger_window_max_current_)
      + sizeof(DoorMessage::passenger_window_max_current_)
      - PROTOBUF_FIELD_OFFSET(DoorMessage, mirror_action_)>(
          reinterpret_cast<char*>(&mirror_action_),
          reinterpret_cast<char*>(&other->mirror_action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoorMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CanBusConfigMessage::InitAsDefaultInstance() {
}
class CanBusConfigMessage::_Internal {
 public:
};

CanBusConfigMessage::CanBusConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:b3console.CanBusConfigMessage)
}
CanBusConfigMessage::CanBusConfigMessage(const CanBusConfigMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&addr_tx_, &from.addr_tx_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter1_3_) -
    reinterpret_cast<char*>(&addr_tx_)) + sizeof(filter1_3_));
  // @@protoc_insertion_point(copy_constructor:b3console.CanBusConfigMessage)
}

void CanBusConfigMessage::SharedCtor() {
  ::memset(&addr_tx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter1_3_) -
      reinterpret_cast<char*>(&addr_tx_)) + sizeof(filter1_3_));
}

CanBusConfigMessage::~CanBusConfigMessage() {
  // @@protoc_insertion_point(destructor:b3console.CanBusConfigMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CanBusConfigMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CanBusConfigMessage::ArenaDtor(void* object) {
  CanBusConfigMessage* _this = reinterpret_cast< CanBusConfigMessage* >(object);
  (void)_this;
}
void CanBusConfigMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CanBusConfigMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CanBusConfigMessage& CanBusConfigMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CanBusConfigMessage_config_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void CanBusConfigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:b3console.CanBusConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&addr_tx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter1_3_) -
      reinterpret_cast<char*>(&addr_tx_)) + sizeof(filter1_3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanBusConfigMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 addr_tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 boot_rx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          boot_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 boot_tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          boot_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 intvl_tx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          intvl_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mask0 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mask0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 filter0_0 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          filter0_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 filter0_1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          filter0_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mask1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          mask1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 filter1_0 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          filter1_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 filter1_1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          filter1_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 filter1_2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          filter1_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 filter1_3 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          filter1_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CanBusConfigMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:b3console.CanBusConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr_tx = 1;
  if (this->addr_tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_addr_tx(), target);
  }

  // int32 boot_rx = 2;
  if (this->boot_rx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_boot_rx(), target);
  }

  // int32 boot_tx = 3;
  if (this->boot_tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_boot_tx(), target);
  }

  // int32 intvl_tx = 4;
  if (this->intvl_tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_intvl_tx(), target);
  }

  // int32 mask0 = 5;
  if (this->mask0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mask0(), target);
  }

  // int32 filter0_0 = 6;
  if (this->filter0_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_filter0_0(), target);
  }

  // int32 filter0_1 = 7;
  if (this->filter0_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_filter0_1(), target);
  }

  // int32 mask1 = 8;
  if (this->mask1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_mask1(), target);
  }

  // int32 filter1_0 = 9;
  if (this->filter1_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_filter1_0(), target);
  }

  // int32 filter1_1 = 10;
  if (this->filter1_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_filter1_1(), target);
  }

  // int32 filter1_2 = 11;
  if (this->filter1_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_filter1_2(), target);
  }

  // int32 filter1_3 = 12;
  if (this->filter1_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_filter1_3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b3console.CanBusConfigMessage)
  return target;
}

size_t CanBusConfigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b3console.CanBusConfigMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 addr_tx = 1;
  if (this->addr_tx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_addr_tx());
  }

  // int32 boot_rx = 2;
  if (this->boot_rx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boot_rx());
  }

  // int32 boot_tx = 3;
  if (this->boot_tx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boot_tx());
  }

  // int32 intvl_tx = 4;
  if (this->intvl_tx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_intvl_tx());
  }

  // int32 mask0 = 5;
  if (this->mask0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mask0());
  }

  // int32 filter0_0 = 6;
  if (this->filter0_0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_filter0_0());
  }

  // int32 filter0_1 = 7;
  if (this->filter0_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_filter0_1());
  }

  // int32 mask1 = 8;
  if (this->mask1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mask1());
  }

  // int32 filter1_0 = 9;
  if (this->filter1_0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_filter1_0());
  }

  // int32 filter1_1 = 10;
  if (this->filter1_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_filter1_1());
  }

  // int32 filter1_2 = 11;
  if (this->filter1_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_filter1_2());
  }

  // int32 filter1_3 = 12;
  if (this->filter1_3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_filter1_3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanBusConfigMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b3console.CanBusConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CanBusConfigMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CanBusConfigMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b3console.CanBusConfigMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b3console.CanBusConfigMessage)
    MergeFrom(*source);
  }
}

void CanBusConfigMessage::MergeFrom(const CanBusConfigMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b3console.CanBusConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr_tx() != 0) {
    _internal_set_addr_tx(from._internal_addr_tx());
  }
  if (from.boot_rx() != 0) {
    _internal_set_boot_rx(from._internal_boot_rx());
  }
  if (from.boot_tx() != 0) {
    _internal_set_boot_tx(from._internal_boot_tx());
  }
  if (from.intvl_tx() != 0) {
    _internal_set_intvl_tx(from._internal_intvl_tx());
  }
  if (from.mask0() != 0) {
    _internal_set_mask0(from._internal_mask0());
  }
  if (from.filter0_0() != 0) {
    _internal_set_filter0_0(from._internal_filter0_0());
  }
  if (from.filter0_1() != 0) {
    _internal_set_filter0_1(from._internal_filter0_1());
  }
  if (from.mask1() != 0) {
    _internal_set_mask1(from._internal_mask1());
  }
  if (from.filter1_0() != 0) {
    _internal_set_filter1_0(from._internal_filter1_0());
  }
  if (from.filter1_1() != 0) {
    _internal_set_filter1_1(from._internal_filter1_1());
  }
  if (from.filter1_2() != 0) {
    _internal_set_filter1_2(from._internal_filter1_2());
  }
  if (from.filter1_3() != 0) {
    _internal_set_filter1_3(from._internal_filter1_3());
  }
}

void CanBusConfigMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b3console.CanBusConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanBusConfigMessage::CopyFrom(const CanBusConfigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b3console.CanBusConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanBusConfigMessage::IsInitialized() const {
  return true;
}

void CanBusConfigMessage::InternalSwap(CanBusConfigMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanBusConfigMessage, filter1_3_)
      + sizeof(CanBusConfigMessage::filter1_3_)
      - PROTOBUF_FIELD_OFFSET(CanBusConfigMessage, addr_tx_)>(
          reinterpret_cast<char*>(&addr_tx_),
          reinterpret_cast<char*>(&other->addr_tx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CanBusConfigMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShifterMessage_IndicatorConfigMessage::InitAsDefaultInstance() {
}
class ShifterMessage_IndicatorConfigMessage::_Internal {
 public:
};

ShifterMessage_IndicatorConfigMessage::ShifterMessage_IndicatorConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:b3console.ShifterMessage.IndicatorConfigMessage)
}
ShifterMessage_IndicatorConfigMessage::ShifterMessage_IndicatorConfigMessage(const ShifterMessage_IndicatorConfigMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&brightness_, &from.brightness_,
    static_cast<size_t>(reinterpret_cast<char*>(&wait_) -
    reinterpret_cast<char*>(&brightness_)) + sizeof(wait_));
  // @@protoc_insertion_point(copy_constructor:b3console.ShifterMessage.IndicatorConfigMessage)
}

void ShifterMessage_IndicatorConfigMessage::SharedCtor() {
  ::memset(&brightness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_) -
      reinterpret_cast<char*>(&brightness_)) + sizeof(wait_));
}

ShifterMessage_IndicatorConfigMessage::~ShifterMessage_IndicatorConfigMessage() {
  // @@protoc_insertion_point(destructor:b3console.ShifterMessage.IndicatorConfigMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShifterMessage_IndicatorConfigMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShifterMessage_IndicatorConfigMessage::ArenaDtor(void* object) {
  ShifterMessage_IndicatorConfigMessage* _this = reinterpret_cast< ShifterMessage_IndicatorConfigMessage* >(object);
  (void)_this;
}
void ShifterMessage_IndicatorConfigMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShifterMessage_IndicatorConfigMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShifterMessage_IndicatorConfigMessage& ShifterMessage_IndicatorConfigMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShifterMessage_IndicatorConfigMessage_config_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void ShifterMessage_IndicatorConfigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:b3console.ShifterMessage.IndicatorConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&brightness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_) -
      reinterpret_cast<char*>(&brightness_)) + sizeof(wait_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShifterMessage_IndicatorConfigMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 brightness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wait = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          wait_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShifterMessage_IndicatorConfigMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:b3console.ShifterMessage.IndicatorConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 brightness = 1;
  if (this->brightness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_brightness(), target);
  }

  // int32 color = 2;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_color(), target);
  }

  // int32 wait = 3;
  if (this->wait() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_wait(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b3console.ShifterMessage.IndicatorConfigMessage)
  return target;
}

size_t ShifterMessage_IndicatorConfigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b3console.ShifterMessage.IndicatorConfigMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 brightness = 1;
  if (this->brightness() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_brightness());
  }

  // int32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_color());
  }

  // int32 wait = 3;
  if (this->wait() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wait());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShifterMessage_IndicatorConfigMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b3console.ShifterMessage.IndicatorConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ShifterMessage_IndicatorConfigMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShifterMessage_IndicatorConfigMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b3console.ShifterMessage.IndicatorConfigMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b3console.ShifterMessage.IndicatorConfigMessage)
    MergeFrom(*source);
  }
}

void ShifterMessage_IndicatorConfigMessage::MergeFrom(const ShifterMessage_IndicatorConfigMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b3console.ShifterMessage.IndicatorConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.brightness() != 0) {
    _internal_set_brightness(from._internal_brightness());
  }
  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
  if (from.wait() != 0) {
    _internal_set_wait(from._internal_wait());
  }
}

void ShifterMessage_IndicatorConfigMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b3console.ShifterMessage.IndicatorConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShifterMessage_IndicatorConfigMessage::CopyFrom(const ShifterMessage_IndicatorConfigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b3console.ShifterMessage.IndicatorConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShifterMessage_IndicatorConfigMessage::IsInitialized() const {
  return true;
}

void ShifterMessage_IndicatorConfigMessage::InternalSwap(ShifterMessage_IndicatorConfigMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShifterMessage_IndicatorConfigMessage, wait_)
      + sizeof(ShifterMessage_IndicatorConfigMessage::wait_)
      - PROTOBUF_FIELD_OFFSET(ShifterMessage_IndicatorConfigMessage, brightness_)>(
          reinterpret_cast<char*>(&brightness_),
          reinterpret_cast<char*>(&other->brightness_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShifterMessage_IndicatorConfigMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShifterMessage_MelexisConfigMessage::InitAsDefaultInstance() {
}
class ShifterMessage_MelexisConfigMessage::_Internal {
 public:
};

ShifterMessage_MelexisConfigMessage::ShifterMessage_MelexisConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:b3console.ShifterMessage.MelexisConfigMessage)
}
ShifterMessage_MelexisConfigMessage::ShifterMessage_MelexisConfigMessage(const ShifterMessage_MelexisConfigMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  range_ = from.range_;
  // @@protoc_insertion_point(copy_constructor:b3console.ShifterMessage.MelexisConfigMessage)
}

void ShifterMessage_MelexisConfigMessage::SharedCtor() {
  range_ = 0;
}

ShifterMessage_MelexisConfigMessage::~ShifterMessage_MelexisConfigMessage() {
  // @@protoc_insertion_point(destructor:b3console.ShifterMessage.MelexisConfigMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShifterMessage_MelexisConfigMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShifterMessage_MelexisConfigMessage::ArenaDtor(void* object) {
  ShifterMessage_MelexisConfigMessage* _this = reinterpret_cast< ShifterMessage_MelexisConfigMessage* >(object);
  (void)_this;
}
void ShifterMessage_MelexisConfigMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShifterMessage_MelexisConfigMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShifterMessage_MelexisConfigMessage& ShifterMessage_MelexisConfigMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShifterMessage_MelexisConfigMessage_config_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void ShifterMessage_MelexisConfigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:b3console.ShifterMessage.MelexisConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShifterMessage_MelexisConfigMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShifterMessage_MelexisConfigMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:b3console.ShifterMessage.MelexisConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 range = 1;
  if (this->range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b3console.ShifterMessage.MelexisConfigMessage)
  return target;
}

size_t ShifterMessage_MelexisConfigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b3console.ShifterMessage.MelexisConfigMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 range = 1;
  if (this->range() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_range());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShifterMessage_MelexisConfigMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b3console.ShifterMessage.MelexisConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ShifterMessage_MelexisConfigMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShifterMessage_MelexisConfigMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b3console.ShifterMessage.MelexisConfigMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b3console.ShifterMessage.MelexisConfigMessage)
    MergeFrom(*source);
  }
}

void ShifterMessage_MelexisConfigMessage::MergeFrom(const ShifterMessage_MelexisConfigMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b3console.ShifterMessage.MelexisConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.range() != 0) {
    _internal_set_range(from._internal_range());
  }
}

void ShifterMessage_MelexisConfigMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b3console.ShifterMessage.MelexisConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShifterMessage_MelexisConfigMessage::CopyFrom(const ShifterMessage_MelexisConfigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b3console.ShifterMessage.MelexisConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShifterMessage_MelexisConfigMessage::IsInitialized() const {
  return true;
}

void ShifterMessage_MelexisConfigMessage::InternalSwap(ShifterMessage_MelexisConfigMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(range_, other->range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShifterMessage_MelexisConfigMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShifterMessage_ShifterPositionMessage::InitAsDefaultInstance() {
}
class ShifterMessage_ShifterPositionMessage::_Internal {
 public:
};

ShifterMessage_ShifterPositionMessage::ShifterMessage_ShifterPositionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:b3console.ShifterMessage.ShifterPositionMessage)
}
ShifterMessage_ShifterPositionMessage::ShifterMessage_ShifterPositionMessage(const ShifterMessage_ShifterPositionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x1_, &from.x1_,
    static_cast<size_t>(reinterpret_cast<char*>(&enum_val_) -
    reinterpret_cast<char*>(&x1_)) + sizeof(enum_val_));
  // @@protoc_insertion_point(copy_constructor:b3console.ShifterMessage.ShifterPositionMessage)
}

void ShifterMessage_ShifterPositionMessage::SharedCtor() {
  ::memset(&x1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enum_val_) -
      reinterpret_cast<char*>(&x1_)) + sizeof(enum_val_));
}

ShifterMessage_ShifterPositionMessage::~ShifterMessage_ShifterPositionMessage() {
  // @@protoc_insertion_point(destructor:b3console.ShifterMessage.ShifterPositionMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShifterMessage_ShifterPositionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShifterMessage_ShifterPositionMessage::ArenaDtor(void* object) {
  ShifterMessage_ShifterPositionMessage* _this = reinterpret_cast< ShifterMessage_ShifterPositionMessage* >(object);
  (void)_this;
}
void ShifterMessage_ShifterPositionMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShifterMessage_ShifterPositionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShifterMessage_ShifterPositionMessage& ShifterMessage_ShifterPositionMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShifterMessage_ShifterPositionMessage_config_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void ShifterMessage_ShifterPositionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:b3console.ShifterMessage.ShifterPositionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enum_val_) -
      reinterpret_cast<char*>(&x1_)) + sizeof(enum_val_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShifterMessage_ShifterPositionMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          x2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          y2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enum_val = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enum_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShifterMessage_ShifterPositionMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:b3console.ShifterMessage.ShifterPositionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x1 = 1;
  if (this->x1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x1(), target);
  }

  // int32 y1 = 2;
  if (this->y1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y1(), target);
  }

  // int32 x2 = 3;
  if (this->x2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_x2(), target);
  }

  // int32 y2 = 4;
  if (this->y2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_y2(), target);
  }

  // int32 enum_val = 5;
  if (this->enum_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_enum_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b3console.ShifterMessage.ShifterPositionMessage)
  return target;
}

size_t ShifterMessage_ShifterPositionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b3console.ShifterMessage.ShifterPositionMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x1 = 1;
  if (this->x1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x1());
  }

  // int32 y1 = 2;
  if (this->y1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y1());
  }

  // int32 x2 = 3;
  if (this->x2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x2());
  }

  // int32 y2 = 4;
  if (this->y2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y2());
  }

  // int32 enum_val = 5;
  if (this->enum_val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enum_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShifterMessage_ShifterPositionMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b3console.ShifterMessage.ShifterPositionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ShifterMessage_ShifterPositionMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShifterMessage_ShifterPositionMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b3console.ShifterMessage.ShifterPositionMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b3console.ShifterMessage.ShifterPositionMessage)
    MergeFrom(*source);
  }
}

void ShifterMessage_ShifterPositionMessage::MergeFrom(const ShifterMessage_ShifterPositionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b3console.ShifterMessage.ShifterPositionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x1() != 0) {
    _internal_set_x1(from._internal_x1());
  }
  if (from.y1() != 0) {
    _internal_set_y1(from._internal_y1());
  }
  if (from.x2() != 0) {
    _internal_set_x2(from._internal_x2());
  }
  if (from.y2() != 0) {
    _internal_set_y2(from._internal_y2());
  }
  if (from.enum_val() != 0) {
    _internal_set_enum_val(from._internal_enum_val());
  }
}

void ShifterMessage_ShifterPositionMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b3console.ShifterMessage.ShifterPositionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShifterMessage_ShifterPositionMessage::CopyFrom(const ShifterMessage_ShifterPositionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b3console.ShifterMessage.ShifterPositionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShifterMessage_ShifterPositionMessage::IsInitialized() const {
  return true;
}

void ShifterMessage_ShifterPositionMessage::InternalSwap(ShifterMessage_ShifterPositionMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShifterMessage_ShifterPositionMessage, enum_val_)
      + sizeof(ShifterMessage_ShifterPositionMessage::enum_val_)
      - PROTOBUF_FIELD_OFFSET(ShifterMessage_ShifterPositionMessage, x1_)>(
          reinterpret_cast<char*>(&x1_),
          reinterpret_cast<char*>(&other->x1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShifterMessage_ShifterPositionMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShifterMessage::InitAsDefaultInstance() {
  ::b3console::_ShifterMessage_default_instance_._instance.get_mutable()->can_bus_config_ = const_cast< ::b3console::CanBusConfigMessage*>(
      ::b3console::CanBusConfigMessage::internal_default_instance());
  ::b3console::_ShifterMessage_default_instance_._instance.get_mutable()->indicator_config_ = const_cast< ::b3console::ShifterMessage_IndicatorConfigMessage*>(
      ::b3console::ShifterMessage_IndicatorConfigMessage::internal_default_instance());
  ::b3console::_ShifterMessage_default_instance_._instance.get_mutable()->melexis_config_ = const_cast< ::b3console::ShifterMessage_MelexisConfigMessage*>(
      ::b3console::ShifterMessage_MelexisConfigMessage::internal_default_instance());
  ::b3console::_ShifterMessage_default_instance_._instance.get_mutable()->park_config_ = const_cast< ::b3console::ShifterMessage_ShifterPositionMessage*>(
      ::b3console::ShifterMessage_ShifterPositionMessage::internal_default_instance());
  ::b3console::_ShifterMessage_default_instance_._instance.get_mutable()->reverse_config_ = const_cast< ::b3console::ShifterMessage_ShifterPositionMessage*>(
      ::b3console::ShifterMessage_ShifterPositionMessage::internal_default_instance());
  ::b3console::_ShifterMessage_default_instance_._instance.get_mutable()->neutral_config_ = const_cast< ::b3console::ShifterMessage_ShifterPositionMessage*>(
      ::b3console::ShifterMessage_ShifterPositionMessage::internal_default_instance());
  ::b3console::_ShifterMessage_default_instance_._instance.get_mutable()->drive_config_ = const_cast< ::b3console::ShifterMessage_ShifterPositionMessage*>(
      ::b3console::ShifterMessage_ShifterPositionMessage::internal_default_instance());
  ::b3console::_ShifterMessage_default_instance_._instance.get_mutable()->manual_config_ = const_cast< ::b3console::ShifterMessage_ShifterPositionMessage*>(
      ::b3console::ShifterMessage_ShifterPositionMessage::internal_default_instance());
  ::b3console::_ShifterMessage_default_instance_._instance.get_mutable()->up_config_ = const_cast< ::b3console::ShifterMessage_ShifterPositionMessage*>(
      ::b3console::ShifterMessage_ShifterPositionMessage::internal_default_instance());
  ::b3console::_ShifterMessage_default_instance_._instance.get_mutable()->down_config_ = const_cast< ::b3console::ShifterMessage_ShifterPositionMessage*>(
      ::b3console::ShifterMessage_ShifterPositionMessage::internal_default_instance());
}
class ShifterMessage::_Internal {
 public:
  static const ::b3console::CanBusConfigMessage& can_bus_config(const ShifterMessage* msg);
  static const ::b3console::ShifterMessage_IndicatorConfigMessage& indicator_config(const ShifterMessage* msg);
  static const ::b3console::ShifterMessage_MelexisConfigMessage& melexis_config(const ShifterMessage* msg);
  static const ::b3console::ShifterMessage_ShifterPositionMessage& park_config(const ShifterMessage* msg);
  static const ::b3console::ShifterMessage_ShifterPositionMessage& reverse_config(const ShifterMessage* msg);
  static const ::b3console::ShifterMessage_ShifterPositionMessage& neutral_config(const ShifterMessage* msg);
  static const ::b3console::ShifterMessage_ShifterPositionMessage& drive_config(const ShifterMessage* msg);
  static const ::b3console::ShifterMessage_ShifterPositionMessage& manual_config(const ShifterMessage* msg);
  static const ::b3console::ShifterMessage_ShifterPositionMessage& up_config(const ShifterMessage* msg);
  static const ::b3console::ShifterMessage_ShifterPositionMessage& down_config(const ShifterMessage* msg);
};

const ::b3console::CanBusConfigMessage&
ShifterMessage::_Internal::can_bus_config(const ShifterMessage* msg) {
  return *msg->can_bus_config_;
}
const ::b3console::ShifterMessage_IndicatorConfigMessage&
ShifterMessage::_Internal::indicator_config(const ShifterMessage* msg) {
  return *msg->indicator_config_;
}
const ::b3console::ShifterMessage_MelexisConfigMessage&
ShifterMessage::_Internal::melexis_config(const ShifterMessage* msg) {
  return *msg->melexis_config_;
}
const ::b3console::ShifterMessage_ShifterPositionMessage&
ShifterMessage::_Internal::park_config(const ShifterMessage* msg) {
  return *msg->park_config_;
}
const ::b3console::ShifterMessage_ShifterPositionMessage&
ShifterMessage::_Internal::reverse_config(const ShifterMessage* msg) {
  return *msg->reverse_config_;
}
const ::b3console::ShifterMessage_ShifterPositionMessage&
ShifterMessage::_Internal::neutral_config(const ShifterMessage* msg) {
  return *msg->neutral_config_;
}
const ::b3console::ShifterMessage_ShifterPositionMessage&
ShifterMessage::_Internal::drive_config(const ShifterMessage* msg) {
  return *msg->drive_config_;
}
const ::b3console::ShifterMessage_ShifterPositionMessage&
ShifterMessage::_Internal::manual_config(const ShifterMessage* msg) {
  return *msg->manual_config_;
}
const ::b3console::ShifterMessage_ShifterPositionMessage&
ShifterMessage::_Internal::up_config(const ShifterMessage* msg) {
  return *msg->up_config_;
}
const ::b3console::ShifterMessage_ShifterPositionMessage&
ShifterMessage::_Internal::down_config(const ShifterMessage* msg) {
  return *msg->down_config_;
}
ShifterMessage::ShifterMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:b3console.ShifterMessage)
}
ShifterMessage::ShifterMessage(const ShifterMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_can_bus_config()) {
    can_bus_config_ = new ::b3console::CanBusConfigMessage(*from.can_bus_config_);
  } else {
    can_bus_config_ = nullptr;
  }
  if (from._internal_has_indicator_config()) {
    indicator_config_ = new ::b3console::ShifterMessage_IndicatorConfigMessage(*from.indicator_config_);
  } else {
    indicator_config_ = nullptr;
  }
  if (from._internal_has_melexis_config()) {
    melexis_config_ = new ::b3console::ShifterMessage_MelexisConfigMessage(*from.melexis_config_);
  } else {
    melexis_config_ = nullptr;
  }
  if (from._internal_has_park_config()) {
    park_config_ = new ::b3console::ShifterMessage_ShifterPositionMessage(*from.park_config_);
  } else {
    park_config_ = nullptr;
  }
  if (from._internal_has_reverse_config()) {
    reverse_config_ = new ::b3console::ShifterMessage_ShifterPositionMessage(*from.reverse_config_);
  } else {
    reverse_config_ = nullptr;
  }
  if (from._internal_has_neutral_config()) {
    neutral_config_ = new ::b3console::ShifterMessage_ShifterPositionMessage(*from.neutral_config_);
  } else {
    neutral_config_ = nullptr;
  }
  if (from._internal_has_drive_config()) {
    drive_config_ = new ::b3console::ShifterMessage_ShifterPositionMessage(*from.drive_config_);
  } else {
    drive_config_ = nullptr;
  }
  if (from._internal_has_manual_config()) {
    manual_config_ = new ::b3console::ShifterMessage_ShifterPositionMessage(*from.manual_config_);
  } else {
    manual_config_ = nullptr;
  }
  if (from._internal_has_up_config()) {
    up_config_ = new ::b3console::ShifterMessage_ShifterPositionMessage(*from.up_config_);
  } else {
    up_config_ = nullptr;
  }
  if (from._internal_has_down_config()) {
    down_config_ = new ::b3console::ShifterMessage_ShifterPositionMessage(*from.down_config_);
  } else {
    down_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:b3console.ShifterMessage)
}

void ShifterMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShifterMessage_config_5fmessage_2eproto.base);
  ::memset(&can_bus_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_config_) -
      reinterpret_cast<char*>(&can_bus_config_)) + sizeof(down_config_));
}

ShifterMessage::~ShifterMessage() {
  // @@protoc_insertion_point(destructor:b3console.ShifterMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShifterMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete can_bus_config_;
  if (this != internal_default_instance()) delete indicator_config_;
  if (this != internal_default_instance()) delete melexis_config_;
  if (this != internal_default_instance()) delete park_config_;
  if (this != internal_default_instance()) delete reverse_config_;
  if (this != internal_default_instance()) delete neutral_config_;
  if (this != internal_default_instance()) delete drive_config_;
  if (this != internal_default_instance()) delete manual_config_;
  if (this != internal_default_instance()) delete up_config_;
  if (this != internal_default_instance()) delete down_config_;
}

void ShifterMessage::ArenaDtor(void* object) {
  ShifterMessage* _this = reinterpret_cast< ShifterMessage* >(object);
  (void)_this;
}
void ShifterMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShifterMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShifterMessage& ShifterMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShifterMessage_config_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void ShifterMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:b3console.ShifterMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && can_bus_config_ != nullptr) {
    delete can_bus_config_;
  }
  can_bus_config_ = nullptr;
  if (GetArena() == nullptr && indicator_config_ != nullptr) {
    delete indicator_config_;
  }
  indicator_config_ = nullptr;
  if (GetArena() == nullptr && melexis_config_ != nullptr) {
    delete melexis_config_;
  }
  melexis_config_ = nullptr;
  if (GetArena() == nullptr && park_config_ != nullptr) {
    delete park_config_;
  }
  park_config_ = nullptr;
  if (GetArena() == nullptr && reverse_config_ != nullptr) {
    delete reverse_config_;
  }
  reverse_config_ = nullptr;
  if (GetArena() == nullptr && neutral_config_ != nullptr) {
    delete neutral_config_;
  }
  neutral_config_ = nullptr;
  if (GetArena() == nullptr && drive_config_ != nullptr) {
    delete drive_config_;
  }
  drive_config_ = nullptr;
  if (GetArena() == nullptr && manual_config_ != nullptr) {
    delete manual_config_;
  }
  manual_config_ = nullptr;
  if (GetArena() == nullptr && up_config_ != nullptr) {
    delete up_config_;
  }
  up_config_ = nullptr;
  if (GetArena() == nullptr && down_config_ != nullptr) {
    delete down_config_;
  }
  down_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShifterMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .b3console.CanBusConfigMessage can_bus_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_can_bus_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.ShifterMessage.IndicatorConfigMessage indicator_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_indicator_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.ShifterMessage.MelexisConfigMessage melexis_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_melexis_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.ShifterMessage.ShifterPositionMessage park_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_park_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.ShifterMessage.ShifterPositionMessage reverse_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.ShifterMessage.ShifterPositionMessage neutral_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_neutral_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.ShifterMessage.ShifterPositionMessage drive_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_drive_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.ShifterMessage.ShifterPositionMessage manual_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_manual_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.ShifterMessage.ShifterPositionMessage up_config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_up_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.ShifterMessage.ShifterPositionMessage down_config = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_down_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShifterMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:b3console.ShifterMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .b3console.CanBusConfigMessage can_bus_config = 1;
  if (this->has_can_bus_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::can_bus_config(this), target, stream);
  }

  // .b3console.ShifterMessage.IndicatorConfigMessage indicator_config = 2;
  if (this->has_indicator_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::indicator_config(this), target, stream);
  }

  // .b3console.ShifterMessage.MelexisConfigMessage melexis_config = 3;
  if (this->has_melexis_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::melexis_config(this), target, stream);
  }

  // .b3console.ShifterMessage.ShifterPositionMessage park_config = 4;
  if (this->has_park_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::park_config(this), target, stream);
  }

  // .b3console.ShifterMessage.ShifterPositionMessage reverse_config = 5;
  if (this->has_reverse_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reverse_config(this), target, stream);
  }

  // .b3console.ShifterMessage.ShifterPositionMessage neutral_config = 6;
  if (this->has_neutral_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::neutral_config(this), target, stream);
  }

  // .b3console.ShifterMessage.ShifterPositionMessage drive_config = 7;
  if (this->has_drive_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::drive_config(this), target, stream);
  }

  // .b3console.ShifterMessage.ShifterPositionMessage manual_config = 8;
  if (this->has_manual_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::manual_config(this), target, stream);
  }

  // .b3console.ShifterMessage.ShifterPositionMessage up_config = 9;
  if (this->has_up_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::up_config(this), target, stream);
  }

  // .b3console.ShifterMessage.ShifterPositionMessage down_config = 10;
  if (this->has_down_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::down_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b3console.ShifterMessage)
  return target;
}

size_t ShifterMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b3console.ShifterMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .b3console.CanBusConfigMessage can_bus_config = 1;
  if (this->has_can_bus_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *can_bus_config_);
  }

  // .b3console.ShifterMessage.IndicatorConfigMessage indicator_config = 2;
  if (this->has_indicator_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *indicator_config_);
  }

  // .b3console.ShifterMessage.MelexisConfigMessage melexis_config = 3;
  if (this->has_melexis_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *melexis_config_);
  }

  // .b3console.ShifterMessage.ShifterPositionMessage park_config = 4;
  if (this->has_park_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *park_config_);
  }

  // .b3console.ShifterMessage.ShifterPositionMessage reverse_config = 5;
  if (this->has_reverse_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reverse_config_);
  }

  // .b3console.ShifterMessage.ShifterPositionMessage neutral_config = 6;
  if (this->has_neutral_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neutral_config_);
  }

  // .b3console.ShifterMessage.ShifterPositionMessage drive_config = 7;
  if (this->has_drive_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drive_config_);
  }

  // .b3console.ShifterMessage.ShifterPositionMessage manual_config = 8;
  if (this->has_manual_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *manual_config_);
  }

  // .b3console.ShifterMessage.ShifterPositionMessage up_config = 9;
  if (this->has_up_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *up_config_);
  }

  // .b3console.ShifterMessage.ShifterPositionMessage down_config = 10;
  if (this->has_down_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *down_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShifterMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b3console.ShifterMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ShifterMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShifterMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b3console.ShifterMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b3console.ShifterMessage)
    MergeFrom(*source);
  }
}

void ShifterMessage::MergeFrom(const ShifterMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b3console.ShifterMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_can_bus_config()) {
    _internal_mutable_can_bus_config()->::b3console::CanBusConfigMessage::MergeFrom(from._internal_can_bus_config());
  }
  if (from.has_indicator_config()) {
    _internal_mutable_indicator_config()->::b3console::ShifterMessage_IndicatorConfigMessage::MergeFrom(from._internal_indicator_config());
  }
  if (from.has_melexis_config()) {
    _internal_mutable_melexis_config()->::b3console::ShifterMessage_MelexisConfigMessage::MergeFrom(from._internal_melexis_config());
  }
  if (from.has_park_config()) {
    _internal_mutable_park_config()->::b3console::ShifterMessage_ShifterPositionMessage::MergeFrom(from._internal_park_config());
  }
  if (from.has_reverse_config()) {
    _internal_mutable_reverse_config()->::b3console::ShifterMessage_ShifterPositionMessage::MergeFrom(from._internal_reverse_config());
  }
  if (from.has_neutral_config()) {
    _internal_mutable_neutral_config()->::b3console::ShifterMessage_ShifterPositionMessage::MergeFrom(from._internal_neutral_config());
  }
  if (from.has_drive_config()) {
    _internal_mutable_drive_config()->::b3console::ShifterMessage_ShifterPositionMessage::MergeFrom(from._internal_drive_config());
  }
  if (from.has_manual_config()) {
    _internal_mutable_manual_config()->::b3console::ShifterMessage_ShifterPositionMessage::MergeFrom(from._internal_manual_config());
  }
  if (from.has_up_config()) {
    _internal_mutable_up_config()->::b3console::ShifterMessage_ShifterPositionMessage::MergeFrom(from._internal_up_config());
  }
  if (from.has_down_config()) {
    _internal_mutable_down_config()->::b3console::ShifterMessage_ShifterPositionMessage::MergeFrom(from._internal_down_config());
  }
}

void ShifterMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b3console.ShifterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShifterMessage::CopyFrom(const ShifterMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b3console.ShifterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShifterMessage::IsInitialized() const {
  return true;
}

void ShifterMessage::InternalSwap(ShifterMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShifterMessage, down_config_)
      + sizeof(ShifterMessage::down_config_)
      - PROTOBUF_FIELD_OFFSET(ShifterMessage, can_bus_config_)>(
          reinterpret_cast<char*>(&can_bus_config_),
          reinterpret_cast<char*>(&other->can_bus_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShifterMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMessage_Ems22AConfigMessage::InitAsDefaultInstance() {
}
class TransMessage_Ems22AConfigMessage::_Internal {
 public:
};

TransMessage_Ems22AConfigMessage::TransMessage_Ems22AConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:b3console.TransMessage.Ems22AConfigMessage)
}
TransMessage_Ems22AConfigMessage::TransMessage_Ems22AConfigMessage(const TransMessage_Ems22AConfigMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enc_max_, &from.enc_max_,
    static_cast<size_t>(reinterpret_cast<char*>(&enc_min_) -
    reinterpret_cast<char*>(&enc_max_)) + sizeof(enc_min_));
  // @@protoc_insertion_point(copy_constructor:b3console.TransMessage.Ems22AConfigMessage)
}

void TransMessage_Ems22AConfigMessage::SharedCtor() {
  ::memset(&enc_max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enc_min_) -
      reinterpret_cast<char*>(&enc_max_)) + sizeof(enc_min_));
}

TransMessage_Ems22AConfigMessage::~TransMessage_Ems22AConfigMessage() {
  // @@protoc_insertion_point(destructor:b3console.TransMessage.Ems22AConfigMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransMessage_Ems22AConfigMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransMessage_Ems22AConfigMessage::ArenaDtor(void* object) {
  TransMessage_Ems22AConfigMessage* _this = reinterpret_cast< TransMessage_Ems22AConfigMessage* >(object);
  (void)_this;
}
void TransMessage_Ems22AConfigMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransMessage_Ems22AConfigMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMessage_Ems22AConfigMessage& TransMessage_Ems22AConfigMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMessage_Ems22AConfigMessage_config_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void TransMessage_Ems22AConfigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:b3console.TransMessage.Ems22AConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enc_max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enc_min_) -
      reinterpret_cast<char*>(&enc_max_)) + sizeof(enc_min_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransMessage_Ems22AConfigMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 enc_max = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enc_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enc_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enc_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMessage_Ems22AConfigMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:b3console.TransMessage.Ems22AConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 enc_max = 1;
  if (this->enc_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_enc_max(), target);
  }

  // int32 enc_min = 2;
  if (this->enc_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_enc_min(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b3console.TransMessage.Ems22AConfigMessage)
  return target;
}

size_t TransMessage_Ems22AConfigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b3console.TransMessage.Ems22AConfigMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 enc_max = 1;
  if (this->enc_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enc_max());
  }

  // int32 enc_min = 2;
  if (this->enc_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enc_min());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMessage_Ems22AConfigMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b3console.TransMessage.Ems22AConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMessage_Ems22AConfigMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMessage_Ems22AConfigMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b3console.TransMessage.Ems22AConfigMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b3console.TransMessage.Ems22AConfigMessage)
    MergeFrom(*source);
  }
}

void TransMessage_Ems22AConfigMessage::MergeFrom(const TransMessage_Ems22AConfigMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b3console.TransMessage.Ems22AConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enc_max() != 0) {
    _internal_set_enc_max(from._internal_enc_max());
  }
  if (from.enc_min() != 0) {
    _internal_set_enc_min(from._internal_enc_min());
  }
}

void TransMessage_Ems22AConfigMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b3console.TransMessage.Ems22AConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMessage_Ems22AConfigMessage::CopyFrom(const TransMessage_Ems22AConfigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b3console.TransMessage.Ems22AConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMessage_Ems22AConfigMessage::IsInitialized() const {
  return true;
}

void TransMessage_Ems22AConfigMessage::InternalSwap(TransMessage_Ems22AConfigMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransMessage_Ems22AConfigMessage, enc_min_)
      + sizeof(TransMessage_Ems22AConfigMessage::enc_min_)
      - PROTOBUF_FIELD_OFFSET(TransMessage_Ems22AConfigMessage, enc_max_)>(
          reinterpret_cast<char*>(&enc_max_),
          reinterpret_cast<char*>(&other->enc_max_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMessage_Ems22AConfigMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMessage_Vnh5019ConfigMessage::InitAsDefaultInstance() {
}
class TransMessage_Vnh5019ConfigMessage::_Internal {
 public:
};

TransMessage_Vnh5019ConfigMessage::TransMessage_Vnh5019ConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:b3console.TransMessage.Vnh5019ConfigMessage)
}
TransMessage_Vnh5019ConfigMessage::TransMessage_Vnh5019ConfigMessage(const TransMessage_Vnh5019ConfigMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  max_current_ = from.max_current_;
  // @@protoc_insertion_point(copy_constructor:b3console.TransMessage.Vnh5019ConfigMessage)
}

void TransMessage_Vnh5019ConfigMessage::SharedCtor() {
  max_current_ = 0;
}

TransMessage_Vnh5019ConfigMessage::~TransMessage_Vnh5019ConfigMessage() {
  // @@protoc_insertion_point(destructor:b3console.TransMessage.Vnh5019ConfigMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransMessage_Vnh5019ConfigMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransMessage_Vnh5019ConfigMessage::ArenaDtor(void* object) {
  TransMessage_Vnh5019ConfigMessage* _this = reinterpret_cast< TransMessage_Vnh5019ConfigMessage* >(object);
  (void)_this;
}
void TransMessage_Vnh5019ConfigMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransMessage_Vnh5019ConfigMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMessage_Vnh5019ConfigMessage& TransMessage_Vnh5019ConfigMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMessage_Vnh5019ConfigMessage_config_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void TransMessage_Vnh5019ConfigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:b3console.TransMessage.Vnh5019ConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_current_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransMessage_Vnh5019ConfigMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMessage_Vnh5019ConfigMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:b3console.TransMessage.Vnh5019ConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_current = 1;
  if (this->max_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_current(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b3console.TransMessage.Vnh5019ConfigMessage)
  return target;
}

size_t TransMessage_Vnh5019ConfigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b3console.TransMessage.Vnh5019ConfigMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 max_current = 1;
  if (this->max_current() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_current());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMessage_Vnh5019ConfigMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b3console.TransMessage.Vnh5019ConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMessage_Vnh5019ConfigMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMessage_Vnh5019ConfigMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b3console.TransMessage.Vnh5019ConfigMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b3console.TransMessage.Vnh5019ConfigMessage)
    MergeFrom(*source);
  }
}

void TransMessage_Vnh5019ConfigMessage::MergeFrom(const TransMessage_Vnh5019ConfigMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b3console.TransMessage.Vnh5019ConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_current() != 0) {
    _internal_set_max_current(from._internal_max_current());
  }
}

void TransMessage_Vnh5019ConfigMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b3console.TransMessage.Vnh5019ConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMessage_Vnh5019ConfigMessage::CopyFrom(const TransMessage_Vnh5019ConfigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b3console.TransMessage.Vnh5019ConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMessage_Vnh5019ConfigMessage::IsInitialized() const {
  return true;
}

void TransMessage_Vnh5019ConfigMessage::InternalSwap(TransMessage_Vnh5019ConfigMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(max_current_, other->max_current_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMessage_Vnh5019ConfigMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMessage_PidConfigMessage::InitAsDefaultInstance() {
}
class TransMessage_PidConfigMessage::_Internal {
 public:
};

TransMessage_PidConfigMessage::TransMessage_PidConfigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:b3console.TransMessage.PidConfigMessage)
}
TransMessage_PidConfigMessage::TransMessage_PidConfigMessage(const TransMessage_PidConfigMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&agg_kd_, &from.agg_kd_,
    static_cast<size_t>(reinterpret_cast<char*>(&cons_kp_) -
    reinterpret_cast<char*>(&agg_kd_)) + sizeof(cons_kp_));
  // @@protoc_insertion_point(copy_constructor:b3console.TransMessage.PidConfigMessage)
}

void TransMessage_PidConfigMessage::SharedCtor() {
  ::memset(&agg_kd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cons_kp_) -
      reinterpret_cast<char*>(&agg_kd_)) + sizeof(cons_kp_));
}

TransMessage_PidConfigMessage::~TransMessage_PidConfigMessage() {
  // @@protoc_insertion_point(destructor:b3console.TransMessage.PidConfigMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransMessage_PidConfigMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransMessage_PidConfigMessage::ArenaDtor(void* object) {
  TransMessage_PidConfigMessage* _this = reinterpret_cast< TransMessage_PidConfigMessage* >(object);
  (void)_this;
}
void TransMessage_PidConfigMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransMessage_PidConfigMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMessage_PidConfigMessage& TransMessage_PidConfigMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMessage_PidConfigMessage_config_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void TransMessage_PidConfigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:b3console.TransMessage.PidConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&agg_kd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cons_kp_) -
      reinterpret_cast<char*>(&agg_kd_)) + sizeof(cons_kp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransMessage_PidConfigMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double agg_kd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          agg_kd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double agg_ki = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          agg_ki_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double agg_kp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          agg_kp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cons_kd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          cons_kd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cons_ki = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          cons_ki_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cons_kp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          cons_kp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMessage_PidConfigMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:b3console.TransMessage.PidConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double agg_kd = 1;
  if (!(this->agg_kd() <= 0 && this->agg_kd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_agg_kd(), target);
  }

  // double agg_ki = 2;
  if (!(this->agg_ki() <= 0 && this->agg_ki() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_agg_ki(), target);
  }

  // double agg_kp = 3;
  if (!(this->agg_kp() <= 0 && this->agg_kp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_agg_kp(), target);
  }

  // double cons_kd = 4;
  if (!(this->cons_kd() <= 0 && this->cons_kd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_cons_kd(), target);
  }

  // double cons_ki = 5;
  if (!(this->cons_ki() <= 0 && this->cons_ki() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_cons_ki(), target);
  }

  // double cons_kp = 6;
  if (!(this->cons_kp() <= 0 && this->cons_kp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_cons_kp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b3console.TransMessage.PidConfigMessage)
  return target;
}

size_t TransMessage_PidConfigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b3console.TransMessage.PidConfigMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double agg_kd = 1;
  if (!(this->agg_kd() <= 0 && this->agg_kd() >= 0)) {
    total_size += 1 + 8;
  }

  // double agg_ki = 2;
  if (!(this->agg_ki() <= 0 && this->agg_ki() >= 0)) {
    total_size += 1 + 8;
  }

  // double agg_kp = 3;
  if (!(this->agg_kp() <= 0 && this->agg_kp() >= 0)) {
    total_size += 1 + 8;
  }

  // double cons_kd = 4;
  if (!(this->cons_kd() <= 0 && this->cons_kd() >= 0)) {
    total_size += 1 + 8;
  }

  // double cons_ki = 5;
  if (!(this->cons_ki() <= 0 && this->cons_ki() >= 0)) {
    total_size += 1 + 8;
  }

  // double cons_kp = 6;
  if (!(this->cons_kp() <= 0 && this->cons_kp() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMessage_PidConfigMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b3console.TransMessage.PidConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMessage_PidConfigMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMessage_PidConfigMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b3console.TransMessage.PidConfigMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b3console.TransMessage.PidConfigMessage)
    MergeFrom(*source);
  }
}

void TransMessage_PidConfigMessage::MergeFrom(const TransMessage_PidConfigMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b3console.TransMessage.PidConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.agg_kd() <= 0 && from.agg_kd() >= 0)) {
    _internal_set_agg_kd(from._internal_agg_kd());
  }
  if (!(from.agg_ki() <= 0 && from.agg_ki() >= 0)) {
    _internal_set_agg_ki(from._internal_agg_ki());
  }
  if (!(from.agg_kp() <= 0 && from.agg_kp() >= 0)) {
    _internal_set_agg_kp(from._internal_agg_kp());
  }
  if (!(from.cons_kd() <= 0 && from.cons_kd() >= 0)) {
    _internal_set_cons_kd(from._internal_cons_kd());
  }
  if (!(from.cons_ki() <= 0 && from.cons_ki() >= 0)) {
    _internal_set_cons_ki(from._internal_cons_ki());
  }
  if (!(from.cons_kp() <= 0 && from.cons_kp() >= 0)) {
    _internal_set_cons_kp(from._internal_cons_kp());
  }
}

void TransMessage_PidConfigMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b3console.TransMessage.PidConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMessage_PidConfigMessage::CopyFrom(const TransMessage_PidConfigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b3console.TransMessage.PidConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMessage_PidConfigMessage::IsInitialized() const {
  return true;
}

void TransMessage_PidConfigMessage::InternalSwap(TransMessage_PidConfigMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransMessage_PidConfigMessage, cons_kp_)
      + sizeof(TransMessage_PidConfigMessage::cons_kp_)
      - PROTOBUF_FIELD_OFFSET(TransMessage_PidConfigMessage, agg_kd_)>(
          reinterpret_cast<char*>(&agg_kd_),
          reinterpret_cast<char*>(&other->agg_kd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMessage_PidConfigMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMessage::InitAsDefaultInstance() {
  ::b3console::_TransMessage_default_instance_._instance.get_mutable()->can_bus_config_ = const_cast< ::b3console::CanBusConfigMessage*>(
      ::b3console::CanBusConfigMessage::internal_default_instance());
  ::b3console::_TransMessage_default_instance_._instance.get_mutable()->ems22a_config_ = const_cast< ::b3console::TransMessage_Ems22AConfigMessage*>(
      ::b3console::TransMessage_Ems22AConfigMessage::internal_default_instance());
  ::b3console::_TransMessage_default_instance_._instance.get_mutable()->vnh5019_config_ = const_cast< ::b3console::TransMessage_Vnh5019ConfigMessage*>(
      ::b3console::TransMessage_Vnh5019ConfigMessage::internal_default_instance());
  ::b3console::_TransMessage_default_instance_._instance.get_mutable()->pid_config_ = const_cast< ::b3console::TransMessage_PidConfigMessage*>(
      ::b3console::TransMessage_PidConfigMessage::internal_default_instance());
}
class TransMessage::_Internal {
 public:
  static const ::b3console::CanBusConfigMessage& can_bus_config(const TransMessage* msg);
  static const ::b3console::TransMessage_Ems22AConfigMessage& ems22a_config(const TransMessage* msg);
  static const ::b3console::TransMessage_Vnh5019ConfigMessage& vnh5019_config(const TransMessage* msg);
  static const ::b3console::TransMessage_PidConfigMessage& pid_config(const TransMessage* msg);
};

const ::b3console::CanBusConfigMessage&
TransMessage::_Internal::can_bus_config(const TransMessage* msg) {
  return *msg->can_bus_config_;
}
const ::b3console::TransMessage_Ems22AConfigMessage&
TransMessage::_Internal::ems22a_config(const TransMessage* msg) {
  return *msg->ems22a_config_;
}
const ::b3console::TransMessage_Vnh5019ConfigMessage&
TransMessage::_Internal::vnh5019_config(const TransMessage* msg) {
  return *msg->vnh5019_config_;
}
const ::b3console::TransMessage_PidConfigMessage&
TransMessage::_Internal::pid_config(const TransMessage* msg) {
  return *msg->pid_config_;
}
TransMessage::TransMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:b3console.TransMessage)
}
TransMessage::TransMessage(const TransMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_can_bus_config()) {
    can_bus_config_ = new ::b3console::CanBusConfigMessage(*from.can_bus_config_);
  } else {
    can_bus_config_ = nullptr;
  }
  if (from._internal_has_ems22a_config()) {
    ems22a_config_ = new ::b3console::TransMessage_Ems22AConfigMessage(*from.ems22a_config_);
  } else {
    ems22a_config_ = nullptr;
  }
  if (from._internal_has_vnh5019_config()) {
    vnh5019_config_ = new ::b3console::TransMessage_Vnh5019ConfigMessage(*from.vnh5019_config_);
  } else {
    vnh5019_config_ = nullptr;
  }
  if (from._internal_has_pid_config()) {
    pid_config_ = new ::b3console::TransMessage_PidConfigMessage(*from.pid_config_);
  } else {
    pid_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:b3console.TransMessage)
}

void TransMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMessage_config_5fmessage_2eproto.base);
  ::memset(&can_bus_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_config_) -
      reinterpret_cast<char*>(&can_bus_config_)) + sizeof(pid_config_));
}

TransMessage::~TransMessage() {
  // @@protoc_insertion_point(destructor:b3console.TransMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete can_bus_config_;
  if (this != internal_default_instance()) delete ems22a_config_;
  if (this != internal_default_instance()) delete vnh5019_config_;
  if (this != internal_default_instance()) delete pid_config_;
}

void TransMessage::ArenaDtor(void* object) {
  TransMessage* _this = reinterpret_cast< TransMessage* >(object);
  (void)_this;
}
void TransMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMessage& TransMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMessage_config_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void TransMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:b3console.TransMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && can_bus_config_ != nullptr) {
    delete can_bus_config_;
  }
  can_bus_config_ = nullptr;
  if (GetArena() == nullptr && ems22a_config_ != nullptr) {
    delete ems22a_config_;
  }
  ems22a_config_ = nullptr;
  if (GetArena() == nullptr && vnh5019_config_ != nullptr) {
    delete vnh5019_config_;
  }
  vnh5019_config_ = nullptr;
  if (GetArena() == nullptr && pid_config_ != nullptr) {
    delete pid_config_;
  }
  pid_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .b3console.CanBusConfigMessage can_bus_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_can_bus_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.TransMessage.Ems22AConfigMessage ems22a_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ems22a_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.TransMessage.Vnh5019ConfigMessage vnh5019_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vnh5019_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .b3console.TransMessage.PidConfigMessage pid_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pid_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:b3console.TransMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .b3console.CanBusConfigMessage can_bus_config = 1;
  if (this->has_can_bus_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::can_bus_config(this), target, stream);
  }

  // .b3console.TransMessage.Ems22AConfigMessage ems22a_config = 2;
  if (this->has_ems22a_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ems22a_config(this), target, stream);
  }

  // .b3console.TransMessage.Vnh5019ConfigMessage vnh5019_config = 3;
  if (this->has_vnh5019_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vnh5019_config(this), target, stream);
  }

  // .b3console.TransMessage.PidConfigMessage pid_config = 4;
  if (this->has_pid_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pid_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b3console.TransMessage)
  return target;
}

size_t TransMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b3console.TransMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .b3console.CanBusConfigMessage can_bus_config = 1;
  if (this->has_can_bus_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *can_bus_config_);
  }

  // .b3console.TransMessage.Ems22AConfigMessage ems22a_config = 2;
  if (this->has_ems22a_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ems22a_config_);
  }

  // .b3console.TransMessage.Vnh5019ConfigMessage vnh5019_config = 3;
  if (this->has_vnh5019_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vnh5019_config_);
  }

  // .b3console.TransMessage.PidConfigMessage pid_config = 4;
  if (this->has_pid_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pid_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b3console.TransMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b3console.TransMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b3console.TransMessage)
    MergeFrom(*source);
  }
}

void TransMessage::MergeFrom(const TransMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b3console.TransMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_can_bus_config()) {
    _internal_mutable_can_bus_config()->::b3console::CanBusConfigMessage::MergeFrom(from._internal_can_bus_config());
  }
  if (from.has_ems22a_config()) {
    _internal_mutable_ems22a_config()->::b3console::TransMessage_Ems22AConfigMessage::MergeFrom(from._internal_ems22a_config());
  }
  if (from.has_vnh5019_config()) {
    _internal_mutable_vnh5019_config()->::b3console::TransMessage_Vnh5019ConfigMessage::MergeFrom(from._internal_vnh5019_config());
  }
  if (from.has_pid_config()) {
    _internal_mutable_pid_config()->::b3console::TransMessage_PidConfigMessage::MergeFrom(from._internal_pid_config());
  }
}

void TransMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b3console.TransMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMessage::CopyFrom(const TransMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b3console.TransMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMessage::IsInitialized() const {
  return true;
}

void TransMessage::InternalSwap(TransMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransMessage, pid_config_)
      + sizeof(TransMessage::pid_config_)
      - PROTOBUF_FIELD_OFFSET(TransMessage, can_bus_config_)>(
          reinterpret_cast<char*>(&can_bus_config_),
          reinterpret_cast<char*>(&other->can_bus_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace b3console
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::b3console::ConfigBaseMessage* Arena::CreateMaybeMessage< ::b3console::ConfigBaseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::b3console::ConfigBaseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::b3console::DoorMessage_MirrorActionConfigMessage* Arena::CreateMaybeMessage< ::b3console::DoorMessage_MirrorActionConfigMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::b3console::DoorMessage_MirrorActionConfigMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::b3console::DoorMessage_MirrorSelectConfigMessage* Arena::CreateMaybeMessage< ::b3console::DoorMessage_MirrorSelectConfigMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::b3console::DoorMessage_MirrorSelectConfigMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::b3console::DoorMessage_WindowActionConfigMessage* Arena::CreateMaybeMessage< ::b3console::DoorMessage_WindowActionConfigMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::b3console::DoorMessage_WindowActionConfigMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::b3console::DoorMessage* Arena::CreateMaybeMessage< ::b3console::DoorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::b3console::DoorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::b3console::CanBusConfigMessage* Arena::CreateMaybeMessage< ::b3console::CanBusConfigMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::b3console::CanBusConfigMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::b3console::ShifterMessage_IndicatorConfigMessage* Arena::CreateMaybeMessage< ::b3console::ShifterMessage_IndicatorConfigMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::b3console::ShifterMessage_IndicatorConfigMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::b3console::ShifterMessage_MelexisConfigMessage* Arena::CreateMaybeMessage< ::b3console::ShifterMessage_MelexisConfigMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::b3console::ShifterMessage_MelexisConfigMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::b3console::ShifterMessage_ShifterPositionMessage* Arena::CreateMaybeMessage< ::b3console::ShifterMessage_ShifterPositionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::b3console::ShifterMessage_ShifterPositionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::b3console::ShifterMessage* Arena::CreateMaybeMessage< ::b3console::ShifterMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::b3console::ShifterMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::b3console::TransMessage_Ems22AConfigMessage* Arena::CreateMaybeMessage< ::b3console::TransMessage_Ems22AConfigMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::b3console::TransMessage_Ems22AConfigMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::b3console::TransMessage_Vnh5019ConfigMessage* Arena::CreateMaybeMessage< ::b3console::TransMessage_Vnh5019ConfigMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::b3console::TransMessage_Vnh5019ConfigMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::b3console::TransMessage_PidConfigMessage* Arena::CreateMaybeMessage< ::b3console::TransMessage_PidConfigMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::b3console::TransMessage_PidConfigMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::b3console::TransMessage* Arena::CreateMaybeMessage< ::b3console::TransMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::b3console::TransMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
